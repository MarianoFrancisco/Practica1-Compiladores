
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizador.parser;

import java.util.*;
import java.io.*;
import java.lang.*;
import java_cup.runtime.*;
import analizador.lexer.parteLexica;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
 */
@SuppressWarnings({"rawtypes"})
public class SintacticoParser extends java_cup.runtime.lr_parser {

  public final Class getSymbolContainer() {
    return sym.class;
  }

  /** Default constructor. */
  @Deprecated
  public SintacticoParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintacticoParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] =
          unpackFromStrings(new String[] {
                  "\000\u02e4\000\002\002\004\000\002\002\010\000\002\002" +
                          "\010\000\002\002\010\000\002\002\010\000\002\002\004" +
                          "\000\002\003\010\000\002\003\007\000\002\003\004\000" +
                          "\002\034\003\000\002\034\003\000\002\237\007\000\002" +
                          "\237\007\000\002\237\011\000\002\237\011\000\002\237" +
                          "\007\000\002\237\011\000\002\240\007\000\002\240\011" +
                          "\000\002\240\011\000\002\240\007\000\002\240\011\000" +
                          "\002\241\007\000\002\241\011\000\002\241\011\000\002" +
                          "\241\007\000\002\241\011\000\002\242\007\000\002\242" +
                          "\007\000\002\242\011\000\002\242\007\000\002\242\011" +
                          "\000\002\243\007\000\002\243\007\000\002\243\011\000" +
                          "\002\243\007\000\002\243\011\000\002\244\007\000\002" +
                          "\244\007\000\002\244\011\000\002\244\011\000\002\244" +
                          "\011\000\002\245\007\000\002\245\007\000\002\245\011" +
                          "\000\002\245\011\000\002\245\007\000\002\246\011\000" +
                          "\002\246\011\000\002\246\007\000\002\246\011\000\002" +
                          "\247\007\000\002\247\011\000\002\247\007\000\002\247" +
                          "\011\000\002\250\007\000\002\250\011\000\002\250\007" +
                          "\000\002\250\011\000\002\251\007\000\002\251\011\000" +
                          "\002\251\011\000\002\251\011\000\002\252\007\000\002" +
                          "\252\011\000\002\252\011\000\002\252\007\000\002\253" +
                          "\007\000\002\253\011\000\002\253\007\000\002\253\011" +
                          "\000\002\254\007\000\002\254\011\000\002\254\007\000" +
                          "\002\254\011\000\002\255\007\000\002\255\011\000\002" +
                          "\255\011\000\002\255\011\000\002\256\007\000\002\256" +
                          "\011\000\002\256\011\000\002\256\007\000\002\257\007" +
                          "\000\002\257\007\000\002\257\007\000\002\257\011\000" +
                          "\002\260\007\000\002\260\007\000\002\260\011\000\002" +
                          "\260\011\000\002\261\007\000\002\261\007\000\002\261" +
                          "\011\000\002\261\007\000\002\262\007\000\002\262\007" +
                          "\000\002\262\011\000\002\262\011\000\002\263\007\000" +
                          "\002\263\007\000\002\263\011\000\002\263\007\000\002" +
                          "\264\007\000\002\264\007\000\002\264\011\000\002\264" +
                          "\011\000\002\265\011\000\002\265\007\000\002\265\011" +
                          "\000\002\266\011\000\002\266\007\000\002\266\011\000" +
                          "\002\267\011\000\002\267\011\000\002\267\011\000\002" +
                          "\270\011\000\002\270\011\000\002\270\007\000\002\271" +
                          "\007\000\002\271\007\000\002\271\011\000\002\272\007" +
                          "\000\002\272\011\000\002\272\011\000\002\273\007\000" +
                          "\002\273\011\000\002\273\007\000\002\274\007\000\002" +
                          "\274\011\000\002\274\011\000\002\275\007\000\002\275" +
                          "\011\000\002\275\007\000\002\276\007\000\002\276\011" +
                          "\000\002\276\011\000\002\277\007\000\002\277\007\000" +
                          "\002\277\011\000\002\300\007\000\002\300\011\000\002" +
                          "\300\011\000\002\301\007\000\002\301\011\000\002\301" +
                          "\007\000\002\302\007\000\002\302\011\000\002\302\011" +
                          "\000\002\303\007\000\002\303\011\000\002\303\007\000" +
                          "\002\304\007\000\002\304\011\000\002\304\011\000\002" +
                          "\305\007\000\002\305\007\000\002\305\011\000\002\306" +
                          "\007\000\002\306\007\000\002\306\007\000\002\307\007" +
                          "\000\002\307\007\000\002\307\011\000\002\310\007\000" +
                          "\002\310\007\000\002\310\011\000\002\311\007\000\002" +
                          "\311\011\000\002\312\011\000\002\312\011\000\002\313" +
                          "\011\000\002\313\007\000\002\314\011\000\002\314\011" +
                          "\000\002\315\011\000\002\315\007\000\002\316\011\000" +
                          "\002\316\011\000\002\317\007\000\002\317\011\000\002" +
                          "\320\007\000\002\320\007\000\002\321\007\000\002\321" +
                          "\011\000\002\322\007\000\002\322\011\000\002\323\007" +
                          "\000\002\323\011\000\002\324\007\000\002\324\007\000" +
                          "\002\325\007\000\002\325\011\000\002\326\007\000\002" +
                          "\326\011\000\002\327\007\000\002\327\007\000\002\330" +
                          "\006\000\002\331\006\000\002\332\010\000\002\333\010" +
                          "\000\002\334\006\000\002\335\010\000\002\033\007\000" +
                          "\002\033\007\000\002\033\011\000\002\033\011\000\002" +
                          "\033\007\000\002\033\007\000\002\033\011\000\002\035" +
                          "\007\000\002\035\011\000\002\035\011\000\002\035\007" +
                          "\000\002\035\007\000\002\035\011\000\002\036\007\000" +
                          "\002\036\011\000\002\036\011\000\002\036\007\000\002" +
                          "\036\007\000\002\036\011\000\002\037\007\000\002\037" +
                          "\007\000\002\037\011\000\002\037\007\000\002\037\007" +
                          "\000\002\037\011\000\002\040\007\000\002\040\007\000" +
                          "\002\040\011\000\002\040\007\000\002\040\007\000\002" +
                          "\040\011\000\002\041\007\000\002\041\007\000\002\041" +
                          "\011\000\002\041\011\000\002\041\007\000\002\041\011" +
                          "\000\002\042\007\000\002\042\007\000\002\042\011\000" +
                          "\002\042\011\000\002\042\007\000\002\042\011\000\002" +
                          "\043\007\000\002\043\007\000\002\043\011\000\002\043" +
                          "\011\000\002\043\007\000\002\043\007\000\002\044\011" +
                          "\000\002\044\011\000\002\044\007\000\002\044\007\000" +
                          "\002\044\011\000\002\045\007\000\002\045\011\000\002" +
                          "\045\007\000\002\045\007\000\002\045\011\000\002\046" +
                          "\007\000\002\046\011\000\002\046\007\000\002\046\007" +
                          "\000\002\046\011\000\002\047\007\000\002\047\011\000" +
                          "\002\047\011\000\002\047\007\000\002\047\011\000\002" +
                          "\050\007\000\002\050\011\000\002\050\011\000\002\050" +
                          "\007\000\002\050\011\000\002\051\007\000\002\051\011" +
                          "\000\002\051\011\000\002\051\007\000\002\051\007\000" +
                          "\002\052\007\000\002\052\011\000\002\052\007\000\002" +
                          "\052\007\000\002\052\011\000\002\053\007\000\002\053" +
                          "\011\000\002\053\007\000\002\053\007\000\002\053\011" +
                          "\000\002\054\007\000\002\054\011\000\002\054\011\000" +
                          "\002\054\007\000\002\054\011\000\002\055\007\000\002" +
                          "\055\011\000\002\055\011\000\002\055\007\000\002\055" +
                          "\011\000\002\056\007\000\002\056\011\000\002\056\011" +
                          "\000\002\056\007\000\002\056\007\000\002\057\007\000" +
                          "\002\057\007\000\002\057\007\000\002\057\007\000\002" +
                          "\057\011\000\002\060\007\000\002\060\007\000\002\060" +
                          "\011\000\002\060\007\000\002\060\011\000\002\061\007" +
                          "\000\002\061\007\000\002\061\011\000\002\061\007\000" +
                          "\002\061\011\000\002\062\007\000\002\062\007\000\002" +
                          "\062\011\000\002\062\007\000\002\062\007\000\002\063" +
                          "\007\000\002\063\007\000\002\063\011\000\002\063\007" +
                          "\000\002\063\011\000\002\064\007\000\002\064\007\000" +
                          "\002\064\011\000\002\064\007\000\002\064\011\000\002" +
                          "\065\007\000\002\065\007\000\002\065\011\000\002\065" +
                          "\007\000\002\065\007\000\002\066\007\000\002\066\007" +
                          "\000\002\066\011\000\002\066\011\000\002\066\011\000" +
                          "\002\067\007\000\002\067\007\000\002\067\011\000\002" +
                          "\067\011\000\002\067\007\000\002\070\007\000\002\070" +
                          "\007\000\002\070\011\000\002\070\011\000\002\070\007" +
                          "\000\002\071\011\000\002\071\007\000\002\071\007\000" +
                          "\002\071\011\000\002\072\011\000\002\072\007\000\002" +
                          "\072\007\000\002\072\011\000\002\073\011\000\002\073" +
                          "\011\000\002\073\007\000\002\073\011\000\002\074\011" +
                          "\000\002\074\011\000\002\074\007\000\002\074\011\000" +
                          "\002\075\011\000\002\075\011\000\002\075\007\000\002" +
                          "\075\007\000\002\076\007\000\002\076\007\000\002\076" +
                          "\007\000\002\076\011\000\002\077\007\000\002\077\011" +
                          "\000\002\077\007\000\002\077\011\000\002\100\007\000" +
                          "\002\100\011\000\002\100\007\000\002\100\011\000\002" +
                          "\101\007\000\002\101\011\000\002\101\007\000\002\101" +
                          "\007\000\002\102\007\000\002\102\011\000\002\102\007" +
                          "\000\002\102\011\000\002\103\007\000\002\103\011\000" +
                          "\002\103\007\000\002\103\011\000\002\104\007\000\002" +
                          "\104\011\000\002\104\007\000\002\104\007\000\002\105" +
                          "\007\000\002\105\011\000\002\105\011\000\002\105\011" +
                          "\000\002\106\007\000\002\106\011\000\002\106\011\000" +
                          "\002\106\007\000\002\107\007\000\002\107\011\000\002" +
                          "\107\011\000\002\107\007\000\002\110\007\000\002\110" +
                          "\007\000\002\110\007\000\002\110\011\000\002\111\007" +
                          "\000\002\111\011\000\002\111\007\000\002\111\011\000" +
                          "\002\112\007\000\002\112\011\000\002\112\007\000\002" +
                          "\112\011\000\002\113\007\000\002\113\011\000\002\113" +
                          "\007\000\002\113\011\000\002\114\007\000\002\114\011" +
                          "\000\002\114\007\000\002\114\011\000\002\115\007\000" +
                          "\002\115\011\000\002\115\007\000\002\115\011\000\002" +
                          "\116\007\000\002\116\011\000\002\116\007\000\002\116" +
                          "\007\000\002\117\007\000\002\117\011\000\002\117\011" +
                          "\000\002\117\011\000\002\120\007\000\002\120\011\000" +
                          "\002\120\011\000\002\120\007\000\002\121\007\000\002" +
                          "\121\011\000\002\121\010\000\002\121\007\000\002\122" +
                          "\007\000\002\122\007\000\002\122\007\000\002\122\011" +
                          "\000\002\123\007\000\002\123\007\000\002\123\007\000" +
                          "\002\123\011\000\002\124\007\000\002\124\007\000\002" +
                          "\124\007\000\002\124\007\000\002\125\007\000\002\125" +
                          "\007\000\002\125\011\000\002\125\011\000\002\126\007" +
                          "\000\002\126\007\000\002\126\011\000\002\126\007\000" +
                          "\002\127\007\000\002\127\007\000\002\127\011\000\002" +
                          "\127\007\000\002\130\007\000\002\130\007\000\002\130" +
                          "\011\000\002\130\011\000\002\131\007\000\002\131\007" +
                          "\000\002\131\011\000\002\131\007\000\002\132\007\000" +
                          "\002\132\007\000\002\132\011\000\002\132\007\000\002" +
                          "\133\007\000\002\133\007\000\002\133\011\000\002\133" +
                          "\011\000\002\134\007\000\002\134\007\000\002\134\011" +
                          "\000\002\135\011\000\002\135\007\000\002\135\011\000" +
                          "\002\136\011\000\002\136\007\000\002\136\011\000\002" +
                          "\137\011\000\002\137\007\000\002\137\007\000\002\140" +
                          "\011\000\002\140\007\000\002\140\011\000\002\141\011" +
                          "\000\002\141\007\000\002\141\011\000\002\142\011\000" +
                          "\002\142\007\000\002\142\007\000\002\143\011\000\002" +
                          "\143\011\000\002\143\011\000\002\144\011\000\002\144" +
                          "\011\000\002\144\007\000\002\145\011\000\002\145\011" +
                          "\000\002\145\007\000\002\146\007\000\002\146\007\000" +
                          "\002\146\011\000\002\147\007\000\002\147\007\000\002" +
                          "\147\011\000\002\150\007\000\002\150\007\000\002\150" +
                          "\007\000\002\151\007\000\002\151\011\000\002\151\011" +
                          "\000\002\152\007\000\002\152\011\000\002\152\007\000" +
                          "\002\153\007\000\002\153\011\000\002\153\007\000\002" +
                          "\154\007\000\002\154\011\000\002\154\011\000\002\155" +
                          "\007\000\002\155\011\000\002\155\007\000\002\156\007" +
                          "\000\002\156\011\000\002\156\007\000\002\157\007\000" +
                          "\002\157\011\000\002\157\011\000\002\160\007\000\002" +
                          "\160\007\000\002\160\011\000\002\161\007\000\002\161" +
                          "\007\000\002\161\011\000\002\162\007\000\002\162\007" +
                          "\000\002\162\007\000\002\163\007\000\002\163\011\000" +
                          "\002\163\011\000\002\164\007\000\002\164\011\000\002" +
                          "\164\007\000\002\165\007\000\002\165\011\000\002\165" +
                          "\007\000\002\166\007\000\002\166\011\000\002\166\011" +
                          "\000\002\167\007\000\002\167\011\000\002\167\007\000" +
                          "\002\170\007\000\002\170\011\000\002\170\007\000\002" +
                          "\171\007\000\002\171\011\000\002\171\011\000\002\172" +
                          "\007\000\002\172\007\000\002\172\011\000\002\173\007" +
                          "\000\002\173\007\000\002\173\007\000\002\174\007\000" +
                          "\002\174\007\000\002\174\007\000\002\175\007\000\002" +
                          "\175\007\000\002\175\011\000\002\176\007\000\002\176" +
                          "\007\000\002\176\011\000\002\177\007\000\002\177\011" +
                          "\000\002\200\007\000\002\200\011\000\002\201\007\000" +
                          "\002\201\007\000\002\202\011\000\002\202\011\000\002" +
                          "\203\011\000\002\203\007\000\002\204\011\000\002\204" +
                          "\007\000\002\205\011\000\002\205\011\000\002\206\011" +
                          "\000\002\206\007\000\002\207\011\000\002\207\007\000" +
                          "\002\210\011\000\002\210\011\000\002\211\007\000\002" +
                          "\211\011\000\002\212\007\000\002\212\007\000\002\213" +
                          "\007\000\002\213\007\000\002\214\007\000\002\214\011" +
                          "\000\002\215\007\000\002\215\011\000\002\216\007\000" +
                          "\002\216\011\000\002\217\007\000\002\217\007\000\002" +
                          "\220\007\000\002\220\007\000\002\221\007\000\002\221" +
                          "\011\000\002\222\007\000\002\222\011\000\002\223\007" +
                          "\000\002\223\007\000\002\224\006\000\002\225\006\000" +
                          "\002\226\010\000\002\227\006\000\002\230\010\000\002" +
                          "\231\006\000\002\232\010\000\002\233\005\000\002\233" +
                          "\003\000\002\234\005\000\002\234\003\000\002\234\007" +
                          "\000\002\234\005\000\002\234\007\000\002\234\005\000" +
                          "\002\234\007\000\002\234\005\000\002\234\007\000\002" +
                          "\234\005\000\002\234\007\000\002\234\005\000\002\234" +
                          "\011\000\002\234\007\000\002\234\011\000\002\234\007" +
                          "\000\002\234\011\000\002\234\007\000\002\234\011\000" +
                          "\002\234\007\000\002\027\003\000\002\027\005\000\002" +
                          "\235\011\000\002\235\007\000\002\236\003\000\002\236" +
                          "\005\000\002\031\003\000\002\032\003\000\002\004\007" +
                          "\000\002\004\011\000\002\004\011\000\002\004\011\000" +
                          "\002\005\007\000\002\005\011\000\002\005\011\000\002" +
                          "\006\011\000\002\006\007\000\002\006\011\000\002\007" +
                          "\011\000\002\007\011\000\002\007\007\000\002\010\011" +
                          "\000\002\010\011\000\002\010\011\000\002\011\011\000" +
                          "\002\011\011\000\002\012\011\000\002\012\011\000\002" +
                          "\013\011\000\002\013\011\000\002\014\007\000\002\014" +
                          "\011\000\002\015\007\000\002\015\011\000\002\016\007" +
                          "\000\002\016\011\000\002\017\010\000\002\020\010\000" +
                          "\002\021\010\000\002\022\006\000\002\023\005\000\002" +
                          "\023\003\000\002\024\005\000\002\024\003\000\002\024" +
                          "\007\000\002\024\005\000\002\024\007\000\002\024\005" +
                          "\000\002\024\007\000\002\024\005\000\002\024\007\000" +
                          "\002\024\005\000\002\024\007\000\002\024\005\000\002" +
                          "\024\011\000\002\024\007\000\002\024\011\000\002\024" +
                          "\007\000\002\024\011\000\002\024\007\000\002\024\011" +
                          "\000\002\024\007\000\002\026\003\000\002\026\005\000" +
                          "\002\025\011\000\002\025\007\000\002\030\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table =
          unpackFromStrings(new String[] {
                  "\000\u0e71\000\006\003\004\006\005\001\002\000\006\003" +
                          "\004\006\005\001\002\000\006\007\010\010\011\001\002" +
                          "\000\004\002\007\001\002\000\004\002\001\001\002\000" +
                          "\004\026\u0d6b\001\002\000\004\026\012\001\002\000\020" +
                          "\004\013\013\022\014\017\015\021\016\016\017\023\021" +
                          "\020\001\002\000\004\042\u0d3b\001\002\000\004\027\ufff7" +
                          "\001\002\000\004\027\u0d2e\001\002\000\004\042\u0ce7\001" +
                          "\002\000\004\042\u0c2d\001\002\000\004\042\u0ae6\001\002" +
                          "\000\004\042\u090f\001\002\000\004\042\u05f8\001\002\000" +
                          "\004\042\025\001\002\000\004\027\ufff8\001\002\000\004" +
                          "\037\026\001\002\000\004\043\ufd59\001\002\000\004\043" +
                          "\030\001\002\000\016\004\031\013\035\014\033\015\032" +
                          "\016\036\021\040\001\002\000\004\042\u05ce\001\002\000" +
                          "\004\042\u0587\001\002\000\004\042\u0510\001\002\000\004" +
                          "\027\ufff2\001\002\000\004\042\u044a\001\002\000\004\042" +
                          "\u0327\001\002\000\004\027\uff31\001\002\000\004\042\041" +
                          "\001\002\000\006\022\042\023\043\001\002\000\004\043" +
                          "\u0138\001\002\000\004\043\044\001\002\000\012\004\045" +
                          "\013\051\014\047\015\046\001\002\000\004\042\u011f\001" +
                          "\002\000\004\042\370\001\002\000\004\042\277\001\002" +
                          "\000\004\027\uffdb\001\002\000\004\042\052\001\002\000" +
                          "\004\035\053\001\002\000\004\037\054\001\002\000\006" +
                          "\036\ufd75\041\275\001\002\000\004\036\056\001\002\000" +
                          "\004\043\057\001\002\000\010\004\060\014\062\015\061" +
                          "\001\002\000\004\042\253\001\002\000\004\042\223\001" +
                          "\002\000\004\042\064\001\002\000\004\027\uffb5\001\002" +
                          "\000\004\035\065\001\002\000\006\033\067\044\071\001" +
                          "\002\000\016\025\203\030\205\031\202\032\204\036\ufd73" +
                          "\041\201\001\002\000\004\044\071\001\002\000\004\036" +
                          "\074\001\002\000\022\025\ufd60\030\ufd60\031\ufd60\032\ufd60" +
                          "\034\ufd60\036\ufd60\040\072\041\ufd60\001\002\000\004\044" +
                          "\073\001\002\000\020\025\ufd5f\030\ufd5f\031\ufd5f\032\ufd5f" +
                          "\034\ufd5f\036\ufd5f\041\ufd5f\001\002\000\004\043\075\001" +
                          "\002\000\006\004\076\015\077\001\002\000\004\042\132" +
                          "\001\002\000\004\042\101\001\002\000\004\027\uff74\001" +
                          "\002\000\004\035\102\001\002\000\004\026\103\001\002" +
                          "\000\004\044\115\001\002\000\004\036\105\001\002\000" +
                          "\004\043\106\001\002\000\004\004\110\001\002\000\004" +
                          "\027\uff45\001\002\000\004\042\111\001\002\000\004\037" +
                          "\112\001\002\000\004\043\ufd5a\001\002\000\004\043\114" +
                          "\001\002\000\004\027\uff3b\001\002\000\004\041\116\001" +
                          "\002\000\004\044\117\001\002\000\004\027\120\001\002" +
                          "\000\006\036\ufd5d\041\121\001\002\000\004\026\122\001" +
                          "\002\000\004\044\124\001\002\000\004\036\ufd5e\001\002" +
                          "\000\004\041\125\001\002\000\004\044\126\001\002\000" +
                          "\004\027\127\001\002\000\006\036\ufd1f\041\130\001\002" +
                          "\000\004\026\122\001\002\000\004\036\ufd20\001\002\000" +
                          "\004\037\112\001\002\000\004\043\134\001\002\000\004" +
                          "\015\135\001\002\000\004\042\137\001\002\000\004\027" +
                          "\uff46\001\002\000\004\035\140\001\002\000\004\026\103" +
                          "\001\002\000\004\036\142\001\002\000\004\043\143\001" +
                          "\002\000\004\027\uff39\001\002\000\016\025\147\030\152" +
                          "\031\146\032\150\034\151\041\145\001\002\000\004\034" +
                          "\177\001\002\000\004\044\071\001\002\000\004\044\071" +
                          "\001\002\000\004\044\071\001\002\000\004\036\ufd69\001" +
                          "\002\000\004\044\071\001\002\000\006\034\155\041\154" +
                          "\001\002\000\004\034\156\001\002\000\004\036\ufd65\001" +
                          "\002\000\006\033\067\044\071\001\002\000\004\036\ufd66" +
                          "\001\002\000\006\034\162\041\161\001\002\000\004\034" +
                          "\163\001\002\000\004\036\ufd61\001\002\000\006\033\067" +
                          "\044\071\001\002\000\004\036\ufd62\001\002\000\006\034" +
                          "\167\041\166\001\002\000\004\034\170\001\002\000\004" +
                          "\036\ufd67\001\002\000\006\033\067\044\071\001\002\000" +
                          "\004\036\ufd68\001\002\000\006\034\174\041\173\001\002" +
                          "\000\004\034\175\001\002\000\004\036\ufd63\001\002\000" +
                          "\006\033\067\044\071\001\002\000\004\036\ufd64\001\002" +
                          "\000\006\033\067\044\071\001\002\000\004\036\ufd6a\001" +
                          "\002\000\006\033\067\044\071\001\002\000\004\044\071" +
                          "\001\002\000\004\044\071\001\002\000\004\044\071\001" +
                          "\002\000\004\044\071\001\002\000\006\036\ufd6f\041\207" +
                          "\001\002\000\006\033\067\044\071\001\002\000\004\036" +
                          "\ufd70\001\002\000\006\036\ufd6b\041\212\001\002\000\006" +
                          "\033\067\044\071\001\002\000\004\036\ufd6c\001\002\000" +
                          "\006\036\ufd71\041\215\001\002\000\006\033\067\044\071" +
                          "\001\002\000\004\036\ufd72\001\002\000\006\036\ufd6d\041" +
                          "\220\001\002\000\006\033\067\044\071\001\002\000\004" +
                          "\036\ufd6e\001\002\000\004\036\ufd74\001\002\000\004\035" +
                          "\224\001\002\000\004\026\103\001\002\000\004\036\226" +
                          "\001\002\000\004\043\227\001\002\000\006\004\230\014" +
                          "\231\001\002\000\004\042\241\001\002\000\004\042\233" +
                          "\001\002\000\004\027\uff73\001\002\000\004\035\234\001" +
                          "\002\000\006\033\067\044\071\001\002\000\004\036\236" +
                          "\001\002\000\004\043\237\001\002\000\004\004\110\001" +
                          "\002\000\004\027\uff41\001\002\000\004\037\112\001\002" +
                          "\000\004\043\243\001\002\000\004\014\244\001\002\000" +
                          "\004\042\246\001\002\000\004\027\uff42\001\002\000\004" +
                          "\035\247\001\002\000\006\033\067\044\071\001\002\000" +
                          "\004\036\251\001\002\000\004\043\252\001\002\000\004" +
                          "\027\uff3a\001\002\000\004\037\112\001\002\000\004\043" +
                          "\255\001\002\000\006\014\260\015\257\001\002\000\004" +
                          "\027\uff75\001\002\000\004\042\267\001\002\000\004\042" +
                          "\261\001\002\000\004\035\262\001\002\000\006\033\067" +
                          "\044\071\001\002\000\004\036\264\001\002\000\004\043" +
                          "\265\001\002\000\004\015\135\001\002\000\004\027\uff58" +
                          "\001\002\000\004\035\270\001\002\000\004\026\103\001" +
                          "\002\000\004\036\272\001\002\000\004\043\273\001\002" +
                          "\000\004\014\244\001\002\000\004\027\uff57\001\002\000" +
                          "\004\037\054\001\002\000\004\036\ufd76\001\002\000\004" +
                          "\035\300\001\002\000\006\033\067\044\071\001\002\000" +
                          "\004\036\302\001\002\000\004\043\303\001\002\000\010" +
                          "\004\304\013\307\015\306\001\002\000\004\042\346\001" +
                          "\002\000\004\027\uffb4\001\002\000\004\042\316\001\002" +
                          "\000\004\042\310\001\002\000\004\035\311\001\002\000" +
                          "\004\037\054\001\002\000\004\036\313\001\002\000\004" +
                          "\043\314\001\002\000\006\004\076\015\077\001\002\000" +
                          "\004\027\uff6e\001\002\000\004\035\317\001\002\000\004" +
                          "\026\103\001\002\000\004\036\321\001\002\000\004\043" +
                          "\322\001\002\000\006\004\323\013\325\001\002\000\004" +
                          "\042\334\001\002\000\004\027\uff6d\001\002\000\004\042" +
                          "\326\001\002\000\004\035\327\001\002\000\004\037\054" +
                          "\001\002\000\004\036\331\001\002\000\004\043\332\001" +
                          "\002\000\004\004\110\001\002\000\004\027\uff3f\001\002" +
                          "\000\004\037\112\001\002\000\004\043\336\001\002\000" +
                          "\004\013\337\001\002\000\004\042\341\001\002\000\004" +
                          "\027\uff40\001\002\000\004\035\342\001\002\000\004\037" +
                          "\054\001\002\000\004\036\344\001\002\000\004\043\345" +
                          "\001\002\000\004\027\uff37\001\002\000\004\037\112\001" +
                          "\002\000\004\043\350\001\002\000\006\013\353\015\352" +
                          "\001\002\000\004\027\uff6f\001\002\000\004\042\362\001" +
                          "\002\000\004\042\354\001\002\000\004\035\355\001\002" +
                          "\000\004\037\054\001\002\000\004\036\357\001\002\000" +
                          "\004\043\360\001\002\000\004\015\135\001\002\000\004" +
                          "\027\uff54\001\002\000\004\035\363\001\002\000\004\026" +
                          "\103\001\002\000\004\036\365\001\002\000\004\043\366" +
                          "\001\002\000\004\013\337\001\002\000\004\027\uff53\001" +
                          "\002\000\004\035\371\001\002\000\004\026\103\001\002" +
                          "\000\004\036\373\001\002\000\004\043\374\001\002\000" +
                          "\010\004\375\013\377\014\376\001\002\000\004\042\u010d" +
                          "\001\002\000\004\042\u0107\001\002\000\004\042\u0101\001" +
                          "\002\000\004\027\uffb3\001\002\000\004\035\u0102\001\002" +
                          "\000\004\037\054\001\002\000\004\036\u0104\001\002\000" +
                          "\004\043\u0105\001\002\000\006\004\230\014\231\001\002" +
                          "\000\004\027\uff68\001\002\000\004\035\u0108\001\002\000" +
                          "\006\033\067\044\071\001\002\000\004\036\u010a\001\002" +
                          "\000\004\043\u010b\001\002\000\006\004\323\013\325\001" +
                          "\002\000\004\027\uff67\001\002\000\004\037\112\001\002" +
                          "\000\004\043\u010f\001\002\000\006\013\u0111\014\u0110\001" +
                          "\002\000\004\042\u0119\001\002\000\004\042\u0113\001\002" +
                          "\000\004\027\uff69\001\002\000\004\035\u0114\001\002\000" +
                          "\004\037\054\001\002\000\004\036\u0116\001\002\000\004" +
                          "\043\u0117\001\002\000\004\014\244\001\002\000\004\027" +
                          "\uff50\001\002\000\004\035\u011a\001\002\000\006\033\067" +
                          "\044\071\001\002\000\004\036\u011c\001\002\000\004\043" +
                          "\u011d\001\002\000\004\013\337\001\002\000\004\027\uff4f" +
                          "\001\002\000\004\037\112\001\002\000\004\043\u0121\001" +
                          "\002\000\010\013\u0125\014\u0124\015\u0123\001\002\000\004" +
                          "\027\uffb6\001\002\000\004\042\u0132\001\002\000\004\042" +
                          "\u012c\001\002\000\004\042\u0126\001\002\000\004\035\u0127" +
                          "\001\002\000\004\037\054\001\002\000\004\036\u0129\001" +
                          "\002\000\004\043\u012a\001\002\000\006\014\260\015\257" +
                          "\001\002\000\004\027\uff90\001\002\000\004\035\u012d\001" +
                          "\002\000\006\033\067\044\071\001\002\000\004\036\u012f" +
                          "\001\002\000\004\043\u0130\001\002\000\006\013\353\015" +
                          "\352\001\002\000\004\027\uff8f\001\002\000\004\035\u0133" +
                          "\001\002\000\004\026\103\001\002\000\004\036\u0135\001" +
                          "\002\000\004\043\u0136\001\002\000\006\013\u0111\014\u0110" +
                          "\001\002\000\004\027\uff8e\001\002\000\014\004\u0139\013" +
                          "\u013e\014\u013c\015\u013a\016\u013d\001\002\000\004\042\u0309" +
                          "\001\002\000\004\042\u02d9\001\002\000\004\027\uff10\001" +
                          "\002\000\004\042\u028b\001\002\000\004\042\u0204\001\002" +
                          "\000\004\042\u013f\001\002\000\004\035\u0140\001\002\000" +
                          "\004\037\054\001\002\000\004\036\u0142\001\002\000\004" +
                          "\043\u0143\001\002\000\012\004\u0145\014\u0147\015\u0146\016" +
                          "\u0148\001\002\000\004\027\ufed7\001\002\000\004\042\u01ed" +
                          "\001\002\000\004\042\u01ca\001\002\000\004\042\u0199\001" +
                          "\002\000\004\042\u0149\001\002\000\004\044\u014b\001\002" +
                          "\000\004\043\u014e\001\002\000\006\040\u014c\043\ufd5c\001" +
                          "\002\000\004\044\u014d\001\002\000\004\043\ufd5b\001\002" +
                          "\000\010\004\u014f\014\u0151\015\u0150\001\002\000\004\042" +
                          "\u0187\001\002\000\004\042\u016f\001\002\000\004\042\u0153" +
                          "\001\002\000\004\027\ufe56\001\002\000\004\035\u0154\001" +
                          "\002\000\006\033\067\044\071\001\002\000\004\036\u0156" +
                          "\001\002\000\004\043\u0157\001\002\000\006\004\u0158\015" +
                          "\u0159\001\002\000\004\042\u0165\001\002\000\004\042\u015b" +
                          "\001\002\000\004\027\ufdca\001\002\000\004\035\u015c\001" +
                          "\002\000\004\026\103\001\002\000\004\036\u015e\001\002" +
                          "\000\004\043\u015f\001\002\000\004\004\u0160\001\002\000" +
                          "\004\042\u0162\001\002\000\004\027\ufd88\001\002\000\004" +
                          "\037\112\001\002\000\004\043\u0164\001\002\000\004\027" +
                          "\ufd7c\001\002\000\004\037\112\001\002\000\004\043\u0167" +
                          "\001\002\000\004\015\u0169\001\002\000\004\027\ufd89\001" +
                          "\002\000\004\042\u016a\001\002\000\004\035\u016b\001\002" +
                          "\000\004\026\103\001\002\000\004\036\u016d\001\002\000" +
                          "\004\043\u016e\001\002\000\004\027\ufd79\001\002\000\004" +
                          "\035\u0170\001\002\000\004\026\103\001\002\000\004\036" +
                          "\u0172\001\002\000\004\043\u0173\001\002\000\006\004\u0174" +
                          "\014\u0175\001\002\000\004\042\u017d\001\002\000\004\042" +
                          "\u0177\001\002\000\004\027\ufdc9\001\002\000\004\035\u0178" +
                          "\001\002\000\006\033\067\044\071\001\002\000\004\036" +
                          "\u017a\001\002\000\004\043\u017b\001\002\000\004\004\u0160" +
                          "\001\002\000\004\027\ufd82\001\002\000\004\037\112\001" +
                          "\002\000\004\043\u017f\001\002\000\004\014\u0181\001\002" +
                          "\000\004\027\ufd83\001\002\000\004\042\u0182\001\002\000" +
                          "\004\035\u0183\001\002\000\006\033\067\044\071\001\002" +
                          "\000\004\036\u0185\001\002\000\004\043\u0186\001\002\000" +
                          "\004\027\ufd7b\001\002\000\004\037\112\001\002\000\004" +
                          "\043\u0189\001\002\000\006\014\u018b\015\u018a\001\002\000" +
                          "\004\042\u0193\001\002\000\004\042\u018d\001\002\000\004" +
                          "\027\ufdcb\001\002\000\004\035\u018e\001\002\000\006\033" +
                          "\067\044\071\001\002\000\004\036\u0190\001\002\000\004" +
                          "\043\u0191\001\002\000\004\015\u0169\001\002\000\004\027" +
                          "\ufda1\001\002\000\004\035\u0194\001\002\000\004\026\103" +
                          "\001\002\000\004\036\u0196\001\002\000\004\043\u0197\001" +
                          "\002\000\004\014\u0181\001\002\000\004\027\ufda0\001\002" +
                          "\000\004\035\u019a\001\002\000\006\033\067\044\071\001" +
                          "\002\000\004\036\u019c\001\002\000\004\043\u019d\001\002" +
                          "\000\010\004\u019e\015\u019f\016\u01a0\001\002\000\004\042" +
                          "\u01ba\001\002\000\004\042\u01a6\001\002\000\004\042\u01a2" +
                          "\001\002\000\004\027\ufe57\001\002\000\004\044\u014b\001" +
                          "\002\000\004\043\u01a4\001\002\000\006\004\u0158\015\u0159" +
                          "\001\002\000\004\027\ufdd0\001\002\000\004\035\u01a7\001" +
                          "\002\000\004\026\103\001\002\000\004\036\u01a9\001\002" +
                          "\000\004\043\u01aa\001\002\000\006\004\u01ab\016\u01ac\001" +
                          "\002\000\004\042\u01b2\001\002\000\004\042\u01ae\001\002" +
                          "\000\004\027\ufdcf\001\002\000\004\044\u014b\001\002\000" +
                          "\004\043\u01b0\001\002\000\004\004\u0160\001\002\000\004" +
                          "\027\ufd84\001\002\000\004\037\112\001\002\000\004\043" +
                          "\u01b4\001\002\000\004\016\u01b6\001\002\000\004\027\ufd85" +
                          "\001\002\000\004\042\u01b7\001\002\000\004\044\u014b\001" +
                          "\002\000\004\043\u01b9\001\002\000\004\027\ufd7a\001\002" +
                          "\000\004\037\112\001\002\000\004\043\u01bc\001\002\000" +
                          "\006\015\u01be\016\u01bf\001\002\000\004\027\ufdd1\001\002" +
                          "\000\004\042\u01c4\001\002\000\004\042\u01c0\001\002\000" +
                          "\004\044\u014b\001\002\000\004\043\u01c2\001\002\000\004" +
                          "\015\u0169\001\002\000\004\027\ufda5\001\002\000\004\035" +
                          "\u01c5\001\002\000\004\026\103\001\002\000\004\036\u01c7" +
                          "\001\002\000\004\043\u01c8\001\002\000\004\016\u01b6\001" +
                          "\002\000\004\027\ufda4\001\002\000\004\035\u01cb\001\002" +
                          "\000\004\026\103\001\002\000\004\036\u01cd\001\002\000" +
                          "\004\043\u01ce\001\002\000\010\004\u01cf\014\u01d0\016\u01d1" +
                          "\001\002\000\004\042\u01dd\001\002\000\004\042\u01d7\001" +
                          "\002\000\004\042\u01d3\001\002\000\004\027\ufe55\001\002" +
                          "\000\004\044\u014b\001\002\000\004\043\u01d5\001\002\000" +
                          "\006\004\u0174\014\u0175\001\002\000\004\027\ufdc3\001\002" +
                          "\000\004\035\u01d8\001\002\000\006\033\067\044\071\001" +
                          "\002\000\004\036\u01da\001\002\000\004\043\u01db\001\002" +
                          "\000\006\004\u01ab\016\u01ac\001\002\000\004\027\ufdc4\001" +
                          "\002\000\004\037\112\001\002\000\004\043\u01df\001\002" +
                          "\000\006\014\u01e0\016\u01e1\001\002\000\004\042\u01e7\001" +
                          "\002\000\004\042\u01e3\001\002\000\004\027\ufdc5\001\002" +
                          "\000\004\044\u014b\001\002\000\004\043\u01e5\001\002\000" +
                          "\004\014\u0181\001\002\000\004\027\ufd9c\001\002\000\004" +
                          "\035\u01e8\001\002\000\006\033\067\044\071\001\002\000" +
                          "\004\036\u01ea\001\002\000\004\043\u01eb\001\002\000\004" +
                          "\016\u01b6\001\002\000\004\027\ufd9d\001\002\000\004\037" +
                          "\112\001\002\000\004\043\u01ef\001\002\000\010\014\u01f1" +
                          "\015\u01f0\016\u01f3\001\002\000\004\042\u01fe\001\002\000" +
                          "\004\042\u01f8\001\002\000\004\027\ufe58\001\002\000\004" +
                          "\042\u01f4\001\002\000\004\044\u014b\001\002\000\004\043" +
                          "\u01f6\001\002\000\006\014\u018b\015\u018a\001\002\000\004" +
                          "\027\ufe09\001\002\000\004\035\u01f9\001\002\000\006\033" +
                          "\067\044\071\001\002\000\004\036\u01fb\001\002\000\004" +
                          "\043\u01fc\001\002\000\006\015\u01be\016\u01bf\001\002\000" +
                          "\004\027\ufe0a\001\002\000\004\035\u01ff\001\002\000\004" +
                          "\026\103\001\002\000\004\036\u0201\001\002\000\004\043" +
                          "\u0202\001\002\000\006\014\u01e0\016\u01e1\001\002\000\004" +
                          "\027\ufe08\001\002\000\004\044\u014b\001\002\000\004\043" +
                          "\u0206\001\002\000\012\004\u0207\013\u020a\014\u0209\015\u0208" +
                          "\001\002\000\004\042\u0272\001\002\000\004\042\u024b\001" +
                          "\002\000\004\042\u0212\001\002\000\004\042\u020c\001\002" +
                          "\000\004\027\ufed5\001\002\000\004\035\u020d\001\002\000" +
                          "\004\037\054\001\002\000\004\036\u020f\001\002\000\004" +
                          "\043\u0210\001\002\000\010\004\u014f\014\u0151\015\u0150\001" +
                          "\002\000\004\027\ufe43\001\002\000\004\035\u0213\001\002" +
                          "\000\006\033\067\044\071\001\002\000\004\036\u0215\001" +
                          "\002\000\004\043\u0216\001\002\000\010\004\u0217\013\u021a" +
                          "\015\u0218\001\002\000\004\042\u0239\001\002\000\004\042" +
                          "\u0221\001\002\000\004\027\ufe42\001\002\000\004\042\u021b" +
                          "\001\002\000\004\035\u021c\001\002\000\004\037\054\001" +
                          "\002\000\004\036\u021e\001\002\000\004\043\u021f\001\002" +
                          "\000\006\004\u0158\015\u0159\001\002\000\004\027\ufdc1\001" +
                          "\002\000\004\035\u0222\001\002\000\004\026\103\001\002" +
                          "\000\004\036\u0224\001\002\000\004\043\u0225\001\002\000" +
                          "\006\004\u0226\013\u0228\001\002\000\004\042\u022f\001\002" +
                          "\000\004\027\ufdc0\001\002\000\004\042\u0229\001\002\000" +
                          "\004\035\u022a\001\002\000\004\037\054\001\002\000\004" +
                          "\036\u022c\001\002\000\004\043\u022d\001\002\000\004\004" +
                          "\u0160\001\002\000\004\027\ufd80\001\002\000\004\037\112" +
                          "\001\002\000\004\043\u0231\001\002\000\004\013\u0232\001" +
                          "\002\000\004\042\u0234\001\002\000\004\027\ufd81\001\002" +
                          "\000\004\035\u0235\001\002\000\004\037\054\001\002\000" +
                          "\004\036\u0237\001\002\000\004\043\u0238\001\002\000\004" +
                          "\027\ufd77\001\002\000\004\037\112\001\002\000\004\043" +
                          "\u023b\001\002\000\006\013\u023d\015\u023c\001\002\000\004" +
                          "\042\u0245\001\002\000\004\042\u023f\001\002\000\004\027" +
                          "\ufdc2\001\002\000\004\035\u0240\001\002\000\004\037\054" +
                          "\001\002\000\004\036\u0242\001\002\000\004\043\u0243\001" +
                          "\002\000\004\015\u0169\001\002\000\004\027\ufd9b\001\002" +
                          "\000\004\035\u0246\001\002\000\004\026\103\001\002\000" +
                          "\004\036\u0248\001\002\000\004\043\u0249\001\002\000\004" +
                          "\013\u0232\001\002\000\004\027\ufd9a\001\002\000\004\035" +
                          "\u024c\001\002\000\004\026\103\001\002\000\004\036\u024e" +
                          "\001\002\000\004\043\u024f\001\002\000\010\004\u0250\013" +
                          "\u0252\014\u0251\001\002\000\004\042\u0260\001\002\000\004" +
                          "\042\u025a\001\002\000\004\042\u0254\001\002\000\004\027" +
                          "\ufe41\001\002\000\004\035\u0255\001\002\000\004\037\054" +
                          "\001\002\000\004\036\u0257\001\002\000\004\043\u0258\001" +
                          "\002\000\006\004\u0174\014\u0175\001\002\000\004\027\ufdb8" +
                          "\001\002\000\004\035\u025b\001\002\000\006\033\067\044" +
                          "\071\001\002\000\004\036\u025d\001\002\000\004\043\u025e" +
                          "\001\002\000\006\004\u0226\013\u0228\001\002\000\004\027" +
                          "\ufdb7\001\002\000\004\037\112\001\002\000\004\043\u0262" +
                          "\001\002\000\006\013\u0265\014\u0264\001\002\000\004\027" +
                          "\ufdb9\001\002\000\004\042\u026c\001\002\000\004\042\u0266" +
                          "\001\002\000\004\035\u0267\001\002\000\004\037\054\001" +
                          "\002\000\004\036\u0269\001\002\000\004\043\u026a\001\002" +
                          "\000\004\014\u0181\001\002\000\004\027\ufd95\001\002\000" +
                          "\004\035\u026d\001\002\000\006\033\067\044\071\001\002" +
                          "\000\004\036\u026f\001\002\000\004\043\u0270\001\002\000" +
                          "\004\013\u0232\001\002\000\004\027\ufd94\001\002\000\004" +
                          "\037\112\001\002\000\004\043\u0274\001\002\000\010\013" +
                          "\u0278\014\u0277\015\u0275\001\002\000\004\042\u0285\001\002" +
                          "\000\004\027\ufe44\001\002\000\004\042\u027f\001\002\000" +
                          "\004\042\u0279\001\002\000\004\035\u027a\001\002\000\004" +
                          "\037\054\001\002\000\004\036\u027c\001\002\000\004\043" +
                          "\u027d\001\002\000\006\014\u018b\015\u018a\001\002\000\004" +
                          "\027\ufdfb\001\002\000\004\035\u0280\001\002\000\006\033" +
                          "\067\044\071\001\002\000\004\036\u0282\001\002\000\004" +
                          "\043\u0283\001\002\000\006\013\u023d\015\u023c\001\002\000" +
                          "\004\027\ufdfa\001\002\000\004\035\u0286\001\002\000\004" +
                          "\026\103\001\002\000\004\036\u0288\001\002\000\004\043" +
                          "\u0289\001\002\000\006\013\u0265\014\u0264\001\002\000\004" +
                          "\027\ufdf9\001\002\000\004\035\u028c\001\002\000\006\033" +
                          "\067\044\071\001\002\000\004\036\u028e\001\002\000\004" +
                          "\043\u028f\001\002\000\012\004\u0290\013\u0292\015\u0291\016" +
                          "\u0293\001\002\000\004\042\u02c2\001\002\000\004\042\u029f" +
                          "\001\002\000\004\042\u0299\001\002\000\004\042\u0295\001" +
                          "\002\000\004\027\ufed6\001\002\000\004\044\u014b\001\002" +
                          "\000\004\043\u0297\001\002\000\010\004\u0217\013\u021a\015" +
                          "\u0218\001\002\000\004\027\ufe4a\001\002\000\004\035\u029a" +
                          "\001\002\000\004\037\054\001\002\000\004\036\u029c\001" +
                          "\002\000\004\043\u029d\001\002\000\010\004\u019e\015\u019f" +
                          "\016\u01a0\001\002\000\004\027\ufe4b\001\002\000\004\035" +
                          "\u02a0\001\002\000\004\026\103\001\002\000\004\036\u02a2" +
                          "\001\002\000\004\043\u02a3\001\002\000\010\004\u02a4\013" +
                          "\u02a7\016\u02a6\001\002\000\004\042\u02b2\001\002\000\004" +
                          "\027\ufe49\001\002\000\004\042\u02ae\001\002\000\004\042" +
                          "\u02a8\001\002\000\004\035\u02a9\001\002\000\004\037\054" +
                          "\001\002\000\004\036\u02ab\001\002\000\004\043\u02ac\001" +
                          "\002\000\006\004\u01ab\016\u01ac\001\002\000\004\027\ufdbb" +
                          "\001\002\000\004\044\u014b\001\002\000\004\043\u02b0\001" +
                          "\002\000\006\004\u0226\013\u0228\001\002\000\004\027\ufdba" +
                          "\001\002\000\004\037\112\001\002\000\004\043\u02b4\001" +
                          "\002\000\006\013\u02b6\016\u02b5\001\002\000\004\042\u02be" +
                          "\001\002\000\004\042\u02b8\001\002\000\004\027\ufdbc\001" +
                          "\002\000\004\035\u02b9\001\002\000\004\037\054\001\002" +
                          "\000\004\036\u02bb\001\002\000\004\043\u02bc\001\002\000" +
                          "\004\016\u01b6\001\002\000\004\027\ufd97\001\002\000\004" +
                          "\044\u014b\001\002\000\004\043\u02c0\001\002\000\004\013" +
                          "\u0232\001\002\000\004\027\ufd96\001\002\000\004\037\112" +
                          "\001\002\000\004\043\u02c4\001\002\000\010\013\u02c7\015" +
                          "\u02c6\016\u02c8\001\002\000\004\027\ufe4c\001\002\000\004" +
                          "\042\u02d3\001\002\000\004\042\u02cd\001\002\000\004\042" +
                          "\u02c9\001\002\000\004\044\u014b\001\002\000\004\043\u02cb" +
                          "\001\002\000\006\013\u023d\015\u023c\001\002\000\004\027" +
                          "\ufe00\001\002\000\004\035\u02ce\001\002\000\004\037\054" +
                          "\001\002\000\004\036\u02d0\001\002\000\004\043\u02d1\001" +
                          "\002\000\006\015\u01be\016\u01bf\001\002\000\004\027\ufe01" +
                          "\001\002\000\004\035\u02d4\001\002\000\004\026\103\001" +
                          "\002\000\004\036\u02d6\001\002\000\004\043\u02d7\001\002" +
                          "\000\006\013\u02b6\016\u02b5\001\002\000\004\027\ufdff\001" +
                          "\002\000\004\035\u02da\001\002\000\004\026\103\001\002" +
                          "\000\004\036\u02dc\001\002\000\004\043\u02dd\001\002\000" +
                          "\012\004\u02de\013\u02e1\014\u02df\016\u02e2\001\002\000\004" +
                          "\042\u02f2\001\002\000\004\042\u02ed\001\002\000\004\027" +
                          "\ufed4\001\002\000\004\042\u02e7\001\002\000\004\042\u02e3" +
                          "\001\002\000\004\044\u014b\001\002\000\004\043\u02e5\001" +
                          "\002\000\010\004\u0250\013\u0252\014\u0251\001\002\000\004" +
                          "\027\ufe39\001\002\000\004\035\u02e8\001\002\000\004\037" +
                          "\054\001\002\000\004\036\u02ea\001\002\000\004\043\u02eb" +
                          "\001\002\000\010\004\u01cf\014\u01d0\016\u01d1\001\002\000" +
                          "\004\027\ufe3b\001\002\000\004\035\u02ee\001\002\000\006" +
                          "\033\067\044\071\001\002\000\004\036\u02f0\001\002\000" +
                          "\010\004\u02a4\013\u02a7\016\u02a6\001\002\000\004\027\ufe3a" +
                          "\001\002\000\004\037\112\001\002\000\004\043\u02f4\001" +
                          "\002\000\010\013\u02f8\014\u02f5\016\u02f7\001\002\000\004" +
                          "\042\u0303\001\002\000\004\027\ufe3c\001\002\000\004\042" +
                          "\u02ff\001\002\000\004\042\u02f9\001\002\000\004\035\u02fa" +
                          "\001\002\000\004\037\054\001\002\000\004\036\u02fc\001" +
                          "\002\000\004\043\u02fd\001\002\000\006\014\u01e0\016\u01e1" +
                          "\001\002\000\004\027\ufdf5\001\002\000\004\044\u014b\001" +
                          "\002\000\004\043\u0301\001\002\000\006\013\u0265\014\u0264" +
                          "\001\002\000\004\027\ufdf3\001\002\000\004\035\u0304\001" +
                          "\002\000\006\033\067\044\071\001\002\000\004\036\u0306" +
                          "\001\002\000\004\043\u0307\001\002\000\006\013\u02b6\016" +
                          "\u02b5\001\002\000\004\027\ufdf4\001\002\000\004\037\112" +
                          "\001\002\000\004\043\u030b\001\002\000\012\013\u030e\014" +
                          "\u030d\015\u030c\016\u030f\001\002\000\004\042\u0321\001\002" +
                          "\000\004\042\u031b\001\002\000\004\042\u0315\001\002\000" +
                          "\004\042\u0311\001\002\000\004\027\ufed8\001\002\000\004" +
                          "\044\u014b\001\002\000\004\043\u0313\001\002\000\010\013" +
                          "\u0278\014\u0277\015\u0275\001\002\000\004\027\ufe8e\001\002" +
                          "\000\004\035\u0316\001\002\000\004\037\054\001\002\000" +
                          "\004\036\u0318\001\002\000\004\043\u0319\001\002\000\010" +
                          "\014\u01f1\015\u01f0\016\u01f3\001\002\000\004\027\ufe90\001" +
                          "\002\000\004\035\u031c\001\002\000\006\033\067\044\071" +
                          "\001\002\000\004\036\u031e\001\002\000\004\043\u031f\001" +
                          "\002\000\010\013\u02c7\015\u02c6\016\u02c8\001\002\000\004" +
                          "\027\ufe8f\001\002\000\004\035\u0322\001\002\000\004\026" +
                          "\103\001\002\000\004\036\u0324\001\002\000\004\043\u0325" +
                          "\001\002\000\010\013\u02f8\014\u02f5\016\u02f7\001\002\000" +
                          "\004\027\ufe8d\001\002\000\004\044\u014b\001\002\000\004" +
                          "\043\u0329\001\002\000\014\004\u032a\013\u032e\014\u032c\015" +
                          "\u032b\021\u032f\001\002\000\004\042\u042c\001\002\000\004" +
                          "\042\u03fb\001\002\000\004\042\u03ad\001\002\000\004\027" +
                          "\uff0d\001\002\000\004\042\u0334\001\002\000\004\042\u0330" +
                          "\001\002\000\004\022\u0331\001\002\000\004\043\u0332\001" +
                          "\002\000\012\004\u0207\013\u020a\014\u0209\015\u0208\001\002" +
                          "\000\004\027\ufeaa\001\002\000\004\035\u0335\001\002\000" +
                          "\004\037\054\001\002\000\004\036\u0337\001\002\000\004" +
                          "\043\u0338\001\002\000\012\004\u0339\014\u033b\015\u033a\021" +
                          "\u033d\001\002\000\004\042\u0396\001\002\000\004\042\u0373" +
                          "\001\002\000\004\042\u0342\001\002\000\004\027\ufea9\001" +
                          "\002\000\004\042\u033e\001\002\000\004\022\u033f\001\002" +
                          "\000\004\043\u0340\001\002\000\010\004\u014f\014\u0151\015" +
                          "\u0150\001\002\000\004\027\ufe2b\001\002\000\004\035\u0343" +
                          "\001\002\000\006\033\067\044\071\001\002\000\004\036" +
                          "\u0345\001\002\000\004\043\u0346\001\002\000\010\004\u0347" +
                          "\015\u0348\021\u0349\001\002\000\004\042\u0363\001\002\000" +
                          "\004\042\u034f\001\002\000\004\042\u034b\001\002\000\004" +
                          "\027\ufe2a\001\002\000\004\022\u034c\001\002\000\004\043" +
                          "\u034d\001\002\000\006\004\u0158\015\u0159\001\002\000\004" +
                          "\027\ufdb5\001\002\000\004\035\u0350\001\002\000\004\026" +
                          "\103\001\002\000\004\036\u0352\001\002\000\004\043\u0353" +
                          "\001\002\000\006\004\u0354\021\u0356\001\002\000\004\042" +
                          "\u035b\001\002\000\004\027\ufdb4\001\002\000\004\042\u0357" +
                          "\001\002\000\004\022\u0358\001\002\000\004\043\u0359\001" +
                          "\002\000\004\004\u0160\001\002\000\004\027\ufd7e\001\002" +
                          "\000\004\037\112\001\002\000\004\043\u035d\001\002\000" +
                          "\004\021\u035f\001\002\000\004\027\ufd7f\001\002\000\004" +
                          "\042\u0360\001\002\000\004\022\u0361\001\002\000\004\043" +
                          "\u0362\001\002\000\004\027\ufd7d\001\002\000\004\037\112" +
                          "\001\002\000\004\043\u0365\001\002\000\006\015\u0366\021" +
                          "\u0368\001\002\000\004\042\u036d\001\002\000\004\027\ufdb6" +
                          "\001\002\000\004\042\u0369\001\002\000\004\022\u036a\001" +
                          "\002\000\004\043\u036b\001\002\000\004\015\u0169\001\002" +
                          "\000\004\027\ufd93\001\002\000\004\035\u036e\001\002\000" +
                          "\004\026\103\001\002\000\004\036\u0370\001\002\000\004" +
                          "\043\u0371\001\002\000\004\021\u035f\001\002\000\004\027" +
                          "\ufd92\001\002\000\004\035\u0374\001\002\000\004\026\103" +
                          "\001\002\000\004\036\u0376\001\002\000\004\043\u0377\001" +
                          "\002\000\010\004\u0378\014\u0379\021\u037b\001\002\000\004" +
                          "\042\u0386\001\002\000\004\042\u0380\001\002\000\004\027" +
                          "\ufe29\001\002\000\004\042\u037c\001\002\000\004\022\u037d" +
                          "\001\002\000\004\043\u037e\001\002\000\006\004\u0174\014" +
                          "\u0175\001\002\000\004\027\ufdac\001\002\000\004\035\u0381" +
                          "\001\002\000\006\033\067\044\071\001\002\000\004\036" +
                          "\u0383\001\002\000\004\043\u0384\001\002\000\006\004\u0354" +
                          "\021\u0356\001\002\000\004\027\ufdab\001\002\000\004\037" +
                          "\112\001\002\000\004\043\u0388\001\002\000\006\014\u0389" +
                          "\021\u038b\001\002\000\004\042\u0390\001\002\000\004\027" +
                          "\ufdad\001\002\000\004\042\u038c\001\002\000\004\022\u038d" +
                          "\001\002\000\004\043\u038e\001\002\000\004\014\u0181\001" +
                          "\002\000\004\027\ufd8d\001\002\000\004\035\u0391\001\002" +
                          "\000\006\033\067\044\071\001\002\000\004\036\u0393\001" +
                          "\002\000\004\043\u0394\001\002\000\004\021\u035f\001\002" +
                          "\000\004\027\ufd8c\001\002\000\004\037\112\001\002\000" +
                          "\004\043\u0398\001\002\000\010\014\u039a\015\u0399\021\u039c" +
                          "\001\002\000\004\042\u03a7\001\002\000\004\042\u03a1\001" +
                          "\002\000\004\027\ufe2c\001\002\000\004\042\u039d\001\002" +
                          "\000\004\022\u039e\001\002\000\004\043\u039f\001\002\000" +
                          "\006\014\u018b\015\u018a\001\002\000\004\027\ufde9\001\002" +
                          "\000\004\035\u03a2\001\002\000\006\033\067\044\071\001" +
                          "\002\000\004\036\u03a4\001\002\000\004\043\u03a5\001\002" +
                          "\000\006\015\u0366\021\u0368\001\002\000\004\027\ufde8\001" +
                          "\002\000\004\035\u03a8\001\002\000\004\026\103\001\002" +
                          "\000\004\036\u03aa\001\002\000\004\043\u03ab\001\002\000" +
                          "\006\014\u0389\021\u038b\001\002\000\004\027\ufde7\001\002" +
                          "\000\004\035\u03ae\001\002\000\006\033\067\044\071\001" +
                          "\002\000\004\036\u03b0\001\002\000\004\043\u03b1\001\002" +
                          "\000\012\004\u03b2\013\u03b5\015\u03b4\021\u03b6\001\002\000" +
                          "\004\042\u03e4\001\002\000\004\027\ufea8\001\002\000\004" +
                          "\042\u03c1\001\002\000\004\042\u03bb\001\002\000\004\042" +
                          "\u03b7\001\002\000\004\022\u03b8\001\002\000\004\043\u03b9" +
                          "\001\002\000\010\004\u0217\013\u021a\015\u0218\001\002\000" +
                          "\004\027\ufe1f\001\002\000\004\035\u03bc\001\002\000\004" +
                          "\037\054\001\002\000\004\036\u03be\001\002\000\004\043" +
                          "\u03bf\001\002\000\010\004\u0347\015\u0348\021\u0349\001\002" +
                          "\000\004\027\ufe1e\001\002\000\004\035\u03c2\001\002\000" +
                          "\004\026\103\001\002\000\004\036\u03c4\001\002\000\004" +
                          "\043\u03c5\001\002\000\010\004\u03c6\013\u03c8\021\u03c9\001" +
                          "\002\000\004\042\u03d4\001\002\000\004\027\ufe1d\001\002" +
                          "\000\004\042\u03ce\001\002\000\004\042\u03ca\001\002\000" +
                          "\004\022\u03cb\001\002\000\004\043\u03cc\001\002\000\006" +
                          "\004\u0226\013\u0228\001\002\000\004\027\ufda9\001\002\000" +
                          "\004\035\u03cf\001\002\000\004\037\054\001\002\000\004" +
                          "\036\u03d1\001\002\000\004\043\u03d2\001\002\000\006\004" +
                          "\u0354\021\u0356\001\002\000\004\027\ufda8\001\002\000\004" +
                          "\037\112\001\002\000\004\043\u03d6\001\002\000\006\013" +
                          "\u03d7\021\u03d8\001\002\000\004\042\u03de\001\002\000\004" +
                          "\042\u03da\001\002\000\004\027\ufdaa\001\002\000\004\022" +
                          "\u03db\001\002\000\004\043\u03dc\001\002\000\004\013\u0232" +
                          "\001\002\000\004\027\ufd8b\001\002\000\004\035\u03df\001" +
                          "\002\000\004\037\054\001\002\000\004\036\u03e1\001\002" +
                          "\000\004\043\u03e2\001\002\000\004\021\u035f\001\002\000" +
                          "\004\027\ufd8a\001\002\000\004\037\112\001\002\000\004" +
                          "\043\u03e6\001\002\000\010\013\u03e9\015\u03e7\021\u03ea\001" +
                          "\002\000\004\042\u03f5\001\002\000\004\027\ufe20\001\002" +
                          "\000\004\042\u03ef\001\002\000\004\042\u03eb\001\002\000" +
                          "\004\022\u03ec\001\002\000\004\043\u03ed\001\002\000\006" +
                          "\013\u023d\015\u023c\001\002\000\004\027\ufde0\001\002\000" +
                          "\004\035\u03f0\001\002\000\004\037\054\001\002\000\004" +
                          "\036\u03f2\001\002\000\004\043\u03f3\001\002\000\006\015" +
                          "\u0366\021\u0368\001\002\000\004\027\ufddf\001\002\000\004" +
                          "\035\u03f6\001\002\000\004\026\103\001\002\000\004\036" +
                          "\u03f8\001\002\000\004\043\u03f9\001\002\000\006\013\u03d7" +
                          "\021\u03d8\001\002\000\004\027\ufdde\001\002\000\004\035" +
                          "\u03fc\001\002\000\004\026\103\001\002\000\004\036\u03fe" +
                          "\001\002\000\004\043\u03ff\001\002\000\012\004\u0400\013" +
                          "\u0403\014\u0402\021\u0404\001\002\000\004\042\u0415\001\002" +
                          "\000\004\027\ufea7\001\002\000\004\042\u040f\001\002\000" +
                          "\004\042\u0409\001\002\000\004\042\u0405\001\002\000\004" +
                          "\022\u0406\001\002\000\004\043\u0407\001\002\000\010\004" +
                          "\u0250\013\u0252\014\u0251\001\002\000\004\027\ufe13\001\002" +
                          "\000\004\035\u040a\001\002\000\004\037\054\001\002\000" +
                          "\004\036\u040c\001\002\000\004\043\u040d\001\002\000\010" +
                          "\004\u0378\014\u0379\021\u037b\001\002\000\004\027\ufe12\001" +
                          "\002\000\004\035\u0410\001\002\000\006\033\067\044\071" +
                          "\001\002\000\004\036\u0412\001\002\000\004\043\u0413\001" +
                          "\002\000\010\004\u03c6\013\u03c8\021\u03c9\001\002\000\004" +
                          "\027\ufe11\001\002\000\004\037\112\001\002\000\004\043" +
                          "\u0417\001\002\000\010\013\u041a\014\u0418\021\u041b\001\002" +
                          "\000\004\042\u0426\001\002\000\004\027\ufe14\001\002\000" +
                          "\004\042\u0420\001\002\000\004\042\u041c\001\002\000\004" +
                          "\022\u041d\001\002\000\004\043\u041e\001\002\000\006\013" +
                          "\u0265\014\u0264\001\002\000\004\027\ufdd7\001\002\000\004" +
                          "\035\u0421\001\002\000\004\037\054\001\002\000\004\036" +
                          "\u0423\001\002\000\004\043\u0424\001\002\000\006\014\u0389" +
                          "\021\u038b\001\002\000\004\027\ufdd6\001\002\000\004\035" +
                          "\u0427\001\002\000\006\033\067\044\071\001\002\000\004" +
                          "\036\u0429\001\002\000\004\043\u042a\001\002\000\006\013" +
                          "\u03d7\021\u03d8\001\002\000\004\027\ufdd5\001\002\000\004" +
                          "\037\112\001\002\000\004\043\u042e\001\002\000\012\013" +
                          "\u0432\014\u0430\015\u042f\021\u0433\001\002\000\004\042\u0444" +
                          "\001\002\000\004\042\u043e\001\002\000\004\027\ufeab\001" +
                          "\002\000\004\042\u0438\001\002\000\004\042\u0434\001\002" +
                          "\000\004\022\u0435\001\002\000\004\043\u0436\001\002\000" +
                          "\010\013\u0278\014\u0277\015\u0275\001\002\000\004\027\ufe6c" +
                          "\001\002\000\004\035\u0439\001\002\000\004\037\054\001" +
                          "\002\000\004\036\u043b\001\002\000\004\043\u043c\001\002" +
                          "\000\010\014\u039a\015\u0399\021\u039c\001\002\000\004\027" +
                          "\ufe6b\001\002\000\004\035\u043f\001\002\000\006\033\067" +
                          "\044\071\001\002\000\004\036\u0441\001\002\000\004\043" +
                          "\u0442\001\002\000\010\013\u03e9\015\u03e7\021\u03ea\001\002" +
                          "\000\004\027\ufe6a\001\002\000\004\035\u0445\001\002\000" +
                          "\004\026\103\001\002\000\004\036\u0447\001\002\000\004" +
                          "\043\u0448\001\002\000\010\013\u041a\014\u0418\021\u041b\001" +
                          "\002\000\004\027\ufe69\001\002\000\004\035\u044b\001\002" +
                          "\000\004\037\054\001\002\000\004\036\u044d\001\002\000" +
                          "\004\043\u044e\001\002\000\014\004\u044f\014\u0452\015\u0451" +
                          "\016\u0453\021\u0455\001\002\000\004\042\u04ee\001\002\000" +
                          "\004\027\uffda\001\002\000\004\042\u04b7\001\002\000\004" +
                          "\042\u0461\001\002\000\004\042\u045d\001\002\000\004\027" +
                          "\uff0f\001\002\000\004\042\u0456\001\002\000\006\022\u0457" +
                          "\023\u0458\001\002\000\004\043\u045b\001\002\000\004\043" +
                          "\u0459\001\002\000\010\004\060\014\062\015\061\001\002" +
                          "\000\004\027\uffa9\001\002\000\012\004\u0145\014\u0147\015" +
                          "\u0146\016\u0148\001\002\000\004\027\ufec3\001\002\000\004" +
                          "\044\u014b\001\002\000\004\043\u045f\001\002\000\012\004" +
                          "\u0339\014\u033b\015\u033a\021\u033d\001\002\000\004\027\ufec1" +
                          "\001\002\000\004\035\u0462\001\002\000\006\033\067\044" +
                          "\071\001\002\000\004\036\u0464\001\002\000\004\043\u0465" +
                          "\001\002\000\012\004\u0466\015\u0468\016\u0469\021\u046b\001" +
                          "\002\000\004\042\u049d\001\002\000\004\027\uffa8\001\002" +
                          "\000\004\042\u0477\001\002\000\004\042\u0473\001\002\000" +
                          "\004\027\ufec2\001\002\000\004\042\u046c\001\002\000\006" +
                          "\022\u046d\023\u046e\001\002\000\004\043\u0471\001\002\000" +
                          "\004\043\u046f\001\002\000\006\004\076\015\077\001\002" +
                          "\000\004\027\uff65\001\002\000\010\004\u019e\015\u019f\016" +
                          "\u01a0\001\002\000\004\027\ufe33\001\002\000\004\044\u014b" +
                          "\001\002\000\004\043\u0475\001\002\000\010\004\u0347\015" +
                          "\u0348\021\u0349\001\002\000\004\027\ufe32\001\002\000\004" +
                          "\035\u0478\001\002\000\004\026\103\001\002\000\004\036" +
                          "\u047a\001\002\000\004\043\u047b\001\002\000\010\004\u047d" +
                          "\016\u047e\021\u047f\001\002\000\004\027\uff64\001\002\000" +
                          "\004\042\u048c\001\002\000\004\042\u0488\001\002\000\004" +
                          "\042\u0481\001\002\000\004\027\ufe31\001\002\000\006\022" +
                          "\u0482\023\u0483\001\002\000\004\043\u0486\001\002\000\004" +
                          "\043\u0484\001\002\000\004\004\110\001\002\000\004\027" +
                          "\uff3d\001\002\000\006\004\u01ab\016\u01ac\001\002\000\004" +
                          "\027\ufdaf\001\002\000\004\044\u014b\001\002\000\004\043" +
                          "\u048a\001\002\000\006\004\u0354\021\u0356\001\002\000\004" +
                          "\027\ufdae\001\002\000\004\037\112\001\002\000\004\043" +
                          "\u048e\001\002\000\006\016\u0491\021\u0492\001\002\000\004" +
                          "\027\uff3e\001\002\000\004\027\ufdb0\001\002\000\004\042" +
                          "\u0499\001\002\000\004\042\u0493\001\002\000\006\022\u0494" +
                          "\023\u0495\001\002\000\004\043\u0497\001\002\000\004\043" +
                          "\u0496\001\002\000\004\027\uff3c\001\002\000\004\016\u01b6" +
                          "\001\002\000\004\027\ufd8f\001\002\000\004\044\u014b\001" +
                          "\002\000\004\043\u049b\001\002\000\004\021\u035f\001\002" +
                          "\000\004\027\ufd8e\001\002\000\004\037\112\001\002\000" +
                          "\004\043\u049f\001\002\000\010\015\u04a1\016\u04a3\021\u04a4" +
                          "\001\002\000\004\027\ufe34\001\002\000\004\042\u04b0\001" +
                          "\002\000\004\027\uff66\001\002\000\004\042\u04ac\001\002" +
                          "\000\004\042\u04a5\001\002\000\006\022\u04a6\023\u04a7\001" +
                          "\002\000\004\043\u04aa\001\002\000\004\043\u04a8\001\002" +
                          "\000\004\015\135\001\002\000\004\027\uff4e\001\002\000" +
                          "\006\015\u01be\016\u01bf\001\002\000\004\027\ufdef\001\002" +
                          "\000\004\044\u014b\001\002\000\004\043\u04ae\001\002\000" +
                          "\006\015\u0366\021\u0368\001\002\000\004\027\ufdee\001\002" +
                          "\000\004\035\u04b1\001\002\000\004\026\103\001\002\000" +
                          "\004\036\u04b3\001\002\000\004\043\u04b4\001\002\000\006" +
                          "\016\u0491\021\u0492\001\002\000\004\027\uff4d\001\002\000" +
                          "\004\027\ufded\001\002\000\004\035\u04b8\001\002\000\004" +
                          "\026\103\001\002\000\004\036\u04ba\001\002\000\004\043" +
                          "\u04bb\001\002\000\012\004\u04bc\014\u04be\016\u04bf\021\u04c0" +
                          "\001\002\000\004\042\u04d4\001\002\000\004\027\ufec0\001" +
                          "\002\000\004\042\u04cd\001\002\000\004\042\u04c9\001\002" +
                          "\000\004\042\u04c2\001\002\000\004\027\uffa7\001\002\000" +
                          "\006\022\u04c3\023\u04c4\001\002\000\004\043\u04c7\001\002" +
                          "\000\004\043\u04c5\001\002\000\006\004\230\014\231\001" +
                          "\002\000\004\027\uff5f\001\002\000\010\004\u01cf\014\u01d0" +
                          "\016\u01d1\001\002\000\004\027\ufe23\001\002\000\004\044" +
                          "\u014b\001\002\000\004\043\u04cb\001\002\000\010\004\u0378" +
                          "\014\u0379\021\u037b\001\002\000\004\027\ufe21\001\002\000" +
                          "\004\035\u04ce\001\002\000\006\033\067\044\071\001\002" +
                          "\000\004\036\u04d0\001\002\000\004\043\u04d1\001\002\000" +
                          "\010\004\u047d\016\u047e\021\u047f\001\002\000\004\027\uff5e" +
                          "\001\002\000\004\027\ufe22\001\002\000\004\037\112\001" +
                          "\002\000\004\043\u04d6\001\002\000\010\014\u04d8\016\u04da" +
                          "\021\u04db\001\002\000\004\027\uff60\001\002\000\004\042" +
                          "\u04e7\001\002\000\004\027\ufe24\001\002\000\004\042\u04e3" +
                          "\001\002\000\004\042\u04dc\001\002\000\006\022\u04dd\023" +
                          "\u04de\001\002\000\004\043\u04e1\001\002\000\004\043\u04df" +
                          "\001\002\000\004\014\244\001\002\000\004\027\uff4a\001" +
                          "\002\000\006\014\u01e0\016\u01e1\001\002\000\004\027\ufde3" +
                          "\001\002\000\004\044\u014b\001\002\000\004\043\u04e5\001" +
                          "\002\000\006\014\u0389\021\u038b\001\002\000\004\027\ufde1" +
                          "\001\002\000\004\035\u04e8\001\002\000\006\033\067\044" +
                          "\071\001\002\000\004\036\u04ea\001\002\000\004\043\u04eb" +
                          "\001\002\000\006\016\u0491\021\u0492\001\002\000\004\027" +
                          "\uff49\001\002\000\004\027\ufde2\001\002\000\004\037\112" +
                          "\001\002\000\004\043\u04f0\001\002\000\012\014\u04f2\015" +
                          "\u04f1\016\u04f4\021\u04f6\001\002\000\004\042\u0509\001\002" +
                          "\000\004\042\u0502\001\002\000\004\027\uffaa\001\002\000" +
                          "\004\042\u04fe\001\002\000\004\027\ufec4\001\002\000\004" +
                          "\042\u04f7\001\002\000\006\022\u04f8\023\u04f9\001\002\000" +
                          "\004\043\u04fc\001\002\000\004\043\u04fa\001\002\000\006" +
                          "\014\260\015\257\001\002\000\004\027\uff87\001\002\000" +
                          "\010\014\u01f1\015\u01f0\016\u01f3\001\002\000\004\027\ufe80" +
                          "\001\002\000\004\044\u014b\001\002\000\004\043\u0500\001" +
                          "\002\000\010\014\u039a\015\u0399\021\u039c\001\002\000\004" +
                          "\027\ufe7e\001\002\000\004\035\u0503\001\002\000\006\033" +
                          "\067\044\071\001\002\000\004\036\u0505\001\002\000\004" +
                          "\043\u0506\001\002\000\010\015\u04a1\016\u04a3\021\u04a4\001" +
                          "\002\000\004\027\ufe7f\001\002\000\004\027\uff86\001\002" +
                          "\000\004\035\u050a\001\002\000\004\026\103\001\002\000" +
                          "\004\036\u050c\001\002\000\004\043\u050d\001\002\000\010" +
                          "\014\u04d8\016\u04da\021\u04db\001\002\000\004\027\uff85\001" +
                          "\002\000\004\027\ufe7d\001\002\000\004\035\u0511\001\002" +
                          "\000\006\033\067\044\071\001\002\000\004\036\u0513\001" +
                          "\002\000\004\043\u0514\001\002\000\014\004\u0515\013\u0519" +
                          "\015\u0516\016\u0518\021\u051a\001\002\000\004\042\u0565\001" +
                          "\002\000\004\042\u052e\001\002\000\004\027\uffd9\001\002" +
                          "\000\004\042\u052a\001\002\000\004\042\u0523\001\002\000" +
                          "\004\042\u051c\001\002\000\004\027\uff0e\001\002\000\006" +
                          "\022\u051d\023\u051e\001\002\000\004\043\u0521\001\002\000" +
                          "\004\043\u051f\001\002\000\010\004\304\013\307\015\306" +
                          "\001\002\000\004\027\uffa1\001\002\000\012\004\u0290\013" +
                          "\u0292\015\u0291\016\u0293\001\002\000\004\027\ufeb4\001\002" +
                          "\000\004\035\u0524\001\002\000\004\037\054\001\002\000" +
                          "\004\036\u0526\001\002\000\004\043\u0527\001\002\000\012" +
                          "\004\u0466\015\u0468\016\u0469\021\u046b\001\002\000\004\027" +
                          "\uffa0\001\002\000\004\027\ufeb3\001\002\000\004\044\u014b" +
                          "\001\002\000\004\043\u052c\001\002\000\012\004\u03b2\013" +
                          "\u03b5\015\u03b4\021\u03b6\001\002\000\004\027\ufeb2\001\002" +
                          "\000\004\035\u052f\001\002\000\004\026\103\001\002\000" +
                          "\004\036\u0531\001\002\000\004\043\u0532\001\002\000\012" +
                          "\004\u0534\013\u0537\016\u0535\021\u0538\001\002\000\004\027" +
                          "\uff9f\001\002\000\004\042\u054b\001\002\000\004\042\u0547" +
                          "\001\002\000\004\027\ufeb1\001\002\000\004\042\u0540\001" +
                          "\002\000\004\042\u0539\001\002\000\006\022\u053a\023\u053b" +
                          "\001\002\000\004\043\u053e\001\002\000\004\043\u053c\001" +
                          "\002\000\006\004\323\013\325\001\002\000\004\027\uff5c" +
                          "\001\002\000\010\004\u02a4\013\u02a7\016\u02a6\001\002\000" +
                          "\004\027\ufe17\001\002\000\004\035\u0541\001\002\000\004" +
                          "\037\054\001\002\000\004\036\u0543\001\002\000\004\043" +
                          "\u0544\001\002\000\010\004\u047d\016\u047e\021\u047f\001\002" +
                          "\000\004\027\uff5b\001\002\000\004\027\ufe16\001\002\000" +
                          "\004\044\u014b\001\002\000\004\043\u0549\001\002\000\010" +
                          "\004\u03c6\013\u03c8\021\u03c9\001\002\000\004\027\ufe15\001" +
                          "\002\000\004\037\112\001\002\000\004\043\u054d\001\002" +
                          "\000\010\013\u0550\016\u054f\021\u0552\001\002\000\004\027" +
                          "\uff5d\001\002\000\004\042\u0561\001\002\000\004\042\u055a" +
                          "\001\002\000\004\027\ufe18\001\002\000\004\042\u0553\001" +
                          "\002\000\006\022\u0554\023\u0555\001\002\000\004\043\u0558" +
                          "\001\002\000\004\043\u0556\001\002\000\004\013\337\001" +
                          "\002\000\004\027\uff48\001\002\000\006\013\u02b6\016\u02b5" +
                          "\001\002\000\004\027\ufdda\001\002\000\004\035\u055b\001" +
                          "\002\000\004\037\054\001\002\000\004\036\u055d\001\002" +
                          "\000\004\043\u055e\001\002\000\006\016\u0491\021\u0492\001" +
                          "\002\000\004\027\uff47\001\002\000\004\027\ufdd9\001\002" +
                          "\000\004\044\u014b\001\002\000\004\043\u0563\001\002\000" +
                          "\006\013\u03d7\021\u03d8\001\002\000\004\027\ufdd8\001\002" +
                          "\000\004\037\112\001\002\000\004\043\u0567\001\002\000" +
                          "\012\013\u056b\015\u0569\016\u056a\021\u056c\001\002\000\004" +
                          "\027\ufeb5\001\002\000\004\042\u0580\001\002\000\004\042" +
                          "\u057c\001\002\000\004\042\u0575\001\002\000\004\042\u056e" +
                          "\001\002\000\004\027\uffa2\001\002\000\006\022\u056f\023" +
                          "\u0570\001\002\000\004\043\u0573\001\002\000\004\043\u0571" +
                          "\001\002\000\006\013\353\015\352\001\002\000\004\027" +
                          "\uff81\001\002\000\010\013\u02c7\015\u02c6\016\u02c8\001\002" +
                          "\000\004\027\ufe74\001\002\000\004\035\u0576\001\002\000" +
                          "\004\037\054\001\002\000\004\036\u0578\001\002\000\004" +
                          "\043\u0579\001\002\000\010\015\u04a1\016\u04a3\021\u04a4\001" +
                          "\002\000\004\027\ufe73\001\002\000\004\027\uff80\001\002" +
                          "\000\004\044\u014b\001\002\000\004\043\u057e\001\002\000" +
                          "\010\013\u03e9\015\u03e7\021\u03ea\001\002\000\004\027\ufe72" +
                          "\001\002\000\004\035\u0581\001\002\000\004\026\103\001" +
                          "\002\000\004\036\u0583\001\002\000\004\043\u0584\001\002" +
                          "\000\010\013\u0550\016\u054f\021\u0552\001\002\000\004\027" +
                          "\uff7f\001\002\000\004\027\ufe71\001\002\000\004\035\u0588" +
                          "\001\002\000\004\026\103\001\002\000\004\036\u058a\001" +
                          "\002\000\004\043\u058b\001\002\000\014\004\u058c\013\u058f" +
                          "\014\u058d\016\u0590\021\u0592\001\002\000\004\042\u05ac\001" +
                          "\002\000\004\042\u05a5\001\002\000\004\027\uff0c\001\002" +
                          "\000\004\042\u059e\001\002\000\004\042\u059a\001\002\000" +
                          "\004\027\uffd8\001\002\000\004\042\u0593\001\002\000\006" +
                          "\022\u0594\023\u0595\001\002\000\004\043\u0598\001\002\000" +
                          "\004\043\u0596\001\002\000\010\004\375\013\377\014\376" +
                          "\001\002\000\004\027\uff99\001\002\000\012\004\u02de\013" +
                          "\u02e1\014\u02df\016\u02e2\001\002\000\004\027\ufea0\001\002" +
                          "\000\004\044\u014b\001\002\000\004\043\u059c\001\002\000" +
                          "\012\004\u0400\013\u0403\014\u0402\021\u0404\001\002\000\004" +
                          "\027\ufe9d\001\002\000\004\035\u059f\001\002\000\004\037" +
                          "\054\001\002\000\004\036\u05a1\001\002\000\004\043\u05a2" +
                          "\001\002\000\012\004\u04bc\014\u04be\016\u04bf\021\u04c0\001" +
                          "\002\000\004\027\ufe9f\001\002\000\004\027\uff98\001\002" +
                          "\000\004\035\u05a6\001\002\000\006\033\067\044\071\001" +
                          "\002\000\004\036\u05a8\001\002\000\004\043\u05a9\001\002" +
                          "\000\012\004\u0534\013\u0537\016\u0535\021\u0538\001\002\000" +
                          "\004\027\uff97\001\002\000\004\027\ufe9e\001\002\000\004" +
                          "\037\112\001\002\000\004\043\u05ae\001\002\000\012\013" +
                          "\u05b2\014\u05af\016\u05b1\021\u05b4\001\002\000\004\042\u05c7" +
                          "\001\002\000\004\027\uff9a\001\002\000\004\042\u05c3\001" +
                          "\002\000\004\042\u05bc\001\002\000\004\027\ufea1\001\002" +
                          "\000\004\042\u05b5\001\002\000\006\022\u05b6\023\u05b7\001" +
                          "\002\000\004\043\u05ba\001\002\000\004\043\u05b8\001\002" +
                          "\000\006\013\u0111\014\u0110\001\002\000\004\027\uff7b\001" +
                          "\002\000\010\013\u02f8\014\u02f5\016\u02f7\001\002\000\004" +
                          "\027\ufe64\001\002\000\004\035\u05bd\001\002\000\004\037" +
                          "\054\001\002\000\004\036\u05bf\001\002\000\004\043\u05c0" +
                          "\001\002\000\010\014\u04d8\016\u04da\021\u04db\001\002\000" +
                          "\004\027\uff7a\001\002\000\004\027\ufe63\001\002\000\004" +
                          "\044\u014b\001\002\000\004\043\u05c5\001\002\000\010\013" +
                          "\u041a\014\u0418\021\u041b\001\002\000\004\027\ufe61\001\002" +
                          "\000\004\035\u05c8\001\002\000\006\033\067\044\071\001" +
                          "\002\000\004\036\u05ca\001\002\000\004\043\u05cb\001\002" +
                          "\000\010\013\u0550\016\u054f\021\u0552\001\002\000\004\027" +
                          "\uff79\001\002\000\004\027\ufe62\001\002\000\004\037\112" +
                          "\001\002\000\004\043\u05d0\001\002\000\014\013\u05d4\014" +
                          "\u05d2\015\u05d1\016\u05d3\021\u05d6\001\002\000\004\042\u05f1" +
                          "\001\002\000\004\042\u05ea\001\002\000\004\042\u05e6\001" +
                          "\002\000\004\042\u05df\001\002\000\004\027\uffdc\001\002" +
                          "\000\004\042\u05d8\001\002\000\004\027\uff11\001\002\000" +
                          "\006\022\u05d9\023\u05da\001\002\000\004\043\u05dd\001\002" +
                          "\000\004\043\u05db\001\002\000\010\013\u0125\014\u0124\015" +
                          "\u0123\001\002\000\004\027\uffc6\001\002\000\012\013\u030e" +
                          "\014\u030d\015\u030c\016\u030f\001\002\000\004\027\ufef1\001" +
                          "\002\000\004\035\u05e0\001\002\000\004\037\054\001\002" +
                          "\000\004\036\u05e2\001\002\000\004\043\u05e3\001\002\000" +
                          "\012\014\u04f2\015\u04f1\016\u04f4\021\u04f6\001\002\000\004" +
                          "\027\uffc5\001\002\000\004\027\ufef0\001\002\000\004\044" +
                          "\u014b\001\002\000\004\043\u05e8\001\002\000\012\013\u0432" +
                          "\014\u0430\015\u042f\021\u0433\001\002\000\004\027\ufeee\001" +
                          "\002\000\004\035\u05eb\001\002\000\006\033\067\044\071" +
                          "\001\002\000\004\036\u05ed\001\002\000\004\043\u05ee\001" +
                          "\002\000\012\013\u056b\015\u0569\016\u056a\021\u056c\001\002" +
                          "\000\004\027\ufeef\001\002\000\004\027\uffc4\001\002\000" +
                          "\004\035\u05f2\001\002\000\004\026\103\001\002\000\004" +
                          "\036\u05f4\001\002\000\004\043\u05f5\001\002\000\012\013" +
                          "\u05b2\014\u05af\016\u05b1\021\u05b4\001\002\000\004\027\uffc3" +
                          "\001\002\000\004\027\ufeed\001\002\000\004\035\u05f9\001" +
                          "\002\000\004\037\054\001\002\000\004\036\u05fb\001\002" +
                          "\000\004\043\u05fc\001\002\000\016\004\u05fe\014\u0600\015" +
                          "\u05ff\016\u0602\017\u05fd\021\u0604\001\002\000\004\042\u090a" +
                          "\001\002\000\004\042\u08e2\001\002\000\004\042\u089f\001" +
                          "\002\000\004\042\u0830\001\002\000\004\027\uff34\001\002" +
                          "\000\004\042\u0790\001\002\000\004\027\ufff4\001\002\000" +
                          "\004\042\u0605\001\002\000\006\022\u0606\023\u0607\001\002" +
                          "\000\004\043\u067d\001\002\000\004\043\u0608\001\002\000" +
                          "\012\004\u060a\014\u060c\015\u060b\017\u0609\001\002\000\004" +
                          "\042\u0679\001\002\000\004\042\u0662\001\002\000\004\042" +
                          "\u063f\001\002\000\004\042\u060e\001\002\000\004\027\uffe5" +
                          "\001\002\000\004\035\u060f\001\002\000\006\033\067\044" +
                          "\071\001\002\000\004\036\u0611\001\002\000\004\043\u0612" +
                          "\001\002\000\010\004\u0614\015\u0615\017\u0613\001\002\000" +
                          "\004\042\u063b\001\002\000\004\042\u062b\001\002\000\004" +
                          "\042\u0617\001\002\000\004\027\uffbd\001\002\000\004\035" +
                          "\u0618\001\002\000\004\026\103\001\002\000\004\036\u061a" +
                          "\001\002\000\004\043\u061b\001\002\000\006\004\u061d\017" +
                          "\u061c\001\002\000\004\042\u0627\001\002\000\004\042\u061f" +
                          "\001\002\000\004\027\uff76\001\002\000\004\037\112\001" +
                          "\002\000\004\043\u0621\001\002\000\004\017\u0622\001\002" +
                          "\000\004\042\u0624\001\002\000\004\027\uff44\001\002\000" +
                          "\004\037\026\001\002\000\004\043\u0626\001\002\000\004" +
                          "\027\uff38\001\002\000\004\037\026\001\002\000\004\043" +
                          "\u0629\001\002\000\004\004\110\001\002\000\004\027\uff43" +
                          "\001\002\000\004\037\112\001\002\000\004\043\u062d\001" +
                          "\002\000\006\015\u062f\017\u062e\001\002\000\004\042\u0637" +
                          "\001\002\000\004\042\u0631\001\002\000\004\027\uff78\001" +
                          "\002\000\004\035\u0632\001\002\000\004\026\103\001\002" +
                          "\000\004\036\u0634\001\002\000\004\043\u0635\001\002\000" +
                          "\004\017\u0622\001\002\000\004\027\uff59\001\002\000\004" +
                          "\037\026\001\002\000\004\043\u0639\001\002\000\004\017" +
                          "\u0622\001\002\000\004\027\uff5a\001\002\000\004\037\026" +
                          "\001\002\000\004\043\u063d\001\002\000\006\004\076\015" +
                          "\077\001\002\000\004\027\uff77\001\002\000\004\035\u0640" +
                          "\001\002\000\004\026\103\001\002\000\004\036\u0642\001" +
                          "\002\000\004\043\u0643\001\002\000\010\004\u0646\014\u0647" +
                          "\017\u0644\001\002\000\004\042\u065e\001\002\000\004\027" +
                          "\uffbb\001\002\000\004\042\u064e\001\002\000\004\042\u0648" +
                          "\001\002\000\004\035\u0649\001\002\000\006\033\067\044" +
                          "\071\001\002\000\004\036\u064b\001\002\000\004\043\u064c" +
                          "\001\002\000\006\004\u061d\017\u061c\001\002\000\004\027" +
                          "\uff71\001\002\000\004\037\112\001\002\000\004\043\u0650" +
                          "\001\002\000\006\014\u0653\017\u0652\001\002\000\004\027" +
                          "\uff72\001\002\000\004\042\u065a\001\002\000\004\042\u0654" +
                          "\001\002\000\004\035\u0655\001\002\000\006\033\067\044" +
                          "\071\001\002\000\004\036\u0657\001\002\000\004\043\u0658" +
                          "\001\002\000\004\017\u0622\001\002\000\004\027\uff56\001" +
                          "\002\000\004\037\026\001\002\000\004\043\u065c\001\002" +
                          "\000\004\014\244\001\002\000\004\027\uff55\001\002\000" +
                          "\004\037\026\001\002\000\004\043\u0660\001\002\000\006" +
                          "\004\230\014\231\001\002\000\004\027\uff70\001\002\000" +
                          "\004\037\112\001\002\000\004\043\u0664\001\002\000\010" +
                          "\014\u0667\015\u0666\017\u0665\001\002\000\004\042\u0675\001" +
                          "\002\000\004\042\u066f\001\002\000\004\042\u0669\001\002" +
                          "\000\004\027\uffbe\001\002\000\004\035\u066a\001\002\000" +
                          "\006\033\067\044\071\001\002\000\004\036\u066c\001\002" +
                          "\000\004\043\u066d\001\002\000\006\015\u062f\017\u062e\001" +
                          "\002\000\004\027\uff96\001\002\000\004\035\u0670\001\002" +
                          "\000\004\026\103\001\002\000\004\036\u0672\001\002\000" +
                          "\004\043\u0673\001\002\000\006\014\u0653\017\u0652\001\002" +
                          "\000\004\027\uff94\001\002\000\004\037\026\001\002\000" +
                          "\004\043\u0677\001\002\000\006\014\260\015\257\001\002" +
                          "\000\004\027\uff95\001\002\000\004\037\026\001\002\000" +
                          "\004\043\u067b\001\002\000\010\004\060\014\062\015\061" +
                          "\001\002\000\004\027\uffbc\001\002\000\014\004\u067f\014" +
                          "\u0681\015\u0680\016\u0683\017\u067e\001\002\000\004\042\u078c" +
                          "\001\002\000\004\042\u0770\001\002\000\004\042\u0741\001" +
                          "\002\000\004\042\u06fb\001\002\000\004\027\uff22\001\002" +
                          "\000\004\042\u0684\001\002\000\004\044\u014b\001\002\000" +
                          "\004\043\u0686\001\002\000\012\004\u0688\014\u068a\015\u0689" +
                          "\017\u0687\001\002\000\004\042\u06f7\001\002\000\004\042" +
                          "\u06e0\001\002\000\004\042\u06bd\001\002\000\004\042\u068c" +
                          "\001\002\000\004\027\ufee5\001\002\000\004\035\u068d\001" +
                          "\002\000\006\033\067\044\071\001\002\000\004\036\u068f" +
                          "\001\002\000\004\043\u0690\001\002\000\010\004\u0692\015" +
                          "\u0693\017\u0691\001\002\000\004\042\u06b9\001\002\000\004" +
                          "\042\u06a9\001\002\000\004\042\u0695\001\002\000\004\027" +
                          "\ufe5b\001\002\000\004\035\u0696\001\002\000\004\026\103" +
                          "\001\002\000\004\036\u0698\001\002\000\004\043\u0699\001" +
                          "\002\000\006\004\u069b\017\u069a\001\002\000\004\042\u06a5" +
                          "\001\002\000\004\042\u069d\001\002\000\004\027\ufdd2\001" +
                          "\002\000\004\037\112\001\002\000\004\043\u069f\001\002" +
                          "\000\004\017\u06a0\001\002\000\004\042\u06a2\001\002\000" +
                          "\004\027\ufd87\001\002\000\004\037\026\001\002\000\004" +
                          "\043\u06a4\001\002\000\004\027\ufd78\001\002\000\004\037" +
                          "\026\001\002\000\004\043\u06a7\001\002\000\004\004\u0160" +
                          "\001\002\000\004\027\ufd86\001\002\000\004\037\112\001" +
                          "\002\000\004\043\u06ab\001\002\000\006\015\u06ad\017\u06ac" +
                          "\001\002\000\004\042\u06b5\001\002\000\004\042\u06af\001" +
                          "\002\000\004\027\ufdd4\001\002\000\004\035\u06b0\001\002" +
                          "\000\004\026\103\001\002\000\004\036\u06b2\001\002\000" +
                          "\004\043\u06b3\001\002\000\004\017\u06a0\001\002\000\004" +
                          "\027\ufda6\001\002\000\004\037\026\001\002\000\004\043" +
                          "\u06b7\001\002\000\004\017\u06a0\001\002\000\004\027\ufda7" +
                          "\001\002\000\004\037\026\001\002\000\004\043\u06bb\001" +
                          "\002\000\006\004\u0158\015\u0159\001\002\000\004\027\ufdd3" +
                          "\001\002\000\004\035\u06be\001\002\000\004\026\103\001" +
                          "\002\000\004\036\u06c0\001\002\000\004\043\u06c1\001\002" +
                          "\000\010\004\u06c3\014\u06c4\017\u06c2\001\002\000\004\042" +
                          "\u06dc\001\002\000\004\042\u06cc\001\002\000\004\042\u06c6" +
                          "\001\002\000\004\027\ufe59\001\002\000\004\035\u06c7\001" +
                          "\002\000\006\033\067\044\071\001\002\000\004\036\u06c9" +
                          "\001\002\000\004\043\u06ca\001\002\000\006\004\u069b\017" +
                          "\u069a\001\002\000\004\027\ufdc7\001\002\000\004\037\112" +
                          "\001\002\000\004\043\u06ce\001\002\000\006\014\u06d1\017" +
                          "\u06cf\001\002\000\004\042\u06d8\001\002\000\004\027\ufdc8" +
                          "\001\002\000\004\042\u06d2\001\002\000\004\035\u06d3\001" +
                          "\002\000\006\033\067\044\071\001\002\000\004\036\u06d5" +
                          "\001\002\000\004\043\u06d6\001\002\000\004\017\u06a0\001" +
                          "\002\000\004\027\ufd9f\001\002\000\004\037\026\001\002" +
                          "\000\004\043\u06da\001\002\000\004\014\u0181\001\002\000" +
                          "\004\027\ufd9e\001\002\000\004\037\026\001\002\000\004" +
                          "\043\u06de\001\002\000\006\004\u0174\014\u0175\001\002\000" +
                          "\004\027\ufdc6\001\002\000\004\037\112\001\002\000\004" +
                          "\043\u06e2\001\002\000\010\014\u06e6\015\u06e5\017\u06e3\001" +
                          "\002\000\004\042\u06f3\001\002\000\004\027\ufe5c\001\002" +
                          "\000\004\042\u06ed\001\002\000\004\042\u06e7\001\002\000" +
                          "\004\035\u06e8\001\002\000\006\033\067\044\071\001\002" +
                          "\000\004\036\u06ea\001\002\000\004\043\u06eb\001\002\000" +
                          "\006\015\u06ad\017\u06ac\001\002\000\004\027\ufe0d\001\002" +
                          "\000\004\035\u06ee\001\002\000\004\026\103\001\002\000" +
                          "\004\036\u06f0\001\002\000\004\043\u06f1\001\002\000\006" +
                          "\014\u06d1\017\u06cf\001\002\000\004\027\ufe0b\001\002\000" +
                          "\004\037\026\001\002\000\004\043\u06f5\001\002\000\006" +
                          "\014\u018b\015\u018a\001\002\000\004\027\ufe0c\001\002\000" +
                          "\004\037\026\001\002\000\004\043\u06f9\001\002\000\010" +
                          "\004\u014f\014\u0151\015\u0150\001\002\000\004\027\ufe5a\001" +
                          "\002\000\004\035\u06fc\001\002\000\006\033\067\044\071" +
                          "\001\002\000\004\036\u06fe\001\002\000\004\043\u06ff\001" +
                          "\002\000\012\004\u0701\015\u0702\016\u0704\017\u0700\001\002" +
                          "\000\004\042\u073d\001\002\000\004\042\u0728\001\002\000" +
                          "\004\042\u0709\001\002\000\004\027\ufee6\001\002\000\004" +
                          "\042\u0705\001\002\000\004\044\u014b\001\002\000\004\043" +
                          "\u0707\001\002\000\010\004\u0692\015\u0693\017\u0691\001\002" +
                          "\000\004\027\ufe5f\001\002\000\004\035\u070a\001\002\000" +
                          "\004\026\103\001\002\000\004\036\u070c\001\002\000\004" +
                          "\043\u070d\001\002\000\010\004\u070f\016\u0711\017\u070e\001" +
                          "\002\000\004\042\u0724\001\002\000\004\042\u0716\001\002" +
                          "\000\004\027\ufe5d\001\002\000\004\042\u0712\001\002\000" +
                          "\004\044\u014b\001\002\000\004\043\u0714\001\002\000\006" +
                          "\004\u069b\017\u069a\001\002\000\004\027\ufdcd\001\002\000" +
                          "\004\037\112\001\002\000\004\043\u0718\001\002\000\006" +
                          "\016\u071b\017\u0719\001\002\000\004\042\u0720\001\002\000" +
                          "\004\027\ufdce\001\002\000\004\042\u071c\001\002\000\004" +
                          "\044\u014b\001\002\000\004\043\u071e\001\002\000\004\017" +
                          "\u06a0\001\002\000\004\027\ufda3\001\002\000\004\037\026" +
                          "\001\002\000\004\043\u0722\001\002\000\004\016\u01b6\001" +
                          "\002\000\004\027\ufda2\001\002\000\004\037\026\001\002" +
                          "\000\004\043\u0726\001\002\000\006\004\u01ab\016\u01ac\001" +
                          "\002\000\004\027\ufdcc\001\002\000\004\037\112\001\002" +
                          "\000\004\043\u072a\001\002\000\010\015\u072c\016\u072e\017" +
                          "\u072b\001\002\000\004\042\u0739\001\002\000\004\042\u0733" +
                          "\001\002\000\004\027\ufe60\001\002\000\004\042\u072f\001" +
                          "\002\000\004\044\u014b\001\002\000\004\043\u0731\001\002" +
                          "\000\006\015\u06ad\017\u06ac\001\002\000\004\027\ufe10\001" +
                          "\002\000\004\035\u0734\001\002\000\004\026\103\001\002" +
                          "\000\004\036\u0736\001\002\000\004\043\u0737\001\002\000" +
                          "\006\016\u071b\017\u0719\001\002\000\004\027\ufe0e\001\002" +
                          "\000\004\037\026\001\002\000\004\043\u073b\001\002\000" +
                          "\006\015\u01be\016\u01bf\001\002\000\004\027\ufe0f\001\002" +
                          "\000\004\037\026\001\002\000\004\043\u073f\001\002\000" +
                          "\010\004\u019e\015\u019f\016\u01a0\001\002\000\004\027\ufe5e" +
                          "\001\002\000\004\035\u0742\001\002\000\004\026\103\001" +
                          "\002\000\004\036\u0744\001\002\000\004\043\u0745\001\002" +
                          "\000\012\004\u0746\014\u0748\015\u0747\016\u0749\001\002\000" +
                          "\004\042\u075b\001\002\000\004\042\u0755\001\002\000\004" +
                          "\042\u074f\001\002\000\004\042\u074b\001\002\000\004\027" +
                          "\ufee3\001\002\000\004\044\u014b\001\002\000\004\043\u074d" +
                          "\001\002\000\010\004\u06c3\014\u06c4\017\u06c2\001\002\000" +
                          "\004\027\ufe52\001\002\000\004\035\u0750\001\002\000\006" +
                          "\033\067\044\071\001\002\000\004\036\u0752\001\002\000" +
                          "\004\043\u0753\001\002\000\010\004\u070f\016\u0711\017\u070e" +
                          "\001\002\000\004\027\ufe53\001\002\000\004\035\u0756\001" +
                          "\002\000\004\026\103\001\002\000\004\036\u0758\001\002" +
                          "\000\004\043\u0759\001\002\000\010\004\u01cf\014\u01d0\016" +
                          "\u01d1\001\002\000\004\027\ufe51\001\002\000\004\037\112" +
                          "\001\002\000\004\043\u075d\001\002\000\010\014\u0760\016" +
                          "\u0761\017\u075e\001\002\000\004\042\u076c\001\002\000\004" +
                          "\027\ufe54\001\002\000\004\042\u0766\001\002\000\004\042" +
                          "\u0762\001\002\000\004\044\u014b\001\002\000\004\043\u0764" +
                          "\001\002\000\006\014\u06d1\017\u06cf\001\002\000\004\027" +
                          "\ufe06\001\002\000\004\035\u0767\001\002\000\006\033\067" +
                          "\044\071\001\002\000\004\036\u0769\001\002\000\004\043" +
                          "\u076a\001\002\000\006\016\u071b\017\u0719\001\002\000\004" +
                          "\027\ufe07\001\002\000\004\037\026\001\002\000\004\043" +
                          "\u076e\001\002\000\006\014\u01e0\016\u01e1\001\002\000\004" +
                          "\027\ufe05\001\002\000\004\037\112\001\002\000\004\043" +
                          "\u0772\001\002\000\012\014\u0775\015\u0774\016\u0776\017\u0773" +
                          "\001\002\000\004\042\u0788\001\002\000\004\042\u0782\001" +
                          "\002\000\004\042\u077c\001\002\000\004\042\u0778\001\002" +
                          "\000\004\027\ufee7\001\002\000\004\044\u014b\001\002\000" +
                          "\004\043\u077a\001\002\000\010\014\u06e6\015\u06e5\017\u06e3" +
                          "\001\002\000\004\027\ufe9b\001\002\000\004\035\u077d\001" +
                          "\002\000\006\033\067\044\071\001\002\000\004\036\u077f" +
                          "\001\002\000\004\043\u0780\001\002\000\010\015\u072c\016" +
                          "\u072e\017\u072b\001\002\000\004\027\ufe9c\001\002\000\004" +
                          "\035\u0783\001\002\000\004\026\103\001\002\000\004\036" +
                          "\u0785\001\002\000\004\043\u0786\001\002\000\010\014\u0760" +
                          "\016\u0761\017\u075e\001\002\000\004\027\ufe99\001\002\000" +
                          "\004\037\026\001\002\000\004\043\u078a\001\002\000\010" +
                          "\014\u01f1\015\u01f0\016\u01f3\001\002\000\004\027\ufe9a\001" +
                          "\002\000\004\037\026\001\002\000\004\043\u078e\001\002" +
                          "\000\012\004\u0145\014\u0147\015\u0146\016\u0148\001\002\000" +
                          "\004\027\ufee4\001\002\000\004\044\u014b\001\002\000\004" +
                          "\043\u0792\001\002\000\014\004\u0794\014\u0796\015\u0795\017" +
                          "\u0793\021\u0798\001\002\000\004\042\u082c\001\002\000\004" +
                          "\042\u0810\001\002\000\004\042\u07e3\001\002\000\004\042" +
                          "\u079d\001\002\000\004\027\uff20\001\002\000\004\042\u0799" +
                          "\001\002\000\004\022\u079a\001\002\000\004\043\u079b\001" +
                          "\002\000\012\004\u0688\014\u068a\015\u0689\017\u0687\001\002" +
                          "\000\004\027\ufec8\001\002\000\004\035\u079e\001\002\000" +
                          "\006\033\067\044\071\001\002\000\004\036\u07a0\001\002" +
                          "\000\004\043\u07a1\001\002\000\012\004\u07a3\015\u07a4\017" +
                          "\u07a2\021\u07a6\001\002\000\004\042\u07df\001\002\000\004" +
                          "\042\u07ca\001\002\000\004\042\u07ab\001\002\000\004\027" +
                          "\ufec7\001\002\000\004\042\u07a7\001\002\000\004\022\u07a8" +
                          "\001\002\000\004\043\u07a9\001\002\000\010\004\u0692\015" +
                          "\u0693\017\u0691\001\002\000\004\027\ufe37\001\002\000\004" +
                          "\035\u07ac\001\002\000\004\026\103\001\002\000\004\036" +
                          "\u07ae\001\002\000\004\043\u07af\001\002\000\010\004\u07b1" +
                          "\017\u07b0\021\u07b3\001\002\000\004\042\u07c6\001\002\000" +
                          "\004\042\u07b8\001\002\000\004\027\ufe35\001\002\000\004" +
                          "\042\u07b4\001\002\000\004\022\u07b5\001\002\000\004\043" +
                          "\u07b6\001\002\000\006\004\u069b\017\u069a\001\002\000\004" +
                          "\027\ufdb2\001\002\000\004\037\112\001\002\000\004\043" +
                          "\u07ba\001\002\000\006\017\u07bb\021\u07bd\001\002\000\004" +
                          "\042\u07c2\001\002\000\004\027\ufdb3\001\002\000\004\042" +
                          "\u07be\001\002\000\004\022\u07bf\001\002\000\004\043\u07c0" +
                          "\001\002\000\004\017\u06a0\001\002\000\004\027\ufd91\001" +
                          "\002\000\004\037\026\001\002\000\004\043\u07c4\001\002" +
                          "\000\004\021\u035f\001\002\000\004\027\ufd90\001\002\000" +
                          "\004\037\026\001\002\000\004\043\u07c8\001\002\000\006" +
                          "\004\u0354\021\u0356\001\002\000\004\027\ufdb1\001\002\000" +
                          "\004\037\112\001\002\000\004\043\u07cc\001\002\000\010" +
                          "\015\u07ce\017\u07cd\021\u07d0\001\002\000\004\042\u07db\001" +
                          "\002\000\004\042\u07d5\001\002\000\004\027\ufe38\001\002" +
                          "\000\004\042\u07d1\001\002\000\004\022\u07d2\001\002\000" +
                          "\004\043\u07d3\001\002\000\006\015\u06ad\017\u06ac\001\002" +
                          "\000\004\027\ufdf2\001\002\000\004\035\u07d6\001\002\000" +
                          "\004\026\103\001\002\000\004\036\u07d8\001\002\000\004" +
                          "\043\u07d9\001\002\000\006\017\u07bb\021\u07bd\001\002\000" +
                          "\004\027\ufdf0\001\002\000\004\037\026\001\002\000\004" +
                          "\043\u07dd\001\002\000\006\015\u0366\021\u0368\001\002\000" +
                          "\004\027\ufdf1\001\002\000\004\037\026\001\002\000\004" +
                          "\043\u07e1\001\002\000\010\004\u0347\015\u0348\021\u0349\001" +
                          "\002\000\004\027\ufe36\001\002\000\004\035\u07e4\001\002" +
                          "\000\004\026\103\001\002\000\004\036\u07e6\001\002\000" +
                          "\004\043\u07e7\001\002\000\012\004\u07e9\014\u07ea\017\u07e8" +
                          "\021\u07ec\001\002\000\004\042\u080c\001\002\000\004\042" +
                          "\u07f7\001\002\000\004\042\u07f1\001\002\000\004\027\ufec5" +
                          "\001\002\000\004\042\u07ed\001\002\000\004\022\u07ee\001" +
                          "\002\000\004\043\u07ef\001\002\000\010\004\u06c3\014\u06c4" +
                          "\017\u06c2\001\002\000\004\027\ufe27\001\002\000\004\035" +
                          "\u07f2\001\002\000\006\033\067\044\071\001\002\000\004" +
                          "\036\u07f4\001\002\000\004\043\u07f5\001\002\000\010\004" +
                          "\u07b1\017\u07b0\021\u07b3\001\002\000\004\027\ufe26\001\002" +
                          "\000\004\037\112\001\002\000\004\043\u07f9\001\002\000" +
                          "\010\014\u07fc\017\u07fb\021\u07fd\001\002\000\004\027\ufe28" +
                          "\001\002\000\004\042\u0808\001\002\000\004\042\u0802\001" +
                          "\002\000\004\042\u07fe\001\002\000\004\022\u07ff\001\002" +
                          "\000\004\043\u0800\001\002\000\006\014\u06d1\017\u06cf\001" +
                          "\002\000\004\027\ufde6\001\002\000\004\035\u0803\001\002" +
                          "\000\006\033\067\044\071\001\002\000\004\036\u0805\001" +
                          "\002\000\004\043\u0806\001\002\000\006\017\u07bb\021\u07bd" +
                          "\001\002\000\004\027\ufde5\001\002\000\004\037\026\001" +
                          "\002\000\004\043\u080a\001\002\000\006\014\u0389\021\u038b" +
                          "\001\002\000\004\027\ufde4\001\002\000\004\037\026\001" +
                          "\002\000\004\043\u080e\001\002\000\010\004\u0378\014\u0379" +
                          "\021\u037b\001\002\000\004\027\ufe25\001\002\000\004\037" +
                          "\112\001\002\000\004\043\u0812\001\002\000\012\014\u0815" +
                          "\015\u0814\017\u0813\021\u0817\001\002\000\004\042\u0828\001" +
                          "\002\000\004\042\u0822\001\002\000\004\042\u081c\001\002" +
                          "\000\004\027\ufec9\001\002\000\004\042\u0818\001\002\000" +
                          "\004\022\u0819\001\002\000\004\043\u081a\001\002\000\010" +
                          "\014\u06e6\015\u06e5\017\u06e3\001\002\000\004\027\ufe84\001" +
                          "\002\000\004\035\u081d\001\002\000\006\033\067\044\071" +
                          "\001\002\000\004\036\u081f\001\002\000\004\043\u0820\001" +
                          "\002\000\010\015\u07ce\017\u07cd\021\u07d0\001\002\000\004" +
                          "\027\ufe83\001\002\000\004\035\u0823\001\002\000\004\026" +
                          "\103\001\002\000\004\036\u0825\001\002\000\004\043\u0826" +
                          "\001\002\000\010\014\u07fc\017\u07fb\021\u07fd\001\002\000" +
                          "\004\027\ufe81\001\002\000\004\037\026\001\002\000\004" +
                          "\043\u082a\001\002\000\010\014\u039a\015\u0399\021\u039c\001" +
                          "\002\000\004\027\ufe82\001\002\000\004\037\026\001\002" +
                          "\000\004\043\u082e\001\002\000\012\004\u0339\014\u033b\015" +
                          "\u033a\021\u033d\001\002\000\004\027\ufec6\001\002\000\004" +
                          "\035\u0831\001\002\000\006\033\067\044\071\001\002\000" +
                          "\004\036\u0833\001\002\000\004\043\u0834\001\002\000\014" +
                          "\004\u0836\015\u0837\016\u083a\017\u0835\021\u083b\001\002\000" +
                          "\004\042\u089a\001\002\000\004\042\u087a\001\002\000\004" +
                          "\042\u0847\001\002\000\004\027\uff21\001\002\000\004\027" +
                          "\uffe4\001\002\000\004\042\u0843\001\002\000\004\042\u083c" +
                          "\001\002\000\006\022\u083d\023\u083e\001\002\000\004\043" +
                          "\u0841\001\002\000\004\043\u083f\001\002\000\010\004\u0614" +
                          "\015\u0615\017\u0613\001\002\000\004\027\uffad\001\002\000" +
                          "\012\004\u0701\015\u0702\016\u0704\017\u0700\001\002\000\004" +
                          "\027\ufecd\001\002\000\004\044\u014b\001\002\000\004\043" +
                          "\u0845\001\002\000\012\004\u07a3\015\u07a4\017\u07a2\021\u07a6" +
                          "\001\002\000\004\027\ufecc\001\002\000\004\035\u0848\001" +
                          "\002\000\004\026\103\001\002\000\004\036\u084a\001\002" +
                          "\000\004\043\u084b\001\002\000\012\004\u084d\016\u084f\017" +
                          "\u084c\021\u0851\001\002\000\004\042\u0875\001\002\000\004" +
                          "\042\u085d\001\002\000\004\027\ufeca\001\002\000\004\042" +
                          "\u0859\001\002\000\004\027\uffab\001\002\000\004\042\u0852" +
                          "\001\002\000\006\022\u0853\023\u0854\001\002\000\004\043" +
                          "\u0857\001\002\000\004\043\u0855\001\002\000\006\004\u061d" +
                          "\017\u061c\001\002\000\004\027\uff62\001\002\000\010\004" +
                          "\u070f\016\u0711\017\u070e\001\002\000\004\027\ufe2f\001\002" +
                          "\000\004\044\u014b\001\002\000\004\043\u085b\001\002\000" +
                          "\010\004\u07b1\017\u07b0\021\u07b3\001\002\000\004\027\ufe2e" +
                          "\001\002\000\004\037\112\001\002\000\004\043\u085f\001" +
                          "\002\000\010\016\u0862\017\u0860\021\u0864\001\002\000\004" +
                          "\042\u0870\001\002\000\004\027\ufe30\001\002\000\004\042" +
                          "\u086c\001\002\000\004\027\uff63\001\002\000\004\042\u0865" +
                          "\001\002\000\006\022\u0866\023\u0867\001\002\000\004\043" +
                          "\u086a\001\002\000\004\043\u0868\001\002\000\004\017\u0622" +
                          "\001\002\000\004\027\uff4c\001\002\000\006\016\u071b\017" +
                          "\u0719\001\002\000\004\027\ufdec\001\002\000\004\044\u014b" +
                          "\001\002\000\004\043\u086e\001\002\000\006\017\u07bb\021" +
                          "\u07bd\001\002\000\004\027\ufdeb\001\002\000\004\037\026" +
                          "\001\002\000\004\043\u0872\001\002\000\006\016\u0491\021" +
                          "\u0492\001\002\000\004\027\uff4b\001\002\000\004\027\ufdea" +
                          "\001\002\000\004\037\026\001\002\000\004\043\u0877\001" +
                          "\002\000\010\004\u047d\016\u047e\021\u047f\001\002\000\004" +
                          "\027\uff61\001\002\000\004\027\ufe2d\001\002\000\004\037" +
                          "\112\001\002\000\004\043\u087c\001\002\000\012\015\u087f" +
                          "\016\u0880\017\u087d\021\u0882\001\002\000\004\042\u0895\001" +
                          "\002\000\004\027\ufece\001\002\000\004\042\u088e\001\002" +
                          "\000\004\042\u088a\001\002\000\004\027\uffae\001\002\000" +
                          "\004\042\u0883\001\002\000\006\022\u0884\023\u0885\001\002" +
                          "\000\004\043\u0888\001\002\000\004\043\u0886\001\002\000" +
                          "\006\015\u062f\017\u062e\001\002\000\004\027\uff8a\001\002" +
                          "\000\010\015\u072c\016\u072e\017\u072b\001\002\000\004\027" +
                          "\ufe88\001\002\000\004\044\u014b\001\002\000\004\043\u088c" +
                          "\001\002\000\010\015\u07ce\017\u07cd\021\u07d0\001\002\000" +
                          "\004\027\ufe87\001\002\000\004\035\u088f\001\002\000\004" +
                          "\026\103\001\002\000\004\036\u0891\001\002\000\004\043" +
                          "\u0892\001\002\000\010\016\u0862\017\u0860\021\u0864\001\002" +
                          "\000\004\027\ufe85\001\002\000\004\027\uff88\001\002\000" +
                          "\004\037\026\001\002\000\004\043\u0897\001\002\000\010" +
                          "\015\u04a1\016\u04a3\021\u04a4\001\002\000\004\027\ufe86\001" +
                          "\002\000\004\027\uff89\001\002\000\004\037\026\001\002" +
                          "\000\004\043\u089c\001\002\000\012\004\u0466\015\u0468\016" +
                          "\u0469\021\u046b\001\002\000\004\027\uffac\001\002\000\004" +
                          "\027\ufecb\001\002\000\004\035\u08a0\001\002\000\004\026" +
                          "\103\001\002\000\004\036\u08a2\001\002\000\004\043\u08a3" +
                          "\001\002\000\014\004\u08a5\014\u08a7\016\u08a9\017\u08a4\021" +
                          "\u08aa\001\002\000\004\042\u08dd\001\002\000\004\042\u08bd" +
                          "\001\002\000\004\027\uff1e\001\002\000\004\042\u08b6\001" +
                          "\002\000\004\027\uffe2\001\002\000\004\042\u08b2\001\002" +
                          "\000\004\042\u08ab\001\002\000\006\022\u08ac\023\u08ad\001" +
                          "\002\000\004\043\u08b0\001\002\000\004\043\u08ae\001\002" +
                          "\000\010\004\u0646\014\u0647\017\u0644\001\002\000\004\027" +
                          "\uffa5\001\002\000\012\004\u0746\014\u0748\015\u0747\016\u0749" +
                          "\001\002\000\004\027\ufebe\001\002\000\004\044\u014b\001" +
                          "\002\000\004\043\u08b4\001\002\000\012\004\u07e9\014\u07ea" +
                          "\017\u07e8\021\u07ec\001\002\000\004\027\ufebc\001\002\000" +
                          "\004\035\u08b7\001\002\000\006\033\067\044\071\001\002" +
                          "\000\004\036\u08b9\001\002\000\004\043\u08ba\001\002\000" +
                          "\012\004\u084d\016\u084f\017\u084c\021\u0851\001\002\000\004" +
                          "\027\ufebd\001\002\000\004\027\uffa4\001\002\000\004\037" +
                          "\112\001\002\000\004\043\u08bf\001\002\000\012\014\u08c1" +
                          "\016\u08c3\017\u08c0\021\u08c5\001\002\000\004\042\u08d8\001" +
                          "\002\000\004\042\u08d1\001\002\000\004\027\ufebf\001\002" +
                          "\000\004\042\u08cd\001\002\000\004\027\uffa6\001\002\000" +
                          "\004\042\u08c6\001\002\000\006\022\u08c7\023\u08c8\001\002" +
                          "\000\004\043\u08cb\001\002\000\004\043\u08c9\001\002\000" +
                          "\006\014\u0653\017\u0652\001\002\000\004\027\uff84\001\002" +
                          "\000\010\014\u0760\016\u0761\017\u075e\001\002\000\004\027" +
                          "\ufe7c\001\002\000\004\044\u014b\001\002\000\004\043\u08cf" +
                          "\001\002\000\010\014\u07fc\017\u07fb\021\u07fd\001\002\000" +
                          "\004\027\ufe7a\001\002\000\004\035\u08d2\001\002\000\006" +
                          "\033\067\044\071\001\002\000\004\036\u08d4\001\002\000" +
                          "\004\043\u08d5\001\002\000\010\016\u0862\017\u0860\021\u0864" +
                          "\001\002\000\004\027\ufe7b\001\002\000\004\027\uff83\001" +
                          "\002\000\004\037\026\001\002\000\004\043\u08da\001\002" +
                          "\000\010\014\u04d8\016\u04da\021\u04db\001\002\000\004\027" +
                          "\uff82\001\002\000\004\027\ufe79\001\002\000\004\037\026" +
                          "\001\002\000\004\043\u08df\001\002\000\012\004\u04bc\014" +
                          "\u04be\016\u04bf\021\u04c0\001\002\000\004\027\ufebb\001\002" +
                          "\000\004\027\uffa3\001\002\000\004\037\112\001\002\000" +
                          "\004\043\u08e4\001\002\000\014\014\u08e8\015\u08e7\016\u08e9" +
                          "\017\u08e5\021\u08eb\001\002\000\004\042\u0905\001\002\000" +
                          "\004\027\uffe6\001\002\000\004\042\u08fe\001\002\000\004" +
                          "\042\u08f7\001\002\000\004\042\u08f3\001\002\000\004\027" +
                          "\uff23\001\002\000\004\042\u08ec\001\002\000\006\022\u08ed" +
                          "\023\u08ee\001\002\000\004\043\u08f1\001\002\000\004\043" +
                          "\u08ef\001\002\000\010\014\u0667\015\u0666\017\u0665\001\002" +
                          "\000\004\027\uffce\001\002\000\012\014\u0775\015\u0774\016" +
                          "\u0776\017\u0773\001\002\000\004\027\uff00\001\002\000\004" +
                          "\044\u014b\001\002\000\004\043\u08f5\001\002\000\012\014" +
                          "\u0815\015\u0814\017\u0813\021\u0817\001\002\000\004\027\ufefe" +
                          "\001\002\000\004\035\u08f8\001\002\000\006\033\067\044" +
                          "\071\001\002\000\004\036\u08fa\001\002\000\004\043\u08fb" +
                          "\001\002\000\012\015\u087f\016\u0880\017\u087d\021\u0882\001" +
                          "\002\000\004\027\ufeff\001\002\000\004\027\uffcd\001\002" +
                          "\000\004\035\u08ff\001\002\000\004\026\103\001\002\000" +
                          "\004\036\u0901\001\002\000\004\043\u0902\001\002\000\012" +
                          "\014\u08c1\016\u08c3\017\u08c0\021\u08c5\001\002\000\004\027" +
                          "\ufefc\001\002\000\004\027\uffcb\001\002\000\004\037\026" +
                          "\001\002\000\004\043\u0907\001\002\000\012\014\u04f2\015" +
                          "\u04f1\016\u04f4\021\u04f6\001\002\000\004\027\uffcc\001\002" +
                          "\000\004\027\ufefd\001\002\000\004\037\026\001\002\000" +
                          "\004\043\u090c\001\002\000\014\004\u044f\014\u0452\015\u0451" +
                          "\016\u0453\021\u0455\001\002\000\004\027\uffe3\001\002\000" +
                          "\004\027\uff1f\001\002\000\004\035\u0910\001\002\000\004" +
                          "\026\103\001\002\000\004\036\u0912\001\002\000\004\043" +
                          "\u0913\001\002\000\016\004\u0915\013\u0919\014\u0918\016\u091a" +
                          "\017\u0914\021\u091b\001\002\000\004\042\u0ae1\001\002\000" +
                          "\004\042\u0ab9\001\002\000\004\027\ufff1\001\002\000\004" +
                          "\027\uff30\001\002\000\004\042\u0a76\001\002\000\004\042" +
                          "\u0a6f\001\002\000\004\042\u0a0f\001\002\000\004\042\u091c" +
                          "\001\002\000\006\022\u091d\023\u091e\001\002\000\004\043" +
                          "\u0969\001\002\000\004\043\u091f\001\002\000\012\004\u0922" +
                          "\013\u0924\014\u0923\017\u0920\001\002\000\004\042\u0965\001" +
                          "\002\000\004\027\uffd6\001\002\000\004\042\u094e\001\002" +
                          "\000\004\042\u092b\001\002\000\004\042\u0925\001\002\000" +
                          "\004\035\u0926\001\002\000\004\037\054\001\002\000\004" +
                          "\036\u0928\001\002\000\004\043\u0929\001\002\000\010\004" +
                          "\u0646\014\u0647\017\u0644\001\002\000\004\027\uffb1\001\002" +
                          "\000\004\035\u092c\001\002\000\006\033\067\044\071\001" +
                          "\002\000\004\036\u092e\001\002\000\004\043\u092f\001\002" +
                          "\000\010\004\u0931\013\u0932\017\u0930\001\002\000\004\042" +
                          "\u094a\001\002\000\004\042\u093a\001\002\000\004\042\u0934" +
                          "\001\002\000\004\027\uffb0\001\002\000\004\035\u0935\001" +
                          "\002\000\004\037\054\001\002\000\004\036\u0937\001\002" +
                          "\000\004\043\u0938\001\002\000\006\004\u061d\017\u061c\001" +
                          "\002\000\004\027\uff6b\001\002\000\004\037\112\001\002" +
                          "\000\004\043\u093c\001\002\000\006\013\u093f\017\u093d\001" +
                          "\002\000\004\042\u0946\001\002\000\004\027\uff6c\001\002" +
                          "\000\004\042\u0940\001\002\000\004\035\u0941\001\002\000" +
                          "\004\037\054\001\002\000\004\036\u0943\001\002\000\004" +
                          "\043\u0944\001\002\000\004\017\u0622\001\002\000\004\027" +
                          "\uff52\001\002\000\004\037\026\001\002\000\004\043\u0948" +
                          "\001\002\000\004\013\337\001\002\000\004\027\uff51\001" +
                          "\002\000\004\037\026\001\002\000\004\043\u094c\001\002" +
                          "\000\006\004\323\013\325\001\002\000\004\027\uff6a\001" +
                          "\002\000\004\037\112\001\002\000\004\043\u0950\001\002" +
                          "\000\010\013\u0953\014\u0952\017\u0951\001\002\000\004\042" +
                          "\u0961\001\002\000\004\042\u095b\001\002\000\004\042\u0955" +
                          "\001\002\000\004\027\uffb2\001\002\000\004\035\u0956\001" +
                          "\002\000\004\037\054\001\002\000\004\036\u0958\001\002" +
                          "\000\004\043\u0959\001\002\000\006\014\u0653\017\u0652\001" +
                          "\002\000\004\027\uff8d\001\002\000\004\035\u095c\001\002" +
                          "\000\006\033\067\044\071\001\002\000\004\036\u095e\001" +
                          "\002\000\004\043\u095f\001\002\000\006\013\u093f\017\u093d" +
                          "\001\002\000\004\027\uff8c\001\002\000\004\037\026\001" +
                          "\002\000\004\043\u0963\001\002\000\006\013\u0111\014\u0110" +
                          "\001\002\000\004\027\uff8b\001\002\000\004\037\026\001" +
                          "\002\000\004\043\u0967\001\002\000\010\004\375\013\377" +
                          "\014\376\001\002\000\004\027\uffaf\001\002\000\014\004" +
                          "\u096b\013\u096d\014\u096c\016\u096e\017\u096a\001\002\000\004" +
                          "\042\u0a0b\001\002\000\004\042\u09ef\001\002\000\004\042" +
                          "\u09c2\001\002\000\004\042\u09bc\001\002\000\004\042\u0970" +
                          "\001\002\000\004\027\uff0a\001\002\000\004\044\u014b\001" +
                          "\002\000\004\043\u0972\001\002\000\012\004\u0974\013\u0976" +
                          "\014\u0975\017\u0973\001\002\000\004\042\u09b8\001\002\000" +
                          "\004\042\u09a1\001\002\000\004\042\u097e\001\002\000\004" +
                          "\042\u0978\001\002\000\004\027\ufed0\001\002\000\004\035" +
                          "\u0979\001\002\000\004\037\054\001\002\000\004\036\u097b" +
                          "\001\002\000\004\043\u097c\001\002\000\010\004\u06c3\014" +
                          "\u06c4\017\u06c2\001\002\000\004\027\ufe3f\001\002\000\004" +
                          "\035\u097f\001\002\000\006\033\067\044\071\001\002\000" +
                          "\004\036\u0981\001\002\000\004\043\u0982\001\002\000\010" +
                          "\004\u0984\013\u0985\017\u0983\001\002\000\004\042\u099d\001" +
                          "\002\000\004\042\u098d\001\002\000\004\042\u0987\001\002" +
                          "\000\004\027\ufe3e\001\002\000\004\035\u0988\001\002\000" +
                          "\004\037\054\001\002\000\004\036\u098a\001\002\000\004" +
                          "\043\u098b\001\002\000\006\004\u069b\017\u069a\001\002\000" +
                          "\004\027\ufdbe\001\002\000\004\037\112\001\002\000\004" +
                          "\043\u098f\001\002\000\006\013\u0992\017\u0990\001\002\000" +
                          "\004\042\u0999\001\002\000\004\027\ufdbf\001\002\000\004" +
                          "\042\u0993\001\002\000\004\035\u0994\001\002\000\004\037" +
                          "\054\001\002\000\004\036\u0996\001\002\000\004\043\u0997" +
                          "\001\002\000\004\017\u06a0\001\002\000\004\027\ufd99\001" +
                          "\002\000\004\037\026\001\002\000\004\043\u099b\001\002" +
                          "\000\004\013\u0232\001\002\000\004\027\ufd98\001\002\000" +
                          "\004\037\026\001\002\000\004\043\u099f\001\002\000\006" +
                          "\004\u0226\013\u0228\001\002\000\004\027\ufdbd\001\002\000" +
                          "\004\037\112\001\002\000\004\043\u09a3\001\002\000\010" +
                          "\013\u09a6\014\u09a5\017\u09a4\001\002\000\004\042\u09b4\001" +
                          "\002\000\004\042\u09ae\001\002\000\004\042\u09a8\001\002" +
                          "\000\004\027\ufe40\001\002\000\004\035\u09a9\001\002\000" +
                          "\004\037\054\001\002\000\004\036\u09ab\001\002\000\004" +
                          "\043\u09ac\001\002\000\006\014\u06d1\017\u06cf\001\002\000" +
                          "\004\027\ufdf8\001\002\000\004\035\u09af\001\002\000\006" +
                          "\033\067\044\071\001\002\000\004\036\u09b1\001\002\000" +
                          "\004\043\u09b2\001\002\000\006\013\u0992\017\u0990\001\002" +
                          "\000\004\027\ufdf7\001\002\000\004\037\026\001\002\000" +
                          "\004\043\u09b6\001\002\000\006\013\u0265\014\u0264\001\002" +
                          "\000\004\027\ufdf6\001\002\000\004\037\026\001\002\000" +
                          "\004\043\u09ba\001\002\000\010\004\u0250\013\u0252\014\u0251" +
                          "\001\002\000\004\027\ufe3d\001\002\000\004\035\u09bd\001" +
                          "\002\000\004\037\054\001\002\000\004\036\u09bf\001\002" +
                          "\000\004\043\u09c0\001\002\000\012\004\u0746\014\u0748\015" +
                          "\u0747\016\u0749\001\002\000\004\027\ufed2\001\002\000\004" +
                          "\035\u09c3\001\002\000\006\033\067\044\071\001\002\000" +
                          "\004\036\u09c5\001\002\000\004\043\u09c6\001\002\000\012" +
                          "\004\u09c9\013\u09cb\016\u09ca\017\u09c8\001\002\000\004\027" +
                          "\ufed1\001\002\000\004\042\u09eb\001\002\000\004\042\u09d6" +
                          "\001\002\000\004\042\u09d2\001\002\000\004\042\u09cc\001" +
                          "\002\000\004\035\u09cd\001\002\000\004\037\054\001\002" +
                          "\000\004\036\u09cf\001\002\000\004\043\u09d0\001\002\000" +
                          "\010\004\u070f\016\u0711\017\u070e\001\002\000\004\027\ufe47" +
                          "\001\002\000\004\044\u014b\001\002\000\004\043\u09d4\001" +
                          "\002\000\010\004\u0984\013\u0985\017\u0983\001\002\000\004" +
                          "\027\ufe46\001\002\000\004\037\112\001\002\000\004\043" +
                          "\u09d8\001\002\000\010\013\u09da\016\u09db\017\u09d9\001\002" +
                          "\000\004\042\u09e7\001\002\000\004\042\u09e1\001\002\000" +
                          "\004\042\u09dd\001\002\000\004\027\ufe48\001\002\000\004" +
                          "\044\u014b\001\002\000\004\043\u09df\001\002\000\006\013" +
                          "\u0992\017\u0990\001\002\000\004\027\ufdfd\001\002\000\004" +
                          "\035\u09e2\001\002\000\004\037\054\001\002\000\004\036" +
                          "\u09e4\001\002\000\004\043\u09e5\001\002\000\006\016\u071b" +
                          "\017\u0719\001\002\000\004\027\ufdfe\001\002\000\004\037" +
                          "\026\001\002\000\004\043\u09e9\001\002\000\006\013\u02b6" +
                          "\016\u02b5\001\002\000\004\027\ufdfc\001\002\000\004\037" +
                          "\026\001\002\000\004\043\u09ed\001\002\000\010\004\u02a4" +
                          "\013\u02a7\016\u02a6\001\002\000\004\027\ufe45\001\002\000" +
                          "\004\037\112\001\002\000\004\043\u09f1\001\002\000\012" +
                          "\013\u09f6\014\u09f4\016\u09f5\017\u09f2\001\002\000\004\042" +
                          "\u0a07\001\002\000\004\027\ufed3\001\002\000\004\042\u0a01" +
                          "\001\002\000\004\042\u09fd\001\002\000\004\042\u09f7\001" +
                          "\002\000\004\035\u09f8\001\002\000\004\037\054\001\002" +
                          "\000\004\036\u09fa\001\002\000\004\043\u09fb\001\002\000" +
                          "\010\014\u0760\016\u0761\017\u075e\001\002\000\004\027\ufe8c" +
                          "\001\002\000\004\044\u014b\001\002\000\004\043\u09ff\001" +
                          "\002\000\010\013\u09a6\014\u09a5\017\u09a4\001\002\000\004" +
                          "\027\ufe8a\001\002\000\004\035\u0a02\001\002\000\006\033" +
                          "\067\044\071\001\002\000\004\036\u0a04\001\002\000\004" +
                          "\043\u0a05\001\002\000\010\013\u09da\016\u09db\017\u09d9\001" +
                          "\002\000\004\027\ufe8b\001\002\000\004\037\026\001\002" +
                          "\000\004\043\u0a09\001\002\000\010\013\u02f8\014\u02f5\016" +
                          "\u02f7\001\002\000\004\027\ufe89\001\002\000\004\037\026" +
                          "\001\002\000\004\043\u0a0d\001\002\000\012\004\u02de\013" +
                          "\u02e1\014\u02df\016\u02e2\001\002\000\004\027\ufecf\001\002" +
                          "\000\004\044\u014b\001\002\000\004\043\u0a11\001\002\000" +
                          "\014\004\u0a13\013\u0a15\014\u0a14\017\u0a12\021\u0a17\001\002" +
                          "\000\004\042\u0a6b\001\002\000\004\042\u0a4f\001\002\000" +
                          "\004\042\u0a22\001\002\000\004\042\u0a1c\001\002\000\004" +
                          "\027\uff07\001\002\000\004\042\u0a18\001\002\000\004\022" +
                          "\u0a19\001\002\000\004\043\u0a1a\001\002\000\012\004\u0974" +
                          "\013\u0976\014\u0975\017\u0973\001\002\000\004\027\ufea5\001" +
                          "\002\000\004\035\u0a1d\001\002\000\004\037\054\001\002" +
                          "\000\004\036\u0a1f\001\002\000\004\043\u0a20\001\002\000" +
                          "\012\004\u07e9\014\u07ea\017\u07e8\021\u07ec\001\002\000\004" +
                          "\027\ufea4\001\002\000\004\035\u0a23\001\002\000\006\033" +
                          "\067\044\071\001\002\000\004\036\u0a25\001\002\000\004" +
                          "\043\u0a26\001\002\000\012\004\u0a29\013\u0a2a\017\u0a27\021" +
                          "\u0a2b\001\002\000\004\042\u0a4b\001\002\000\004\027\ufea3" +
                          "\001\002\000\004\042\u0a36\001\002\000\004\042\u0a30\001" +
                          "\002\000\004\042\u0a2c\001\002\000\004\022\u0a2d\001\002" +
                          "\000\004\043\u0a2e\001\002\000\010\004\u0984\013\u0985\017" +
                          "\u0983\001\002\000\004\027\ufe1b\001\002\000\004\035\u0a31" +
                          "\001\002\000\004\037\054\001\002\000\004\036\u0a33\001" +
                          "\002\000\004\043\u0a34\001\002\000\010\004\u07b1\017\u07b0" +
                          "\021\u07b3\001\002\000\004\027\ufe1a\001\002\000\004\037" +
                          "\112\001\002\000\004\043\u0a38\001\002\000\010\013\u0a3b" +
                          "\017\u0a39\021\u0a3c\001\002\000\004\042\u0a47\001\002\000" +
                          "\004\027\ufe1c\001\002\000\004\042\u0a41\001\002\000\004" +
                          "\042\u0a3d\001\002\000\004\022\u0a3e\001\002\000\004\043" +
                          "\u0a3f\001\002\000\006\013\u0992\017\u0990\001\002\000\004" +
                          "\027\ufddd\001\002\000\004\035\u0a42\001\002\000\004\037" +
                          "\054\001\002\000\004\036\u0a44\001\002\000\004\043\u0a45" +
                          "\001\002\000\006\017\u07bb\021\u07bd\001\002\000\004\027" +
                          "\ufddc\001\002\000\004\037\026\001\002\000\004\043\u0a49" +
                          "\001\002\000\006\013\u03d7\021\u03d8\001\002\000\004\027" +
                          "\ufddb\001\002\000\004\037\026\001\002\000\004\043\u0a4d" +
                          "\001\002\000\010\004\u03c6\013\u03c8\021\u03c9\001\002\000" +
                          "\004\027\ufe19\001\002\000\004\037\112\001\002\000\004" +
                          "\043\u0a51\001\002\000\012\013\u0a55\014\u0a53\017\u0a52\021" +
                          "\u0a56\001\002\000\004\042\u0a67\001\002\000\004\042\u0a61" +
                          "\001\002\000\004\027\ufea6\001\002\000\004\042\u0a5b\001" +
                          "\002\000\004\042\u0a57\001\002\000\004\022\u0a58\001\002" +
                          "\000\004\043\u0a59\001\002\000\010\013\u09a6\014\u09a5\017" +
                          "\u09a4\001\002\000\004\027\ufe68\001\002\000\004\035\u0a5c" +
                          "\001\002\000\004\037\054\001\002\000\004\036\u0a5e\001" +
                          "\002\000\004\043\u0a5f\001\002\000\010\014\u07fc\017\u07fb" +
                          "\021\u07fd\001\002\000\004\027\ufe67\001\002\000\004\035" +
                          "\u0a62\001\002\000\006\033\067\044\071\001\002\000\004" +
                          "\036\u0a64\001\002\000\004\043\u0a65\001\002\000\010\013" +
                          "\u0a3b\017\u0a39\021\u0a3c\001\002\000\004\027\ufe66\001\002" +
                          "\000\004\037\026\001\002\000\004\043\u0a69\001\002\000" +
                          "\010\013\u041a\014\u0418\021\u041b\001\002\000\004\027\ufe65" +
                          "\001\002\000\004\037\026\001\002\000\004\043\u0a6d\001" +
                          "\002\000\012\004\u0400\013\u0403\014\u0402\021\u0404\001\002" +
                          "\000\004\027\ufea2\001\002\000\004\035\u0a70\001\002\000" +
                          "\004\037\054\001\002\000\004\036\u0a72\001\002\000\004" +
                          "\043\u0a73\001\002\000\014\004\u08a5\014\u08a7\016\u08a9\017" +
                          "\u08a4\021\u08aa\001\002\000\004\027\uff09\001\002\000\004" +
                          "\027\uffd5\001\002\000\004\035\u0a77\001\002\000\006\033" +
                          "\067\044\071\001\002\000\004\036\u0a79\001\002\000\004" +
                          "\043\u0a7a\001\002\000\014\004\u0a7c\013\u0a7f\016\u0a7e\017" +
                          "\u0a7b\021\u0a80\001\002\000\004\042\u0ab4\001\002\000\004" +
                          "\042\u0a94\001\002\000\004\027\uffd4\001\002\000\004\042" +
                          "\u0a90\001\002\000\004\042\u0a89\001\002\000\004\042\u0a82" +
                          "\001\002\000\004\027\uff08\001\002\000\006\022\u0a83\023" +
                          "\u0a84\001\002\000\004\043\u0a87\001\002\000\004\043\u0a85" +
                          "\001\002\000\010\004\u0931\013\u0932\017\u0930\001\002\000" +
                          "\004\027\uff9d\001\002\000\012\004\u09c9\013\u09cb\016\u09ca" +
                          "\017\u09c8\001\002\000\004\027\ufeaf\001\002\000\004\035" +
                          "\u0a8a\001\002\000\004\037\054\001\002\000\004\036\u0a8c" +
                          "\001\002\000\004\043\u0a8d\001\002\000\012\004\u084d\016" +
                          "\u084f\017\u084c\021\u0851\001\002\000\004\027\ufeae\001\002" +
                          "\000\004\027\uff9c\001\002\000\004\044\u014b\001\002\000" +
                          "\004\043\u0a92\001\002\000\012\004\u0a29\013\u0a2a\017\u0a27" +
                          "\021\u0a2b\001\002\000\004\027\ufead\001\002\000\004\037" +
                          "\112\001\002\000\004\043\u0a96\001\002\000\012\013\u0a9a" +
                          "\016\u0a99\017\u0a97\021\u0a9c\001\002\000\004\042\u0aaf\001" +
                          "\002\000\004\027\ufeb0\001\002\000\004\042\u0aab\001\002" +
                          "\000\004\042\u0aa4\001\002\000\004\027\uff9e\001\002\000" +
                          "\004\042\u0a9d\001\002\000\006\022\u0a9e\023\u0a9f\001\002" +
                          "\000\004\043\u0aa2\001\002\000\004\043\u0aa0\001\002\000" +
                          "\006\013\u093f\017\u093d\001\002\000\004\027\uff7e\001\002" +
                          "\000\010\013\u09da\016\u09db\017\u09d9\001\002\000\004\027" +
                          "\ufe70\001\002\000\004\035\u0aa5\001\002\000\004\037\054" +
                          "\001\002\000\004\036\u0aa7\001\002\000\004\043\u0aa8\001" +
                          "\002\000\010\016\u0862\017\u0860\021\u0864\001\002\000\004" +
                          "\027\ufe6f\001\002\000\004\027\uff7d\001\002\000\004\044" +
                          "\u014b\001\002\000\004\043\u0aad\001\002\000\010\013\u0a3b" +
                          "\017\u0a39\021\u0a3c\001\002\000\004\027\ufe6e\001\002\000" +
                          "\004\037\026\001\002\000\004\043\u0ab1\001\002\000\010" +
                          "\013\u0550\016\u054f\021\u0552\001\002\000\004\027\uff7c\001" +
                          "\002\000\004\027\ufe6d\001\002\000\004\037\026\001\002" +
                          "\000\004\043\u0ab6\001\002\000\012\004\u0534\013\u0537\016" +
                          "\u0535\021\u0538\001\002\000\004\027\uff9b\001\002\000\004" +
                          "\027\ufeac\001\002\000\004\037\112\001\002\000\004\043" +
                          "\u0abb\001\002\000\014\013\u0abf\014\u0abd\016\u0abe\017\u0abc" +
                          "\021\u0ac2\001\002\000\004\042\u0adc\001\002\000\004\042" +
                          "\u0ad5\001\002\000\004\042\u0ad1\001\002\000\004\042\u0aca" +
                          "\001\002\000\004\027\uff0b\001\002\000\004\027\uffd7\001" +
                          "\002\000\004\042\u0ac3\001\002\000\006\022\u0ac4\023\u0ac5" +
                          "\001\002\000\004\043\u0ac8\001\002\000\004\043\u0ac6\001" +
                          "\002\000\010\013\u0953\014\u0952\017\u0951\001\002\000\004" +
                          "\027\uffc2\001\002\000\012\013\u09f6\014\u09f4\016\u09f5\017" +
                          "\u09f2\001\002\000\004\027\ufeec\001\002\000\004\035\u0acb" +
                          "\001\002\000\004\037\054\001\002\000\004\036\u0acd\001" +
                          "\002\000\004\043\u0ace\001\002\000\012\014\u08c1\016\u08c3" +
                          "\017\u08c0\021\u08c5\001\002\000\004\027\ufeeb\001\002\000" +
                          "\004\027\uffc1\001\002\000\004\044\u014b\001\002\000\004" +
                          "\043\u0ad3\001\002\000\012\013\u0a55\014\u0a53\017\u0a52\021" +
                          "\u0a56\001\002\000\004\027\ufee9\001\002\000\004\035\u0ad6" +
                          "\001\002\000\006\033\067\044\071\001\002\000\004\036" +
                          "\u0ad8\001\002\000\004\043\u0ad9\001\002\000\012\013\u0a9a" +
                          "\016\u0a99\017\u0a97\021\u0a9c\001\002\000\004\027\ufeea\001" +
                          "\002\000\004\027\uffc0\001\002\000\004\037\026\001\002" +
                          "\000\004\043\u0ade\001\002\000\012\013\u05b2\014\u05af\016" +
                          "\u05b1\021\u05b4\001\002\000\004\027\uffbf\001\002\000\004" +
                          "\027\ufee8\001\002\000\004\037\026\001\002\000\004\043" +
                          "\u0ae3\001\002\000\014\004\u058c\013\u058f\014\u058d\016\u0590" +
                          "\021\u0592\001\002\000\004\027\uff06\001\002\000\004\027" +
                          "\uffd3\001\002\000\006\022\u0ae7\023\u0ae8\001\002\000\004" +
                          "\043\u0b4f\001\002\000\004\043\u0ae9\001\002\000\014\004" +
                          "\u0aeb\013\u0aef\014\u0aee\015\u0aec\017\u0aea\001\002\000\004" +
                          "\042\u0b4b\001\002\000\004\042\u0b2d\001\002\000\004\042" +
                          "\u0b27\001\002\000\004\027\ufff5\001\002\000\004\042\u0af6" +
                          "\001\002\000\004\042\u0af0\001\002\000\004\035\u0af1\001" +
                          "\002\000\004\037\054\001\002\000\004\036\u0af3\001\002" +
                          "\000\004\043\u0af4\001\002\000\012\004\u060a\014\u060c\015" +
                          "\u060b\017\u0609\001\002\000\004\027\uffea\001\002\000\004" +
                          "\035\u0af7\001\002\000\006\033\067\044\071\001\002\000" +
                          "\004\036\u0af9\001\002\000\004\043\u0afa\001\002\000\012" +
                          "\004\u0afd\013\u0aff\015\u0afe\017\u0afc\001\002\000\004\027" +
                          "\uffe9\001\002\000\004\042\u0b23\001\002\000\004\042\u0b0c" +
                          "\001\002\000\004\042\u0b06\001\002\000\004\042\u0b00\001" +
                          "\002\000\004\035\u0b01\001\002\000\004\037\054\001\002" +
                          "\000\004\036\u0b03\001\002\000\004\043\u0b04\001\002\000" +
                          "\010\004\u0614\015\u0615\017\u0613\001\002\000\004\027\uffb9" +
                          "\001\002\000\004\035\u0b07\001\002\000\004\026\103\001" +
                          "\002\000\004\036\u0b09\001\002\000\004\043\u0b0a\001\002" +
                          "\000\010\004\u0931\013\u0932\017\u0930\001\002\000\004\027" +
                          "\uffb7\001\002\000\004\037\112\001\002\000\004\043\u0b0e" +
                          "\001\002\000\010\013\u0b12\015\u0b10\017\u0b0f\001\002\000" +
                          "\004\042\u0b1f\001\002\000\004\042\u0b19\001\002\000\004" +
                          "\027\uffba\001\002\000\004\042\u0b13\001\002\000\004\035" +
                          "\u0b14\001\002\000\004\037\054\001\002\000\004\036\u0b16" +
                          "\001\002\000\004\043\u0b17\001\002\000\006\015\u062f\017" +
                          "\u062e\001\002\000\004\027\uff93\001\002\000\004\035\u0b1a" +
                          "\001\002\000\004\026\103\001\002\000\004\036\u0b1c\001" +
                          "\002\000\004\043\u0b1d\001\002\000\006\013\u093f\017\u093d" +
                          "\001\002\000\004\027\uff91\001\002\000\004\037\026\001" +
                          "\002\000\004\043\u0b21\001\002\000\006\013\353\015\352" +
                          "\001\002\000\004\027\uff92\001\002\000\004\037\026\001" +
                          "\002\000\004\043\u0b25\001\002\000\010\004\304\013\307" +
                          "\015\306\001\002\000\004\027\uffb8\001\002\000\004\035" +
                          "\u0b28\001\002\000\004\026\103\001\002\000\004\036\u0b2a" +
                          "\001\002\000\004\043\u0b2b\001\002\000\012\004\u0922\013" +
                          "\u0924\014\u0923\017\u0920\001\002\000\004\027\uffe7\001\002" +
                          "\000\004\037\112\001\002\000\004\043\u0b2f\001\002\000" +
                          "\012\013\u0b33\014\u0b32\015\u0b31\017\u0b30\001\002\000\004" +
                          "\042\u0b47\001\002\000\004\042\u0b41\001\002\000\004\042" +
                          "\u0b3b\001\002\000\004\042\u0b35\001\002\000\004\027\uffeb" +
                          "\001\002\000\004\035\u0b36\001\002\000\004\037\054\001" +
                          "\002\000\004\036\u0b38\001\002\000\004\043\u0b39\001\002" +
                          "\000\010\014\u0667\015\u0666\017\u0665\001\002\000\004\027" +
                          "\uffd2\001\002\000\004\035\u0b3c\001\002\000\006\033\067" +
                          "\044\071\001\002\000\004\036\u0b3e\001\002\000\004\043" +
                          "\u0b3f\001\002\000\010\013\u0b12\015\u0b10\017\u0b0f\001\002" +
                          "\000\004\027\uffd1\001\002\000\004\035\u0b42\001\002\000" +
                          "\004\026\103\001\002\000\004\036\u0b44\001\002\000\004" +
                          "\043\u0b45\001\002\000\010\013\u0953\014\u0952\017\u0951\001" +
                          "\002\000\004\027\uffcf\001\002\000\004\037\026\001\002" +
                          "\000\004\043\u0b49\001\002\000\010\013\u0125\014\u0124\015" +
                          "\u0123\001\002\000\004\027\uffd0\001\002\000\004\037\026" +
                          "\001\002\000\004\043\u0b4d\001\002\000\012\004\045\013" +
                          "\051\014\047\015\046\001\002\000\004\027\uffe8\001\002" +
                          "\000\016\004\u0b51\013\u0b55\014\u0b53\015\u0b52\016\u0b54\017" +
                          "\u0b50\001\002\000\004\042\u0c29\001\002\000\004\042\u0c06" +
                          "\001\002\000\004\042\u0c00\001\002\000\004\042\u0bc5\001" +
                          "\002\000\004\042\u0b5d\001\002\000\004\042\u0b57\001\002" +
                          "\000\004\027\uff35\001\002\000\004\035\u0b58\001\002\000" +
                          "\004\037\054\001\002\000\004\036\u0b5a\001\002\000\004" +
                          "\043\u0b5b\001\002\000\014\004\u067f\014\u0681\015\u0680\016" +
                          "\u0683\017\u067e\001\002\000\004\027\uff28\001\002\000\004" +
                          "\044\u014b\001\002\000\004\043\u0b5f\001\002\000\014\004" +
                          "\u0b62\013\u0b65\014\u0b64\015\u0b63\017\u0b61\001\002\000\004" +
                          "\027\uff26\001\002\000\004\042\u0bc1\001\002\000\004\042" +
                          "\u0ba3\001\002\000\004\042\u0b9d\001\002\000\004\042\u0b6c" +
                          "\001\002\000\004\042\u0b66\001\002\000\004\035\u0b67\001" +
                          "\002\000\004\037\054\001\002\000\004\036\u0b69\001\002" +
                          "\000\004\043\u0b6a\001\002\000\012\004\u0688\014\u068a\015" +
                          "\u0689\017\u0687\001\002\000\004\027\ufedc\001\002\000\004" +
                          "\035\u0b6d\001\002\000\006\033\067\044\071\001\002\000" +
                          "\004\036\u0b6f\001\002\000\004\043\u0b70\001\002\000\012" +
                          "\004\u0b72\013\u0b74\015\u0b73\017\u0b71\001\002\000\004\042" +
                          "\u0b99\001\002\000\004\042\u0b82\001\002\000\004\042\u0b7c" +
                          "\001\002\000\004\042\u0b76\001\002\000\004\027\ufedb\001" +
                          "\002\000\004\035\u0b77\001\002\000\004\037\054\001\002" +
                          "\000\004\036\u0b79\001\002\000\004\043\u0b7a\001\002\000" +
                          "\010\004\u0692\015\u0693\017\u0691\001\002\000\004\027\ufe4f" +
                          "\001\002\000\004\035\u0b7d\001\002\000\004\026\103\001" +
                          "\002\000\004\036\u0b7f\001\002\000\004\043\u0b80\001\002" +
                          "\000\010\004\u0984\013\u0985\017\u0983\001\002\000\004\027" +
                          "\ufe4d\001\002\000\004\037\112\001\002\000\004\043\u0b84" +
                          "\001\002\000\010\013\u0b87\015\u0b86\017\u0b85\001\002\000" +
                          "\004\042\u0b95\001\002\000\004\042\u0b8f\001\002\000\004" +
                          "\042\u0b89\001\002\000\004\027\ufe50\001\002\000\004\035" +
                          "\u0b8a\001\002\000\004\037\054\001\002\000\004\036\u0b8c" +
                          "\001\002\000\004\043\u0b8d\001\002\000\006\015\u06ad\017" +
                          "\u06ac\001\002\000\004\027\ufe04\001\002\000\004\035\u0b90" +
                          "\001\002\000\004\026\103\001\002\000\004\036\u0b92\001" +
                          "\002\000\004\043\u0b93\001\002\000\006\013\u0992\017\u0990" +
                          "\001\002\000\004\027\ufe02\001\002\000\004\037\026\001" +
                          "\002\000\004\043\u0b97\001\002\000\006\013\u023d\015\u023c" +
                          "\001\002\000\004\027\ufe03\001\002\000\004\037\026\001" +
                          "\002\000\004\043\u0b9b\001\002\000\010\004\u0217\013\u021a" +
                          "\015\u0218\001\002\000\004\027\ufe4e\001\002\000\004\035" +
                          "\u0b9e\001\002\000\004\026\103\001\002\000\004\036\u0ba0" +
                          "\001\002\000\004\043\u0ba1\001\002\000\012\004\u0974\013" +
                          "\u0976\014\u0975\017\u0973\001\002\000\004\027\ufed9\001\002" +
                          "\000\004\037\112\001\002\000\004\043\u0ba5\001\002\000" +
                          "\012\013\u0baa\014\u0ba8\015\u0ba7\017\u0ba6\001\002\000\004" +
                          "\042\u0bbd\001\002\000\004\042\u0bb7\001\002\000\004\042" +
                          "\u0bb1\001\002\000\004\027\ufedd\001\002\000\004\042\u0bab" +
                          "\001\002\000\004\035\u0bac\001\002\000\004\037\054\001" +
                          "\002\000\004\036\u0bae\001\002\000\004\043\u0baf\001\002" +
                          "\000\010\014\u06e6\015\u06e5\017\u06e3\001\002\000\004\027" +
                          "\ufe94\001\002\000\004\035\u0bb2\001\002\000\006\033\067" +
                          "\044\071\001\002\000\004\036\u0bb4\001\002\000\004\043" +
                          "\u0bb5\001\002\000\010\013\u0b87\015\u0b86\017\u0b85\001\002" +
                          "\000\004\027\ufe93\001\002\000\004\035\u0bb8\001\002\000" +
                          "\004\026\103\001\002\000\004\036\u0bba\001\002\000\004" +
                          "\043\u0bbb\001\002\000\010\013\u09a6\014\u09a5\017\u09a4\001" +
                          "\002\000\004\027\ufe91\001\002\000\004\037\026\001\002" +
                          "\000\004\043\u0bbf\001\002\000\010\013\u0278\014\u0277\015" +
                          "\u0275\001\002\000\004\027\ufe92\001\002\000\004\037\026" +
                          "\001\002\000\004\043\u0bc3\001\002\000\012\004\u0207\013" +
                          "\u020a\014\u0209\015\u0208\001\002\000\004\027\ufeda\001\002" +
                          "\000\004\035\u0bc6\001\002\000\006\033\067\044\071\001" +
                          "\002\000\004\036\u0bc8\001\002\000\004\043\u0bc9\001\002" +
                          "\000\014\004\u0bcb\013\u0bce\015\u0bcc\016\u0bcd\017\u0bca\001" +
                          "\002\000\004\042\u0bfc\001\002\000\004\042\u0be0\001\002" +
                          "\000\004\042\u0bda\001\002\000\004\042\u0bd6\001\002\000" +
                          "\004\042\u0bd0\001\002\000\004\027\uff27\001\002\000\004" +
                          "\035\u0bd1\001\002\000\004\037\054\001\002\000\004\036" +
                          "\u0bd3\001\002\000\004\043\u0bd4\001\002\000\012\004\u0701" +
                          "\015\u0702\016\u0704\017\u0700\001\002\000\004\027\ufee1\001" +
                          "\002\000\004\044\u014b\001\002\000\004\043\u0bd8\001\002" +
                          "\000\012\004\u0b72\013\u0b74\015\u0b73\017\u0b71\001\002\000" +
                          "\004\027\ufee0\001\002\000\004\035\u0bdb\001\002\000\004" +
                          "\026\103\001\002\000\004\036\u0bdd\001\002\000\004\043" +
                          "\u0bde\001\002\000\012\004\u09c9\013\u09cb\016\u09ca\017\u09c8" +
                          "\001\002\000\004\027\ufede\001\002\000\004\037\112\001" +
                          "\002\000\004\043\u0be2\001\002\000\012\013\u0be6\015\u0be5" +
                          "\016\u0be7\017\u0be3\001\002\000\004\042\u0bf8\001\002\000" +
                          "\004\027\ufee2\001\002\000\004\042\u0bf2\001\002\000\004" +
                          "\042\u0bec\001\002\000\004\042\u0be8\001\002\000\004\044" +
                          "\u014b\001\002\000\004\043\u0bea\001\002\000\010\013\u0b87" +
                          "\015\u0b86\017\u0b85\001\002\000\004\027\ufe97\001\002\000" +
                          "\004\035\u0bed\001\002\000\004\037\054\001\002\000\004" +
                          "\036\u0bef\001\002\000\004\043\u0bf0\001\002\000\010\015" +
                          "\u072c\016\u072e\017\u072b\001\002\000\004\027\ufe98\001\002" +
                          "\000\004\035\u0bf3\001\002\000\004\026\103\001\002\000" +
                          "\004\036\u0bf5\001\002\000\004\043\u0bf6\001\002\000\010" +
                          "\013\u09da\016\u09db\017\u09d9\001\002\000\004\027\ufe95\001" +
                          "\002\000\004\037\026\001\002\000\004\043\u0bfa\001\002" +
                          "\000\010\013\u02c7\015\u02c6\016\u02c8\001\002\000\004\027" +
                          "\ufe96\001\002\000\004\037\026\001\002\000\004\043\u0bfe" +
                          "\001\002\000\012\004\u0290\013\u0292\015\u0291\016\u0293\001" +
                          "\002\000\004\027\ufedf\001\002\000\004\035\u0c01\001\002" +
                          "\000\004\026\103\001\002\000\004\036\u0c03\001\002\000" +
                          "\004\043\u0c04\001\002\000\014\004\u096b\013\u096d\014\u096c" +
                          "\016\u096e\017\u096a\001\002\000\004\027\uff24\001\002\000" +
                          "\004\037\112\001\002\000\004\043\u0c08\001\002\000\014" +
                          "\013\u0c0e\014\u0c0b\015\u0c0a\016\u0c0d\017\u0c09\001\002\000" +
                          "\004\042\u0c25\001\002\000\004\042\u0c1f\001\002\000\004" +
                          "\042\u0c19\001\002\000\004\027\uff29\001\002\000\004\042" +
                          "\u0c15\001\002\000\004\042\u0c0f\001\002\000\004\035\u0c10" +
                          "\001\002\000\004\037\054\001\002\000\004\036\u0c12\001" +
                          "\002\000\004\043\u0c13\001\002\000\012\014\u0775\015\u0774" +
                          "\016\u0776\017\u0773\001\002\000\004\027\uff05\001\002\000" +
                          "\004\044\u014b\001\002\000\004\043\u0c17\001\002\000\012" +
                          "\013\u0baa\014\u0ba8\015\u0ba7\017\u0ba6\001\002\000\004\027" +
                          "\uff03\001\002\000\004\035\u0c1a\001\002\000\006\033\067" +
                          "\044\071\001\002\000\004\036\u0c1c\001\002\000\004\043" +
                          "\u0c1d\001\002\000\012\013\u0be6\015\u0be5\016\u0be7\017\u0be3" +
                          "\001\002\000\004\027\uff04\001\002\000\004\035\u0c20\001" +
                          "\002\000\004\026\103\001\002\000\004\036\u0c22\001\002" +
                          "\000\004\043\u0c23\001\002\000\012\013\u09f6\014\u09f4\016" +
                          "\u09f5\017\u09f2\001\002\000\004\027\uff01\001\002\000\004" +
                          "\037\026\001\002\000\004\043\u0c27\001\002\000\012\013" +
                          "\u030e\014\u030d\015\u030c\016\u030f\001\002\000\004\027\uff02" +
                          "\001\002\000\004\037\026\001\002\000\004\043\u0c2b\001" +
                          "\002\000\014\004\u0139\013\u013e\014\u013c\015\u013a\016\u013d" +
                          "\001\002\000\004\027\uff25\001\002\000\004\035\u0c2e\001" +
                          "\002\000\006\033\067\044\071\001\002\000\004\036\u0c30" +
                          "\001\002\000\004\043\u0c31\001\002\000\016\004\u0c35\013" +
                          "\u0c38\015\u0c36\016\u0c37\017\u0c33\021\u0c39\001\002\000\004" +
                          "\027\ufff3\001\002\000\004\042\u0ce2\001\002\000\004\027" +
                          "\uff33\001\002\000\004\042\u0c88\001\002\000\004\042\u0c81" +
                          "\001\002\000\004\042\u0c48\001\002\000\004\042\u0c41\001" +
                          "\002\000\004\042\u0c3a\001\002\000\006\022\u0c3b\023\u0c3c" +
                          "\001\002\000\004\043\u0c3f\001\002\000\004\043\u0c3d\001" +
                          "\002\000\012\004\u0afd\013\u0aff\015\u0afe\017\u0afc\001\002" +
                          "\000\004\027\uffe0\001\002\000\014\004\u0bcb\013\u0bce\015" +
                          "\u0bcc\016\u0bcd\017\u0bca\001\002\000\004\027\uff1c\001\002" +
                          "\000\004\035\u0c42\001\002\000\004\037\054\001\002\000" +
                          "\004\036\u0c44\001\002\000\004\043\u0c45\001\002\000\014" +
                          "\004\u0836\015\u0837\016\u083a\017\u0835\021\u083b\001\002\000" +
                          "\004\027\uffdf\001\002\000\004\027\uff1b\001\002\000\004" +
                          "\044\u014b\001\002\000\004\043\u0c4a\001\002\000\014\004" +
                          "\u0c4c\013\u0c4e\015\u0c4d\017\u0c4b\021\u0c50\001\002\000\004" +
                          "\042\u0c7d\001\002\000\004\042\u0c61\001\002\000\004\042" +
                          "\u0c5b\001\002\000\004\042\u0c55\001\002\000\004\027\uff1a" +
                          "\001\002\000\004\042\u0c51\001\002\000\004\022\u0c52\001" +
                          "\002\000\004\043\u0c53\001\002\000\012\004\u0b72\013\u0b74" +
                          "\015\u0b73\017\u0b71\001\002\000\004\027\ufeb9\001\002\000" +
                          "\004\035\u0c56\001\002\000\004\037\054\001\002\000\004" +
                          "\036\u0c58\001\002\000\004\043\u0c59\001\002\000\012\004" +
                          "\u07a3\015\u07a4\017\u07a2\021\u07a6\001\002\000\004\027\ufeb8" +
                          "\001\002\000\004\035\u0c5c\001\002\000\004\026\103\001" +
                          "\002\000\004\036\u0c5e\001\002\000\004\043\u0c5f\001\002" +
                          "\000\012\004\u0a29\013\u0a2a\017\u0a27\021\u0a2b\001\002\000" +
                          "\004\027\ufeb6\001\002\000\004\037\112\001\002\000\004" +
                          "\043\u0c63\001\002\000\012\013\u0c67\015\u0c65\017\u0c64\021" +
                          "\u0c68\001\002\000\004\042\u0c79\001\002\000\004\042\u0c73" +
                          "\001\002\000\004\027\ufeba\001\002\000\004\042\u0c6d\001" +
                          "\002\000\004\042\u0c69\001\002\000\004\022\u0c6a\001\002" +
                          "\000\004\043\u0c6b\001\002\000\010\013\u0b87\015\u0b86\017" +
                          "\u0b85\001\002\000\004\027\ufe78\001\002\000\004\035\u0c6e" +
                          "\001\002\000\004\037\054\001\002\000\004\036\u0c70\001" +
                          "\002\000\004\043\u0c71\001\002\000\010\015\u07ce\017\u07cd" +
                          "\021\u07d0\001\002\000\004\027\ufe77\001\002\000\004\035" +
                          "\u0c74\001\002\000\004\026\103\001\002\000\004\036\u0c76" +
                          "\001\002\000\004\043\u0c77\001\002\000\010\013\u0a3b\017" +
                          "\u0a39\021\u0a3c\001\002\000\004\027\ufe75\001\002\000\004" +
                          "\037\026\001\002\000\004\043\u0c7b\001\002\000\010\013" +
                          "\u03e9\015\u03e7\021\u03ea\001\002\000\004\027\ufe76\001\002" +
                          "\000\004\037\026\001\002\000\004\043\u0c7f\001\002\000" +
                          "\012\004\u03b2\013\u03b5\015\u03b4\021\u03b6\001\002\000\004" +
                          "\027\ufeb7\001\002\000\004\035\u0c82\001\002\000\004\026" +
                          "\103\001\002\000\004\036\u0c84\001\002\000\004\043\u0c85" +
                          "\001\002\000\014\004\u0a7c\013\u0a7f\016\u0a7e\017\u0a7b\021" +
                          "\u0a80\001\002\000\004\027\uffdd\001\002\000\004\027\uff18" +
                          "\001\002\000\004\037\112\001\002\000\004\043\u0c8a\001" +
                          "\002\000\014\013\u0c8e\015\u0c8c\016\u0c8f\017\u0c8b\021\u0c90" +
                          "\001\002\000\004\042\u0cdd\001\002\000\004\042\u0ca4\001" +
                          "\002\000\004\027\uffe1\001\002\000\004\042\u0c9d\001\002" +
                          "\000\004\042\u0c99\001\002\000\004\042\u0c92\001\002\000" +
                          "\004\027\uff1d\001\002\000\006\022\u0c93\023\u0c94\001\002" +
                          "\000\004\043\u0c97\001\002\000\004\043\u0c95\001\002\000" +
                          "\010\013\u0b12\015\u0b10\017\u0b0f\001\002\000\004\027\uffca" +
                          "\001\002\000\012\013\u0be6\015\u0be5\016\u0be7\017\u0be3\001" +
                          "\002\000\004\027\ufefb\001\002\000\004\044\u014b\001\002" +
                          "\000\004\043\u0c9b\001\002\000\012\013\u0c67\015\u0c65\017" +
                          "\u0c64\021\u0c68\001\002\000\004\027\ufef9\001\002\000\004" +
                          "\035\u0c9e\001\002\000\004\037\054\001\002\000\004\036" +
                          "\u0ca0\001\002\000\004\043\u0ca1\001\002\000\012\015\u087f" +
                          "\016\u0880\017\u087d\021\u0882\001\002\000\004\027\ufefa\001" +
                          "\002\000\004\027\uffc9\001\002\000\004\035\u0ca5\001\002" +
                          "\000\004\026\103\001\002\000\004\036\u0ca7\001\002\000" +
                          "\004\043\u0ca8\001\002\000\014\013\u0cac\015\u0cab\016\u056a" +
                          "\017\u0ca9\021\u0cae\001\002\000\004\042\u0cd2\001\002\000" +
                          "\004\027\ufef7\001\002\000\004\042\u0cc5\001\002\000\004" +
                          "\042\u0cb0\001\002\000\004\027\uffc7\001\002\000\004\042" +
                          "\u0caf\001\002\000\006\022\u056f\023\u0a9f\001\002\000\004" +
                          "\035\u0cb1\001\002\000\004\037\054\001\002\000\004\036" +
                          "\u0cb3\001\002\000\004\043\u0cb4\001\002\000\012\015\u0cb6" +
                          "\016\u04a3\017\u0cb5\021\u0cb7\001\002\000\004\042\u0cc0\001" +
                          "\002\000\004\042\u0cb9\001\002\000\004\042\u0cb8\001\002" +
                          "\000\006\022\u04a6\023\u0867\001\002\000\004\035\u0cba\001" +
                          "\002\000\004\026\103\001\002\000\004\036\u0cbc\001\002" +
                          "\000\004\043\u0cbd\001\002\000\006\016\u0491\021\u0cbe\001" +
                          "\002\000\004\042\u0cbf\001\002\000\004\022\u0494\001\002" +
                          "\000\004\037\026\001\002\000\004\043\u0cc2\001\002\000" +
                          "\004\021\u0cc3\001\002\000\004\042\u0cc4\001\002\000\004" +
                          "\023\u0495\001\002\000\004\035\u0cc6\001\002\000\004\026" +
                          "\103\001\002\000\004\036\u0cc8\001\002\000\004\043\u0cc9" +
                          "\001\002\000\010\013\u0cca\016\u054f\021\u0ccb\001\002\000" +
                          "\004\042\u0ccd\001\002\000\004\042\u0ccc\001\002\000\004" +
                          "\022\u0554\001\002\000\004\035\u0cce\001\002\000\004\037" +
                          "\054\001\002\000\004\036\u0cd0\001\002\000\004\043\u0cd1" +
                          "\001\002\000\006\016\u0491\021\u0cbe\001\002\000\004\037" +
                          "\026\001\002\000\004\043\u0cd4\001\002\000\006\013\u0cd5" +
                          "\021\u0cd6\001\002\000\004\042\u0cd8\001\002\000\004\042" +
                          "\u0cd7\001\002\000\004\023\u0555\001\002\000\004\035\u0cd9" +
                          "\001\002\000\004\037\054\001\002\000\004\036\u0cdb\001" +
                          "\002\000\004\043\u0cdc\001\002\000\004\021\u0cc3\001\002" +
                          "\000\004\037\026\001\002\000\004\043\u0cdf\001\002\000" +
                          "\012\013\u056b\015\u0569\016\u056a\021\u056c\001\002\000\004" +
                          "\027\ufef8\001\002\000\004\027\uffc8\001\002\000\004\037" +
                          "\026\001\002\000\004\043\u0ce4\001\002\000\014\004\u0515" +
                          "\013\u0519\015\u0516\016\u0518\021\u051a\001\002\000\004\027" +
                          "\uffde\001\002\000\004\027\uff19\001\002\000\004\044\u014b" +
                          "\001\002\000\004\043\u0ce9\001\002\000\016\004\u0ceb\013" +
                          "\u0cef\014\u0ced\015\u0cec\017\u0cea\021\u0cf0\001\002\000\004" +
                          "\042\u0d2a\001\002\000\004\042\u0d07\001\002\000\004\042" +
                          "\u0d01\001\002\000\004\042\u0cfb\001\002\000\004\027\uff32" +
                          "\001\002\000\004\042\u0cf5\001\002\000\004\042\u0cf1\001" +
                          "\002\000\004\022\u0cf2\001\002\000\004\043\u0cf3\001\002" +
                          "\000\014\004\u0b62\013\u0b65\014\u0b64\015\u0b63\017\u0b61\001" +
                          "\002\000\004\027\uff16\001\002\000\004\035\u0cf6\001\002" +
                          "\000\004\037\054\001\002\000\004\036\u0cf8\001\002\000" +
                          "\004\043\u0cf9\001\002\000\014\004\u0794\014\u0796\015\u0795" +
                          "\017\u0793\021\u0798\001\002\000\004\027\uff15\001\002\000" +
                          "\004\035\u0cfc\001\002\000\006\033\067\044\071\001\002" +
                          "\000\004\036\u0cfe\001\002\000\004\043\u0cff\001\002\000" +
                          "\014\004\u0c4c\013\u0c4e\015\u0c4d\017\u0c4b\021\u0c50\001\002" +
                          "\000\004\027\uff14\001\002\000\004\035\u0d02\001\002\000" +
                          "\004\026\103\001\002\000\004\036\u0d04\001\002\000\004" +
                          "\043\u0d05\001\002\000\014\004\u0a13\013\u0a15\014\u0a14\017" +
                          "\u0a12\021\u0a17\001\002\000\004\027\uff12\001\002\000\004" +
                          "\037\112\001\002\000\004\043\u0d09\001\002\000\014\013" +
                          "\u0d0d\014\u0d0c\015\u0d0b\017\u0d0a\021\u0d0f\001\002\000\004" +
                          "\042\u0d26\001\002\000\004\042\u0d20\001\002\000\004\042" +
                          "\u0d1a\001\002\000\004\042\u0d14\001\002\000\004\027\uff17" +
                          "\001\002\000\004\042\u0d10\001\002\000\004\022\u0d11\001" +
                          "\002\000\004\043\u0d12\001\002\000\012\013\u0baa\014\u0ba8" +
                          "\015\u0ba7\017\u0ba6\001\002\000\004\027\ufef6\001\002\000" +
                          "\004\035\u0d15\001\002\000\004\037\054\001\002\000\004" +
                          "\036\u0d17\001\002\000\004\043\u0d18\001\002\000\012\014" +
                          "\u0815\015\u0814\017\u0813\021\u0817\001\002\000\004\027\ufef5" +
                          "\001\002\000\004\035\u0d1b\001\002\000\006\033\067\044" +
                          "\071\001\002\000\004\036\u0d1d\001\002\000\004\043\u0d1e" +
                          "\001\002\000\012\013\u0c67\015\u0c65\017\u0c64\021\u0c68\001" +
                          "\002\000\004\027\ufef4\001\002\000\004\035\u0d21\001\002" +
                          "\000\004\026\103\001\002\000\004\036\u0d23\001\002\000" +
                          "\004\043\u0d24\001\002\000\012\013\u0a55\014\u0a53\017\u0a52" +
                          "\021\u0a56\001\002\000\004\027\ufef2\001\002\000\004\037" +
                          "\026\001\002\000\004\043\u0d28\001\002\000\012\013\u0432" +
                          "\014\u0430\015\u042f\021\u0433\001\002\000\004\027\ufef3\001" +
                          "\002\000\004\037\026\001\002\000\004\043\u0d2c\001\002" +
                          "\000\014\004\u032a\013\u032e\014\u032c\015\u032b\021\u032f\001" +
                          "\002\000\004\027\uff13\001\002\000\010\003\u0d2f\006\005" +
                          "\020\u0d31\001\002\000\010\003\u0d2f\006\005\020\u0d31\001" +
                          "\002\000\004\002\uffff\001\002\000\004\033\u0d33\001\002" +
                          "\000\004\002\ufffd\001\002\000\004\037\u0d34\001\002\000" +
                          "\004\034\u0d35\001\002\000\004\043\u0d36\001\002\000\010" +
                          "\002\ufffa\003\u0d37\020\u0d31\001\002\000\006\003\u0d37\020" +
                          "\u0d31\001\002\000\004\002\ufffb\001\002\000\004\002\ufff9" +
                          "\001\002\000\004\002\ufffc\001\002\000\004\037\112\001" +
                          "\002\000\004\043\u0d3d\001\002\000\016\013\u0d43\014\u0d41" +
                          "\015\u0d40\016\u0d42\017\u0d3e\021\u0d45\001\002\000\004\042" +
                          "\u0d66\001\002\000\004\027\ufff6\001\002\000\004\042\u0d5f" +
                          "\001\002\000\004\042\u0d58\001\002\000\004\042\u0d54\001" +
                          "\002\000\004\042\u0d4d\001\002\000\004\027\uff36\001\002" +
                          "\000\004\042\u0d46\001\002\000\006\022\u0d47\023\u0d48\001" +
                          "\002\000\004\043\u0d4b\001\002\000\004\043\u0d49\001\002" +
                          "\000\012\013\u0b33\014\u0b32\015\u0b31\017\u0b30\001\002\000" +
                          "\004\027\ufff0\001\002\000\014\013\u0c0e\014\u0c0b\015\u0c0a" +
                          "\016\u0c0d\017\u0c09\001\002\000\004\027\uff2f\001\002\000" +
                          "\004\035\u0d4e\001\002\000\004\037\054\001\002\000\004" +
                          "\036\u0d50\001\002\000\004\043\u0d51\001\002\000\014\014" +
                          "\u08e8\015\u08e7\016\u08e9\017\u08e5\021\u08eb\001\002\000\004" +
                          "\027\uffef\001\002\000\004\027\uff2e\001\002\000\004\044" +
                          "\u014b\001\002\000\004\043\u0d56\001\002\000\014\013\u0d0d" +
                          "\014\u0d0c\015\u0d0b\017\u0d0a\021\u0d0f\001\002\000\004\027" +
                          "\uff2c\001\002\000\004\035\u0d59\001\002\000\006\033\067" +
                          "\044\071\001\002\000\004\036\u0d5b\001\002\000\004\043" +
                          "\u0d5c\001\002\000\014\013\u0c8e\015\u0c8c\016\u0c8f\017\u0c8b" +
                          "\021\u0c90\001\002\000\004\027\uffee\001\002\000\004\027" +
                          "\uff2d\001\002\000\004\035\u0d60\001\002\000\004\026\103" +
                          "\001\002\000\004\036\u0d62\001\002\000\004\043\u0d63\001" +
                          "\002\000\014\013\u0abf\014\u0abd\016\u0abe\017\u0abc\021\u0ac2" +
                          "\001\002\000\004\027\uff2a\001\002\000\004\027\uffec\001" +
                          "\002\000\004\037\026\001\002\000\004\043\u0d68\001\002" +
                          "\000\014\013\u05d4\014\u05d2\015\u05d1\016\u05d3\021\u05d6\001" +
                          "\002\000\004\027\uffed\001\002\000\004\027\uff2b\001\002" +
                          "\000\012\004\u0d6c\011\u0d70\012\u0d6f\015\u0d6d\001\002\000" +
                          "\004\042\u0e5b\001\002\000\004\042\u0e34\001\002\000\004" +
                          "\027\u0e31\001\002\000\004\042\u0df8\001\002\000\004\042" +
                          "\u0d71\001\002\000\004\035\u0d72\001\002\000\004\037\u0d73" +
                          "\001\002\000\006\036\ufd37\041\u0df6\001\002\000\004\036" +
                          "\u0d75\001\002\000\004\043\u0d76\001\002\000\010\004\u0d77" +
                          "\012\u0d79\015\u0d78\001\002\000\004\042\u0de4\001\002\000" +
                          "\004\042\u0dcc\001\002\000\004\042\u0d7b\001\002\000\004" +
                          "\027\ufd57\001\002\000\004\035\u0d7c\001\002\000\006\033" +
                          "\u0d7f\044\u0d80\001\002\000\004\036\u0db2\001\002\000\016" +
                          "\025\u0da2\030\u0da4\031\u0da1\032\u0da3\036\ufd35\041\u0da0\001" +
                          "\002\000\004\044\u0d80\001\002\000\022\025\ufd22\030\ufd22" +
                          "\031\ufd22\032\ufd22\034\ufd22\036\ufd22\040\u0d81\041\ufd22\001" +
                          "\002\000\004\044\u0d82\001\002\000\020\025\ufd21\030\ufd21" +
                          "\031\ufd21\032\ufd21\034\ufd21\036\ufd21\041\ufd21\001\002\000" +
                          "\016\025\u0d86\030\u0d89\031\u0d85\032\u0d87\034\u0d88\041\u0d84" +
                          "\001\002\000\004\034\u0d9e\001\002\000\004\044\u0d80\001" +
                          "\002\000\004\044\u0d80\001\002\000\004\044\u0d80\001\002" +
                          "\000\004\036\ufd2b\001\002\000\004\044\u0d80\001\002\000" +
                          "\006\034\u0d8c\041\u0d8b\001\002\000\004\034\u0d8d\001\002" +
                          "\000\004\036\ufd27\001\002\000\006\033\u0d7f\044\u0d80\001" +
                          "\002\000\004\036\ufd28\001\002\000\006\034\u0d91\041\u0d90" +
                          "\001\002\000\004\034\u0d92\001\002\000\004\036\ufd23\001" +
                          "\002\000\006\033\u0d7f\044\u0d80\001\002\000\004\036\ufd24" +
                          "\001\002\000\006\034\u0d96\041\u0d95\001\002\000\004\034" +
                          "\u0d97\001\002\000\004\036\ufd29\001\002\000\006\033\u0d7f" +
                          "\044\u0d80\001\002\000\004\036\ufd2a\001\002\000\006\034" +
                          "\u0d9b\041\u0d9a\001\002\000\004\034\u0d9c\001\002\000\004" +
                          "\036\ufd25\001\002\000\006\033\u0d7f\044\u0d80\001\002\000" +
                          "\004\036\ufd26\001\002\000\006\033\u0d7f\044\u0d80\001\002" +
                          "\000\004\036\ufd2c\001\002\000\006\033\u0d7f\044\u0d80\001" +
                          "\002\000\004\044\u0d80\001\002\000\004\044\u0d80\001\002" +
                          "\000\004\044\u0d80\001\002\000\004\044\u0d80\001\002\000" +
                          "\006\036\ufd31\041\u0da6\001\002\000\006\033\u0d7f\044\u0d80" +
                          "\001\002\000\004\036\ufd32\001\002\000\006\036\ufd2d\041" +
                          "\u0da9\001\002\000\006\033\u0d7f\044\u0d80\001\002\000\004" +
                          "\036\ufd2e\001\002\000\006\036\ufd33\041\u0dac\001\002\000" +
                          "\006\033\u0d7f\044\u0d80\001\002\000\004\036\ufd34\001\002" +
                          "\000\006\036\ufd2f\041\u0daf\001\002\000\006\033\u0d7f\044" +
                          "\u0d80\001\002\000\004\036\ufd30\001\002\000\004\036\ufd36" +
                          "\001\002\000\004\043\u0db3\001\002\000\006\004\u0db4\015" +
                          "\u0db5\001\002\000\004\042\u0dc2\001\002\000\004\042\u0db7" +
                          "\001\002\000\004\027\ufd53\001\002\000\004\035\u0db8\001" +
                          "\002\000\004\026\122\001\002\000\004\036\u0dba\001\002" +
                          "\000\004\043\u0dbb\001\002\000\004\004\u0dbc\001\002\000" +
                          "\004\042\u0dbe\001\002\000\004\027\ufd3d\001\002\000\004" +
                          "\037\u0dbf\001\002\000\004\043\ufd1e\001\002\000\004\043" +
                          "\u0dc1\001\002\000\004\027\ufd39\001\002\000\004\037\u0dbf" +
                          "\001\002\000\004\043\u0dc4\001\002\000\004\015\u0dc5\001" +
                          "\002\000\004\042\u0dc7\001\002\000\004\027\ufd3e\001\002" +
                          "\000\004\035\u0dc8\001\002\000\004\026\122\001\002\000" +
                          "\004\036\u0dca\001\002\000\004\043\u0dcb\001\002\000\004" +
                          "\027\ufd3b\001\002\000\004\035\u0dcd\001\002\000\004\026" +
                          "\122\001\002\000\004\036\u0dcf\001\002\000\004\043\u0dd0" +
                          "\001\002\000\006\004\u0dd1\012\u0dd3\001\002\000\004\042" +
                          "\u0dda\001\002\000\004\027\ufd52\001\002\000\004\042\u0dd4" +
                          "\001\002\000\004\035\u0dd5\001\002\000\006\033\u0d7f\044" +
                          "\u0d80\001\002\000\004\036\u0dd7\001\002\000\004\043\u0dd8" +
                          "\001\002\000\004\004\u0dbc\001\002\000\004\027\ufd41\001" +
                          "\002\000\004\037\u0dbf\001\002\000\004\043\u0ddc\001\002" +
                          "\000\004\012\u0dde\001\002\000\004\027\ufd42\001\002\000" +
                          "\004\042\u0ddf\001\002\000\004\035\u0de0\001\002\000\006" +
                          "\033\u0d7f\044\u0d80\001\002\000\004\036\u0de2\001\002\000" +
                          "\004\043\u0de3\001\002\000\004\027\ufd3c\001\002\000\004" +
                          "\037\u0dbf\001\002\000\004\043\u0de6\001\002\000\006\012" +
                          "\u0de9\015\u0de8\001\002\000\004\027\ufd54\001\002\000\004" +
                          "\042\u0df0\001\002\000\004\042\u0dea\001\002\000\004\035" +
                          "\u0deb\001\002\000\006\033\u0d7f\044\u0d80\001\002\000\004" +
                          "\036\u0ded\001\002\000\004\043\u0dee\001\002\000\004\015" +
                          "\u0dc5\001\002\000\004\027\ufd48\001\002\000\004\035\u0df1" +
                          "\001\002\000\004\026\122\001\002\000\004\036\u0df3\001" +
                          "\002\000\004\043\u0df4\001\002\000\004\012\u0dde\001\002" +
                          "\000\004\027\ufd47\001\002\000\004\037\u0d73\001\002\000" +
                          "\004\036\ufd38\001\002\000\004\035\u0df9\001\002\000\006" +
                          "\033\u0d7f\044\u0d80\001\002\000\004\036\u0dfb\001\002\000" +
                          "\004\043\u0dfc\001\002\000\010\004\u0dfd\011\u0e00\015\u0dfe" +
                          "\001\002\000\004\042\u0e1f\001\002\000\004\042\u0e07\001" +
                          "\002\000\004\027\ufd56\001\002\000\004\042\u0e01\001\002" +
                          "\000\004\035\u0e02\001\002\000\004\037\u0d73\001\002\000" +
                          "\004\036\u0e04\001\002\000\004\043\u0e05\001\002\000\006" +
                          "\004\u0db4\015\u0db5\001\002\000\004\027\ufd51\001\002\000" +
                          "\004\035\u0e08\001\002\000\004\026\122\001\002\000\004" +
                          "\036\u0e0a\001\002\000\004\043\u0e0b\001\002\000\006\004" +
                          "\u0e0c\011\u0e0e\001\002\000\004\042\u0e15\001\002\000\004" +
                          "\027\ufd4f\001\002\000\004\042\u0e0f\001\002\000\004\035" +
                          "\u0e10\001\002\000\004\037\u0d73\001\002\000\004\036\u0e12" +
                          "\001\002\000\004\043\u0e13\001\002\000\004\004\u0dbc\001" +
                          "\002\000\004\027\ufd3f\001\002\000\004\037\u0dbf\001\002" +
                          "\000\004\043\u0e17\001\002\000\004\011\u0e19\001\002\000" +
                          "\004\027\ufd40\001\002\000\004\042\u0e1a\001\002\000\004" +
                          "\035\u0e1b\001\002\000\004\037\u0d73\001\002\000\004\036" +
                          "\u0e1d\001\002\000\004\043\u0e1e\001\002\000\004\027\ufd3a" +
                          "\001\002\000\004\037\u0dbf\001\002\000\004\043\u0e21\001" +
                          "\002\000\006\011\u0e24\015\u0e22\001\002\000\004\042\u0e2b" +
                          "\001\002\000\004\027\ufd50\001\002\000\004\042\u0e25\001" +
                          "\002\000\004\035\u0e26\001\002\000\004\037\u0d73\001\002" +
                          "\000\004\036\u0e28\001\002\000\004\043\u0e29\001\002\000" +
                          "\004\015\u0dc5\001\002\000\004\027\ufd46\001\002\000\004" +
                          "\035\u0e2c\001\002\000\004\026\122\001\002\000\004\036" +
                          "\u0e2e\001\002\000\004\043\u0e2f\001\002\000\004\011\u0e19" +
                          "\001\002\000\004\027\ufd45\001\002\000\010\003\u0d2f\006" +
                          "\005\020\u0d31\001\002\000\004\002\000\001\002\000\004" +
                          "\002\ufffe\001\002\000\004\035\u0e35\001\002\000\004\026" +
                          "\122\001\002\000\004\036\u0e37\001\002\000\004\043\u0e38" +
                          "\001\002\000\010\004\u0e39\011\u0e3c\012\u0e3b\001\002\000" +
                          "\004\042\u0e49\001\002\000\004\027\ufd55\001\002\000\004" +
                          "\042\u0e43\001\002\000\004\042\u0e3d\001\002\000\004\035" +
                          "\u0e3e\001\002\000\004\037\u0d73\001\002\000\004\036\u0e40" +
                          "\001\002\000\004\043\u0e41\001\002\000\006\004\u0dd1\012" +
                          "\u0dd3\001\002\000\004\027\ufd4e\001\002\000\004\035\u0e44" +
                          "\001\002\000\006\033\u0d7f\044\u0d80\001\002\000\004\036" +
                          "\u0e46\001\002\000\004\043\u0e47\001\002\000\006\004\u0e0c" +
                          "\011\u0e0e\001\002\000\004\027\ufd4d\001\002\000\004\037" +
                          "\u0dbf\001\002\000\004\043\u0e4b\001\002\000\006\011\u0e4e" +
                          "\012\u0e4d\001\002\000\004\027\ufd4c\001\002\000\004\042" +
                          "\u0e55\001\002\000\004\042\u0e4f\001\002\000\004\035\u0e50" +
                          "\001\002\000\004\037\u0d73\001\002\000\004\036\u0e52\001" +
                          "\002\000\004\043\u0e53\001\002\000\004\012\u0dde\001\002" +
                          "\000\004\027\ufd44\001\002\000\004\035\u0e56\001\002\000" +
                          "\006\033\u0d7f\044\u0d80\001\002\000\004\036\u0e58\001\002" +
                          "\000\004\043\u0e59\001\002\000\004\011\u0e19\001\002\000" +
                          "\004\027\ufd43\001\002\000\004\037\u0dbf\001\002\000\004" +
                          "\043\u0e5d\001\002\000\010\011\u0e60\012\u0e5f\015\u0e5e\001" +
                          "\002\000\004\042\u0e6e\001\002\000\004\042\u0e68\001\002" +
                          "\000\004\042\u0e62\001\002\000\004\027\ufd58\001\002\000" +
                          "\004\035\u0e63\001\002\000\004\037\u0d73\001\002\000\004" +
                          "\036\u0e65\001\002\000\004\043\u0e66\001\002\000\006\012" +
                          "\u0de9\015\u0de8\001\002\000\004\027\ufd4b\001\002\000\004" +
                          "\035\u0e69\001\002\000\006\033\u0d7f\044\u0d80\001\002\000" +
                          "\004\036\u0e6b\001\002\000\004\043\u0e6c\001\002\000\006" +
                          "\011\u0e24\015\u0e22\001\002\000\004\027\ufd4a\001\002\000" +
                          "\004\035\u0e6f\001\002\000\004\026\122\001\002\000\004" +
                          "\036\u0e71\001\002\000\004\043\u0e72\001\002\000\006\011" +
                          "\u0e4e\012\u0e4d\001\002\000\004\027\ufd49\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table =
          unpackFromStrings(new String[] {
                  "\000\u0e71\000\004\002\005\001\001\000\004\002\u0d39\001" +
                          "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                          "\000\002\001\001\000\002\001\001\000\010\033\023\034" +
                          "\014\237\013\001\001\000\002\001\001\000\002\001\001" +
                          "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                          "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                          "\001\001\000\002\001\001\000\004\032\026\001\001\000" +
                          "\002\001\001\000\002\001\001\000\006\042\036\244\033" +
                          "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                          "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                          "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                          "\002\001\001\000\002\001\001\000\004\255\047\001\001" +
                          "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                          "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
                          "\233\054\001\001\000\002\001\001\000\002\001\001\000" +
                          "\002\001\001\000\004\300\062\001\001\000\002\001\001" +
                          "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                          "\002\001\001\000\006\027\065\234\067\001\001\000\002" +
                          "\001\001\000\004\027\143\001\001\000\002\001\001\000" +
                          "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                          "\001\001\000\004\323\077\001\001\000\002\001\001\000" +
                          "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
                          "\235\103\001\001\000\002\001\001\000\002\001\001\000" +
                          "\002\001\001\000\004\331\106\001\001\000\002\001\001" +
                          "\000\002\001\001\000\004\031\112\001\001\000\002\001" +
                          "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                          "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                          "\004\025\122\001\001\000\002\001\001\000\002\001\001" +
                          "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                          "\002\001\001\000\004\025\130\001\001\000\002\001\001" +
                          "\000\004\031\132\001\001\000\002\001\001\000\004\333" +
                          "\135\001\001\000\002\001\001\000\002\001\001\000\002" +
                          "\001\001\000\004\235\140\001\001\000\002\001\001\000" +
                          "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                          "\001\001\000\004\027\171\001\001\000\004\027\164\001" +
                          "\001\000\004\027\157\001\001\000\002\001\001\000\004" +
                          "\027\152\001\001\000\002\001\001\000\002\001\001\000" +
                          "\002\001\001\000\006\027\065\234\156\001\001\000\002" +
                          "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                          "\001\000\006\027\065\234\163\001\001\000\002\001\001" +
                          "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                          "\006\027\065\234\170\001\001\000\002\001\001\000\002" +
                          "\001\001\000\002\001\001\000\002\001\001\000\006\027" +
                          "\065\234\175\001\001\000\002\001\001\000\006\027\065" +
                          "\234\177\001\001\000\002\001\001\000\006\027\065\234" +
                          "\221\001\001\000\004\027\216\001\001\000\004\027\213" +
                          "\001\001\000\004\027\210\001\001\000\004\027\205\001" +
                          "\001\000\002\001\001\000\006\027\065\234\207\001\001" +
                          "\000\002\001\001\000\002\001\001\000\006\027\065\234" +
                          "\212\001\001\000\002\001\001\000\002\001\001\000\006" +
                          "\027\065\234\215\001\001\000\002\001\001\000\002\001" +
                          "\001\000\006\027\065\234\220\001\001\000\002\001\001" +
                          "\000\002\001\001\000\002\001\001\000\004\235\224\001" +
                          "\001\000\002\001\001\000\002\001\001\000\004\325\231" +
                          "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                          "\001\000\002\001\001\000\006\027\065\234\234\001\001" +
                          "\000\002\001\001\000\002\001\001\000\004\331\237\001" +
                          "\001\000\002\001\001\000\004\031\241\001\001\000\002" +
                          "\001\001\000\004\332\244\001\001\000\002\001\001\000" +
                          "\002\001\001\000\002\001\001\000\006\027\065\234\247" +
                          "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                          "\001\000\004\031\253\001\001\000\002\001\001\000\004" +
                          "\312\255\001\001\000\002\001\001\000\002\001\001\000" +
                          "\002\001\001\000\002\001\001\000\006\027\065\234\262" +
                          "\001\001\000\002\001\001\000\002\001\001\000\004\333" +
                          "\265\001\001\000\002\001\001\000\002\001\001\000\004" +
                          "\235\270\001\001\000\002\001\001\000\002\001\001\000" +
                          "\004\332\273\001\001\000\002\001\001\000\004\233\275" +
                          "\001\001\000\002\001\001\000\002\001\001\000\006\027" +
                          "\065\234\300\001\001\000\002\001\001\000\002\001\001" +
                          "\000\004\302\304\001\001\000\002\001\001\000\002\001" +
                          "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                          "\000\004\233\311\001\001\000\002\001\001\000\002\001" +
                          "\001\000\004\323\314\001\001\000\002\001\001\000\002" +
                          "\001\001\000\004\235\317\001\001\000\002\001\001\000" +
                          "\002\001\001\000\004\326\323\001\001\000\002\001\001" +
                          "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                          "\004\233\327\001\001\000\002\001\001\000\002\001\001" +
                          "\000\004\331\332\001\001\000\002\001\001\000\004\031" +
                          "\334\001\001\000\002\001\001\000\004\335\337\001\001" +
                          "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                          "\004\233\342\001\001\000\002\001\001\000\002\001\001" +
                          "\000\002\001\001\000\004\031\346\001\001\000\002\001" +
                          "\001\000\004\314\350\001\001\000\002\001\001\000\002" +
                          "\001\001\000\002\001\001\000\002\001\001\000\004\233" +
                          "\355\001\001\000\002\001\001\000\002\001\001\000\004" +
                          "\333\360\001\001\000\002\001\001\000\002\001\001\000" +
                          "\004\235\363\001\001\000\002\001\001\000\002\001\001" +
                          "\000\004\335\366\001\001\000\002\001\001\000\002\001" +
                          "\001\000\004\235\371\001\001\000\002\001\001\000\002" +
                          "\001\001\000\004\304\377\001\001\000\002\001\001\000" +
                          "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                          "\001\001\000\004\233\u0102\001\001\000\002\001\001\000" +
                          "\002\001\001\000\004\325\u0105\001\001\000\002\001\001" +
                          "\000\002\001\001\000\006\027\065\234\u0108\001\001\000" +
                          "\002\001\001\000\002\001\001\000\004\326\u010b\001\001" +
                          "\000\002\001\001\000\004\031\u010d\001\001\000\002\001" +
                          "\001\000\004\316\u0111\001\001\000\002\001\001\000\002" +
                          "\001\001\000\002\001\001\000\002\001\001\000\004\233" +
                          "\u0114\001\001\000\002\001\001\000\002\001\001\000\004" +
                          "\332\u0117\001\001\000\002\001\001\000\002\001\001\000" +
                          "\006\027\065\234\u011a\001\001\000\002\001\001\000\002" +
                          "\001\001\000\004\335\u011d\001\001\000\002\001\001\000" +
                          "\004\031\u011f\001\001\000\002\001\001\000\004\267\u0121" +
                          "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                          "\001\000\002\001\001\000\002\001\001\000\004\233\u0127" +
                          "\001\001\000\002\001\001\000\002\001\001\000\004\312" +
                          "\u012a\001\001\000\002\001\001\000\002\001\001\000\006" +
                          "\027\065\234\u012d\001\001\000\002\001\001\000\002\001" +
                          "\001\000\004\314\u0130\001\001\000\002\001\001\000\002" +
                          "\001\001\000\004\235\u0133\001\001\000\002\001\001\000" +
                          "\002\001\001\000\004\316\u0136\001\001\000\002\001\001" +
                          "\000\004\055\u013a\001\001\000\002\001\001\000\002\001" +
                          "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                          "\000\002\001\001\000\002\001\001\000\004\233\u0140\001" +
                          "\001\000\002\001\001\000\002\001\001\000\004\112\u0143" +
                          "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                          "\001\000\002\001\001\000\002\001\001\000\004\236\u0149" +
                          "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                          "\001\000\002\001\001\000\004\163\u0151\001\001\000\002" +
                          "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                          "\001\000\002\001\001\000\006\027\065\234\u0154\001\001" +
                          "\000\002\001\001\000\002\001\001\000\004\216\u0159\001" +
                          "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                          "\000\002\001\001\000\004\235\u015c\001\001\000\002\001" +
                          "\001\000\002\001\001\000\004\225\u0160\001\001\000\002" +
                          "\001\001\000\002\001\001\000\004\031\u0162\001\001\000" +
                          "\002\001\001\000\002\001\001\000\004\031\u0165\001\001" +
                          "\000\002\001\001\000\004\230\u0167\001\001\000\002\001" +
                          "\001\000\002\001\001\000\002\001\001\000\004\235\u016b" +
                          "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                          "\001\000\002\001\001\000\004\235\u0170\001\001\000\002" +
                          "\001\001\000\002\001\001\000\004\221\u0175\001\001\000" +
                          "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                          "\001\001\000\006\027\065\234\u0178\001\001\000\002\001" +
                          "\001\000\002\001\001\000\004\225\u017b\001\001\000\002" +
                          "\001\001\000\004\031\u017d\001\001\000\002\001\001\000" +
                          "\004\226\u017f\001\001\000\002\001\001\000\002\001\001" +
                          "\000\002\001\001\000\006\027\065\234\u0183\001\001\000" +
                          "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
                          "\031\u0187\001\001\000\002\001\001\000\004\202\u018b\001" +
                          "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                          "\000\002\001\001\000\006\027\065\234\u018e\001\001\000" +
                          "\002\001\001\000\002\001\001\000\004\230\u0191\001\001" +
                          "\000\002\001\001\000\002\001\001\000\004\235\u0194\001" +
                          "\001\000\002\001\001\000\002\001\001\000\004\226\u0197" +
                          "\001\001\000\002\001\001\000\002\001\001\000\006\027" +
                          "\065\234\u019a\001\001\000\002\001\001\000\002\001\001" +
                          "\000\004\161\u01a0\001\001\000\002\001\001\000\002\001" +
                          "\001\000\002\001\001\000\002\001\001\000\004\236\u01a2" +
                          "\001\001\000\002\001\001\000\004\216\u01a4\001\001\000" +
                          "\002\001\001\000\002\001\001\000\004\235\u01a7\001\001" +
                          "\000\002\001\001\000\002\001\001\000\004\220\u01ac\001" +
                          "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                          "\000\004\236\u01ae\001\001\000\002\001\001\000\004\225" +
                          "\u01b0\001\001\000\002\001\001\000\004\031\u01b2\001\001" +
                          "\000\002\001\001\000\004\227\u01b4\001\001\000\002\001" +
                          "\001\000\002\001\001\000\004\236\u01b7\001\001\000\002" +
                          "\001\001\000\002\001\001\000\004\031\u01ba\001\001\000" +
                          "\002\001\001\000\004\200\u01bc\001\001\000\002\001\001" +
                          "\000\002\001\001\000\002\001\001\000\004\236\u01c0\001" +
                          "\001\000\002\001\001\000\004\230\u01c2\001\001\000\002" +
                          "\001\001\000\002\001\001\000\004\235\u01c5\001\001\000" +
                          "\002\001\001\000\002\001\001\000\004\227\u01c8\001\001" +
                          "\000\002\001\001\000\002\001\001\000\004\235\u01cb\001" +
                          "\001\000\002\001\001\000\002\001\001\000\004\165\u01d1" +
                          "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                          "\001\000\002\001\001\000\004\236\u01d3\001\001\000\002" +
                          "\001\001\000\004\221\u01d5\001\001\000\002\001\001\000" +
                          "\002\001\001\000\006\027\065\234\u01d8\001\001\000\002" +
                          "\001\001\000\002\001\001\000\004\220\u01db\001\001\000" +
                          "\002\001\001\000\004\031\u01dd\001\001\000\002\001\001" +
                          "\000\004\204\u01e1\001\001\000\002\001\001\000\002\001" +
                          "\001\000\002\001\001\000\004\236\u01e3\001\001\000\002" +
                          "\001\001\000\004\226\u01e5\001\001\000\002\001\001\000" +
                          "\002\001\001\000\006\027\065\234\u01e8\001\001\000\002" +
                          "\001\001\000\002\001\001\000\004\227\u01eb\001\001\000" +
                          "\002\001\001\000\004\031\u01ed\001\001\000\002\001\001" +
                          "\000\004\136\u01f1\001\001\000\002\001\001\000\002\001" +
                          "\001\000\002\001\001\000\002\001\001\000\004\236\u01f4" +
                          "\001\001\000\002\001\001\000\004\202\u01f6\001\001\000" +
                          "\002\001\001\000\002\001\001\000\006\027\065\234\u01f9" +
                          "\001\001\000\002\001\001\000\002\001\001\000\004\200" +
                          "\u01fc\001\001\000\002\001\001\000\002\001\001\000\004" +
                          "\235\u01ff\001\001\000\002\001\001\000\002\001\001\000" +
                          "\004\204\u0202\001\001\000\002\001\001\000\004\236\u0204" +
                          "\001\001\000\002\001\001\000\004\117\u020a\001\001\000" +
                          "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                          "\001\001\000\002\001\001\000\002\001\001\000\004\233" +
                          "\u020d\001\001\000\002\001\001\000\002\001\001\000\004" +
                          "\163\u0210\001\001\000\002\001\001\000\002\001\001\000" +
                          "\006\027\065\234\u0213\001\001\000\002\001\001\000\002" +
                          "\001\001\000\004\166\u0218\001\001\000\002\001\001\000" +
                          "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                          "\001\001\000\004\233\u021c\001\001\000\002\001\001\000" +
                          "\002\001\001\000\004\216\u021f\001\001\000\002\001\001" +
                          "\000\002\001\001\000\004\235\u0222\001\001\000\002\001" +
                          "\001\000\002\001\001\000\004\222\u0226\001\001\000\002" +
                          "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                          "\001\000\004\233\u022a\001\001\000\002\001\001\000\002" +
                          "\001\001\000\004\225\u022d\001\001\000\002\001\001\000" +
                          "\004\031\u022f\001\001\000\002\001\001\000\004\232\u0232" +
                          "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                          "\001\000\004\233\u0235\001\001\000\002\001\001\000\002" +
                          "\001\001\000\002\001\001\000\004\031\u0239\001\001\000" +
                          "\002\001\001\000\004\205\u023d\001\001\000\002\001\001" +
                          "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                          "\004\233\u0240\001\001\000\002\001\001\000\002\001\001" +
                          "\000\004\230\u0243\001\001\000\002\001\001\000\002\001" +
                          "\001\000\004\235\u0246\001\001\000\002\001\001\000\002" +
                          "\001\001\000\004\232\u0249\001\001\000\002\001\001\000" +
                          "\002\001\001\000\004\235\u024c\001\001\000\002\001\001" +
                          "\000\002\001\001\000\004\171\u0252\001\001\000\002\001" +
                          "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                          "\000\002\001\001\000\004\233\u0255\001\001\000\002\001" +
                          "\001\000\002\001\001\000\004\221\u0258\001\001\000\002" +
                          "\001\001\000\002\001\001\000\006\027\065\234\u025b\001" +
                          "\001\000\002\001\001\000\002\001\001\000\004\222\u025e" +
                          "\001\001\000\002\001\001\000\004\031\u0260\001\001\000" +
                          "\002\001\001\000\004\210\u0262\001\001\000\002\001\001" +
                          "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                          "\004\233\u0267\001\001\000\002\001\001\000\002\001\001" +
                          "\000\004\226\u026a\001\001\000\002\001\001\000\002\001" +
                          "\001\000\006\027\065\234\u026d\001\001\000\002\001\001" +
                          "\000\002\001\001\000\004\232\u0270\001\001\000\002\001" +
                          "\001\000\004\031\u0272\001\001\000\002\001\001\000\004" +
                          "\143\u0275\001\001\000\002\001\001\000\002\001\001\000" +
                          "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
                          "\233\u027a\001\001\000\002\001\001\000\002\001\001\000" +
                          "\004\202\u027d\001\001\000\002\001\001\000\002\001\001" +
                          "\000\006\027\065\234\u0280\001\001\000\002\001\001\000" +
                          "\002\001\001\000\004\205\u0283\001\001\000\002\001\001" +
                          "\000\002\001\001\000\004\235\u0286\001\001\000\002\001" +
                          "\001\000\002\001\001\000\004\210\u0289\001\001\000\002" +
                          "\001\001\000\002\001\001\000\006\027\065\234\u028c\001" +
                          "\001\000\002\001\001\000\002\001\001\000\004\115\u0293" +
                          "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                          "\001\000\002\001\001\000\002\001\001\000\004\236\u0295" +
                          "\001\001\000\002\001\001\000\004\166\u0297\001\001\000" +
                          "\002\001\001\000\002\001\001\000\004\233\u029a\001\001" +
                          "\000\002\001\001\000\002\001\001\000\004\161\u029d\001" +
                          "\001\000\002\001\001\000\002\001\001\000\004\235\u02a0" +
                          "\001\001\000\002\001\001\000\002\001\001\000\004\170" +
                          "\u02a4\001\001\000\002\001\001\000\002\001\001\000\002" +
                          "\001\001\000\002\001\001\000\002\001\001\000\004\233" +
                          "\u02a9\001\001\000\002\001\001\000\002\001\001\000\004" +
                          "\220\u02ac\001\001\000\002\001\001\000\004\236\u02ae\001" +
                          "\001\000\002\001\001\000\004\222\u02b0\001\001\000\002" +
                          "\001\001\000\004\031\u02b2\001\001\000\002\001\001\000" +
                          "\004\207\u02b6\001\001\000\002\001\001\000\002\001\001" +
                          "\000\002\001\001\000\002\001\001\000\004\233\u02b9\001" +
                          "\001\000\002\001\001\000\002\001\001\000\004\227\u02bc" +
                          "\001\001\000\002\001\001\000\004\236\u02be\001\001\000" +
                          "\002\001\001\000\004\232\u02c0\001\001\000\002\001\001" +
                          "\000\004\031\u02c2\001\001\000\002\001\001\000\004\141" +
                          "\u02c4\001\001\000\002\001\001\000\002\001\001\000\002" +
                          "\001\001\000\002\001\001\000\004\236\u02c9\001\001\000" +
                          "\002\001\001\000\004\205\u02cb\001\001\000\002\001\001" +
                          "\000\002\001\001\000\004\233\u02ce\001\001\000\002\001" +
                          "\001\000\002\001\001\000\004\200\u02d1\001\001\000\002" +
                          "\001\001\000\002\001\001\000\004\235\u02d4\001\001\000" +
                          "\002\001\001\000\002\001\001\000\004\207\u02d7\001\001" +
                          "\000\002\001\001\000\002\001\001\000\004\235\u02da\001" +
                          "\001\000\002\001\001\000\002\001\001\000\004\121\u02df" +
                          "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                          "\001\000\002\001\001\000\002\001\001\000\004\236\u02e3" +
                          "\001\001\000\002\001\001\000\004\171\u02e5\001\001\000" +
                          "\002\001\001\000\002\001\001\000\004\233\u02e8\001\001" +
                          "\000\002\001\001\000\002\001\001\000\004\165\u02eb\001" +
                          "\001\000\002\001\001\000\002\001\001\000\006\027\065" +
                          "\234\u02ee\001\001\000\002\001\001\000\004\170\u02f0\001" +
                          "\001\000\002\001\001\000\004\031\u02f2\001\001\000\002" +
                          "\001\001\000\004\145\u02f5\001\001\000\002\001\001\000" +
                          "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                          "\001\001\000\004\233\u02fa\001\001\000\002\001\001\000" +
                          "\002\001\001\000\004\204\u02fd\001\001\000\002\001\001" +
                          "\000\004\236\u02ff\001\001\000\002\001\001\000\004\210" +
                          "\u0301\001\001\000\002\001\001\000\002\001\001\000\006" +
                          "\027\065\234\u0304\001\001\000\002\001\001\000\002\001" +
                          "\001\000\004\207\u0307\001\001\000\002\001\001\000\004" +
                          "\031\u0309\001\001\000\002\001\001\000\004\074\u030f\001" +
                          "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                          "\000\002\001\001\000\002\001\001\000\004\236\u0311\001" +
                          "\001\000\002\001\001\000\004\143\u0313\001\001\000\002" +
                          "\001\001\000\002\001\001\000\004\233\u0316\001\001\000" +
                          "\002\001\001\000\002\001\001\000\004\136\u0319\001\001" +
                          "\000\002\001\001\000\002\001\001\000\006\027\065\234" +
                          "\u031c\001\001\000\002\001\001\000\002\001\001\000\004" +
                          "\141\u031f\001\001\000\002\001\001\000\002\001\001\000" +
                          "\004\235\u0322\001\001\000\002\001\001\000\002\001\001" +
                          "\000\004\145\u0325\001\001\000\002\001\001\000\004\236" +
                          "\u0327\001\001\000\002\001\001\000\004\066\u032c\001\001" +
                          "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                          "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                          "\001\001\000\002\001\001\000\004\117\u0332\001\001\000" +
                          "\002\001\001\000\002\001\001\000\004\233\u0335\001\001" +
                          "\000\002\001\001\000\002\001\001\000\004\125\u033b\001" +
                          "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                          "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                          "\002\001\001\000\004\163\u0340\001\001\000\002\001\001" +
                          "\000\002\001\001\000\006\027\065\234\u0343\001\001\000" +
                          "\002\001\001\000\002\001\001\000\004\172\u0349\001\001" +
                          "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                          "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
                          "\216\u034d\001\001\000\002\001\001\000\002\001\001\000" +
                          "\004\235\u0350\001\001\000\002\001\001\000\002\001\001" +
                          "\000\004\223\u0354\001\001\000\002\001\001\000\002\001" +
                          "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                          "\000\004\225\u0359\001\001\000\002\001\001\000\004\031" +
                          "\u035b\001\001\000\002\001\001\000\004\224\u035d\001\001" +
                          "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                          "\002\001\001\000\002\001\001\000\004\031\u0363\001\001" +
                          "\000\002\001\001\000\004\211\u0366\001\001\000\002\001" +
                          "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                          "\000\002\001\001\000\004\230\u036b\001\001\000\002\001" +
                          "\001\000\002\001\001\000\004\235\u036e\001\001\000\002" +
                          "\001\001\000\002\001\001\000\004\224\u0371\001\001\000" +
                          "\002\001\001\000\002\001\001\000\004\235\u0374\001\001" +
                          "\000\002\001\001\000\002\001\001\000\004\175\u0379\001" +
                          "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                          "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                          "\004\221\u037e\001\001\000\002\001\001\000\002\001\001" +
                          "\000\006\027\065\234\u0381\001\001\000\002\001\001\000" +
                          "\002\001\001\000\004\223\u0384\001\001\000\002\001\001" +
                          "\000\004\031\u0386\001\001\000\002\001\001\000\004\214" +
                          "\u0389\001\001\000\002\001\001\000\002\001\001\000\002" +
                          "\001\001\000\002\001\001\000\002\001\001\000\004\226" +
                          "\u038e\001\001\000\002\001\001\000\002\001\001\000\006" +
                          "\027\065\234\u0391\001\001\000\002\001\001\000\002\001" +
                          "\001\000\004\224\u0394\001\001\000\002\001\001\000\004" +
                          "\031\u0396\001\001\000\002\001\001\000\004\151\u039a\001" +
                          "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                          "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                          "\004\202\u039f\001\001\000\002\001\001\000\002\001\001" +
                          "\000\006\027\065\234\u03a2\001\001\000\002\001\001\000" +
                          "\002\001\001\000\004\211\u03a5\001\001\000\002\001\001" +
                          "\000\002\001\001\000\004\235\u03a8\001\001\000\002\001" +
                          "\001\000\002\001\001\000\004\214\u03ab\001\001\000\002" +
                          "\001\001\000\002\001\001\000\006\027\065\234\u03ae\001" +
                          "\001\000\002\001\001\000\002\001\001\000\004\130\u03b2" +
                          "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                          "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                          "\000\002\001\001\000\004\166\u03b9\001\001\000\002\001" +
                          "\001\000\002\001\001\000\004\233\u03bc\001\001\000\002" +
                          "\001\001\000\002\001\001\000\004\172\u03bf\001\001\000" +
                          "\002\001\001\000\002\001\001\000\004\235\u03c2\001\001" +
                          "\000\002\001\001\000\002\001\001\000\004\176\u03c6\001" +
                          "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                          "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                          "\004\222\u03cc\001\001\000\002\001\001\000\002\001\001" +
                          "\000\004\233\u03cf\001\001\000\002\001\001\000\002\001" +
                          "\001\000\004\223\u03d2\001\001\000\002\001\001\000\004" +
                          "\031\u03d4\001\001\000\002\001\001\000\004\215\u03d8\001" +
                          "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                          "\000\002\001\001\000\002\001\001\000\004\232\u03dc\001" +
                          "\001\000\002\001\001\000\002\001\001\000\004\233\u03df" +
                          "\001\001\000\002\001\001\000\002\001\001\000\004\224" +
                          "\u03e2\001\001\000\002\001\001\000\004\031\u03e4\001\001" +
                          "\000\002\001\001\000\004\154\u03e7\001\001\000\002\001" +
                          "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                          "\000\002\001\001\000\002\001\001\000\004\205\u03ed\001" +
                          "\001\000\002\001\001\000\002\001\001\000\004\233\u03f0" +
                          "\001\001\000\002\001\001\000\002\001\001\000\004\211" +
                          "\u03f3\001\001\000\002\001\001\000\002\001\001\000\004" +
                          "\235\u03f6\001\001\000\002\001\001\000\002\001\001\000" +
                          "\004\215\u03f9\001\001\000\002\001\001\000\002\001\001" +
                          "\000\004\235\u03fc\001\001\000\002\001\001\000\002\001" +
                          "\001\000\004\133\u0400\001\001\000\002\001\001\000\002" +
                          "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                          "\001\000\002\001\001\000\002\001\001\000\004\171\u0407" +
                          "\001\001\000\002\001\001\000\002\001\001\000\004\233" +
                          "\u040a\001\001\000\002\001\001\000\002\001\001\000\004" +
                          "\175\u040d\001\001\000\002\001\001\000\002\001\001\000" +
                          "\006\027\065\234\u0410\001\001\000\002\001\001\000\002" +
                          "\001\001\000\004\176\u0413\001\001\000\002\001\001\000" +
                          "\004\031\u0415\001\001\000\002\001\001\000\004\157\u0418" +
                          "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                          "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                          "\000\004\210\u041e\001\001\000\002\001\001\000\002\001" +
                          "\001\000\004\233\u0421\001\001\000\002\001\001\000\002" +
                          "\001\001\000\004\214\u0424\001\001\000\002\001\001\000" +
                          "\002\001\001\000\006\027\065\234\u0427\001\001\000\002" +
                          "\001\001\000\002\001\001\000\004\215\u042a\001\001\000" +
                          "\002\001\001\000\004\031\u042c\001\001\000\002\001\001" +
                          "\000\004\105\u0430\001\001\000\002\001\001\000\002\001" +
                          "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                          "\000\002\001\001\000\002\001\001\000\004\143\u0436\001" +
                          "\001\000\002\001\001\000\002\001\001\000\004\233\u0439" +
                          "\001\001\000\002\001\001\000\002\001\001\000\004\151" +
                          "\u043c\001\001\000\002\001\001\000\002\001\001\000\006" +
                          "\027\065\234\u043f\001\001\000\002\001\001\000\002\001" +
                          "\001\000\004\154\u0442\001\001\000\002\001\001\000\002" +
                          "\001\001\000\004\235\u0445\001\001\000\002\001\001\000" +
                          "\002\001\001\000\004\157\u0448\001\001\000\002\001\001" +
                          "\000\002\001\001\000\004\233\u044b\001\001\000\002\001" +
                          "\001\000\002\001\001\000\006\061\u0453\260\u044f\001\001" +
                          "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                          "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                          "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                          "\001\000\004\300\u0459\001\001\000\002\001\001\000\004" +
                          "\112\u045b\001\001\000\002\001\001\000\004\236\u045d\001" +
                          "\001\000\002\001\001\000\004\125\u045f\001\001\000\002" +
                          "\001\001\000\002\001\001\000\006\027\065\234\u0462\001" +
                          "\001\000\002\001\001\000\002\001\001\000\006\123\u0469" +
                          "\305\u0466\001\001\000\002\001\001\000\002\001\001\000" +
                          "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                          "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                          "\001\000\004\323\u046f\001\001\000\002\001\001\000\004" +
                          "\161\u0471\001\001\000\002\001\001\000\004\236\u0473\001" +
                          "\001\000\002\001\001\000\004\172\u0475\001\001\000\002" +
                          "\001\001\000\002\001\001\000\004\235\u0478\001\001\000" +
                          "\002\001\001\000\002\001\001\000\006\174\u047f\327\u047b" +
                          "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                          "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                          "\000\002\001\001\000\002\001\001\000\004\331\u0484\001" +
                          "\001\000\002\001\001\000\004\220\u0486\001\001\000\002" +
                          "\001\001\000\004\236\u0488\001\001\000\002\001\001\000" +
                          "\004\223\u048a\001\001\000\002\001\001\000\004\031\u048c" +
                          "\001\001\000\002\001\001\000\006\213\u048f\330\u048e\001" +
                          "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                          "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                          "\002\001\001\000\002\001\001\000\004\227\u0497\001\001" +
                          "\000\002\001\001\000\004\236\u0499\001\001\000\002\001" +
                          "\001\000\004\224\u049b\001\001\000\002\001\001\000\004" +
                          "\031\u049d\001\001\000\002\001\001\000\006\147\u049f\317" +
                          "\u04a1\001\001\000\002\001\001\000\002\001\001\000\002" +
                          "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                          "\001\000\002\001\001\000\002\001\001\000\004\333\u04a8" +
                          "\001\001\000\002\001\001\000\004\200\u04aa\001\001\000" +
                          "\002\001\001\000\004\236\u04ac\001\001\000\002\001\001" +
                          "\000\004\211\u04ae\001\001\000\002\001\001\000\002\001" +
                          "\001\000\004\235\u04b1\001\001\000\002\001\001\000\002" +
                          "\001\001\000\006\213\u04b5\330\u04b4\001\001\000\002\001" +
                          "\001\000\002\001\001\000\002\001\001\000\004\235\u04b8" +
                          "\001\001\000\002\001\001\000\002\001\001\000\006\127" +
                          "\u04bc\307\u04c0\001\001\000\002\001\001\000\002\001\001" +
                          "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                          "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                          "\001\001\000\004\325\u04c5\001\001\000\002\001\001\000" +
                          "\004\165\u04c7\001\001\000\002\001\001\000\004\236\u04c9" +
                          "\001\001\000\002\001\001\000\004\175\u04cb\001\001\000" +
                          "\002\001\001\000\002\001\001\000\006\027\065\234\u04ce" +
                          "\001\001\000\002\001\001\000\002\001\001\000\006\174" +
                          "\u04d2\327\u04d1\001\001\000\002\001\001\000\002\001\001" +
                          "\000\004\031\u04d4\001\001\000\002\001\001\000\006\153" +
                          "\u04d8\321\u04d6\001\001\000\002\001\001\000\002\001\001" +
                          "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                          "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
                          "\332\u04df\001\001\000\002\001\001\000\004\204\u04e1\001" +
                          "\001\000\002\001\001\000\004\236\u04e3\001\001\000\002" +
                          "\001\001\000\004\214\u04e5\001\001\000\002\001\001\000" +
                          "\002\001\001\000\006\027\065\234\u04e8\001\001\000\002" +
                          "\001\001\000\002\001\001\000\006\213\u04ec\330\u04eb\001" +
                          "\001\000\002\001\001\000\002\001\001\000\004\031\u04ee" +
                          "\001\001\000\002\001\001\000\006\100\u04f4\272\u04f2\001" +
                          "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                          "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                          "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
                          "\312\u04fa\001\001\000\002\001\001\000\004\136\u04fc\001" +
                          "\001\000\002\001\001\000\004\236\u04fe\001\001\000\002" +
                          "\001\001\000\004\151\u0500\001\001\000\002\001\001\000" +
                          "\002\001\001\000\006\027\065\234\u0503\001\001\000\002" +
                          "\001\001\000\002\001\001\000\006\147\u0506\317\u0507\001" +
                          "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                          "\000\004\235\u050a\001\001\000\002\001\001\000\002\001" +
                          "\001\000\006\153\u050e\321\u050d\001\001\000\002\001\001" +
                          "\000\002\001\001\000\002\001\001\000\006\027\065\234" +
                          "\u0511\001\001\000\002\001\001\000\002\001\001\000\006" +
                          "\064\u051a\262\u0516\001\001\000\002\001\001\000\002\001" +
                          "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                          "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                          "\002\001\001\000\002\001\001\000\004\302\u051f\001\001" +
                          "\000\002\001\001\000\004\115\u0521\001\001\000\002\001" +
                          "\001\000\002\001\001\000\004\233\u0524\001\001\000\002" +
                          "\001\001\000\002\001\001\000\006\123\u0528\305\u0527\001" +
                          "\001\000\002\001\001\000\002\001\001\000\004\236\u052a" +
                          "\001\001\000\002\001\001\000\004\130\u052c\001\001\000" +
                          "\002\001\001\000\002\001\001\000\004\235\u052f\001\001" +
                          "\000\002\001\001\000\002\001\001\000\006\132\u0535\310" +
                          "\u0532\001\001\000\002\001\001\000\002\001\001\000\002" +
                          "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                          "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                          "\000\004\326\u053c\001\001\000\002\001\001\000\004\170" +
                          "\u053e\001\001\000\002\001\001\000\002\001\001\000\004" +
                          "\233\u0541\001\001\000\002\001\001\000\002\001\001\000" +
                          "\006\174\u0545\327\u0544\001\001\000\002\001\001\000\002" +
                          "\001\001\000\004\236\u0547\001\001\000\002\001\001\000" +
                          "\004\176\u0549\001\001\000\002\001\001\000\004\031\u054b" +
                          "\001\001\000\002\001\001\000\006\156\u0550\322\u054d\001" +
                          "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                          "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                          "\002\001\001\000\002\001\001\000\004\335\u0556\001\001" +
                          "\000\002\001\001\000\004\207\u0558\001\001\000\002\001" +
                          "\001\000\002\001\001\000\004\233\u055b\001\001\000\002" +
                          "\001\001\000\002\001\001\000\006\213\u055f\330\u055e\001" +
                          "\001\000\002\001\001\000\002\001\001\000\004\236\u0561" +
                          "\001\001\000\002\001\001\000\004\215\u0563\001\001\000" +
                          "\002\001\001\000\004\031\u0565\001\001\000\002\001\001" +
                          "\000\006\103\u0567\274\u056c\001\001\000\002\001\001\000" +
                          "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                          "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                          "\001\000\002\001\001\000\004\314\u0571\001\001\000\002" +
                          "\001\001\000\004\141\u0573\001\001\000\002\001\001\000" +
                          "\002\001\001\000\004\233\u0576\001\001\000\002\001\001" +
                          "\000\002\001\001\000\006\147\u0579\317\u057a\001\001\000" +
                          "\002\001\001\000\002\001\001\000\004\236\u057c\001\001" +
                          "\000\002\001\001\000\004\154\u057e\001\001\000\002\001" +
                          "\001\000\002\001\001\000\004\235\u0581\001\001\000\002" +
                          "\001\001\000\002\001\001\000\006\156\u0585\322\u0584\001" +
                          "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                          "\000\004\235\u0588\001\001\000\002\001\001\000\002\001" +
                          "\001\000\006\070\u058d\264\u0590\001\001\000\002\001\001" +
                          "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                          "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                          "\001\001\000\002\001\001\000\002\001\001\000\004\304" +
                          "\u0596\001\001\000\002\001\001\000\004\121\u0598\001\001" +
                          "\000\002\001\001\000\004\236\u059a\001\001\000\002\001" +
                          "\001\000\004\133\u059c\001\001\000\002\001\001\000\002" +
                          "\001\001\000\004\233\u059f\001\001\000\002\001\001\000" +
                          "\002\001\001\000\006\127\u05a2\307\u05a3\001\001\000\002" +
                          "\001\001\000\002\001\001\000\002\001\001\000\006\027" +
                          "\065\234\u05a6\001\001\000\002\001\001\000\002\001\001" +
                          "\000\006\132\u05aa\310\u05a9\001\001\000\002\001\001\000" +
                          "\002\001\001\000\004\031\u05ac\001\001\000\002\001\001" +
                          "\000\006\107\u05b2\276\u05af\001\001\000\002\001\001\000" +
                          "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                          "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                          "\001\000\002\001\001\000\004\316\u05b8\001\001\000\002" +
                          "\001\001\000\004\145\u05ba\001\001\000\002\001\001\000" +
                          "\002\001\001\000\004\233\u05bd\001\001\000\002\001\001" +
                          "\000\002\001\001\000\006\153\u05c1\321\u05c0\001\001\000" +
                          "\002\001\001\000\002\001\001\000\004\236\u05c3\001\001" +
                          "\000\002\001\001\000\004\157\u05c5\001\001\000\002\001" +
                          "\001\000\002\001\001\000\006\027\065\234\u05c8\001\001" +
                          "\000\002\001\001\000\002\001\001\000\006\156\u05cc\322" +
                          "\u05cb\001\001\000\002\001\001\000\002\001\001\000\004" +
                          "\031\u05ce\001\001\000\002\001\001\000\006\050\u05d6\251" +
                          "\u05d4\001\001\000\002\001\001\000\002\001\001\000\002" +
                          "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                          "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                          "\000\002\001\001\000\004\267\u05db\001\001\000\002\001" +
                          "\001\000\004\074\u05dd\001\001\000\002\001\001\000\002" +
                          "\001\001\000\004\233\u05e0\001\001\000\002\001\001\000" +
                          "\002\001\001\000\006\100\u05e4\272\u05e3\001\001\000\002" +
                          "\001\001\000\002\001\001\000\004\236\u05e6\001\001\000" +
                          "\002\001\001\000\004\105\u05e8\001\001\000\002\001\001" +
                          "\000\002\001\001\000\006\027\065\234\u05eb\001\001\000" +
                          "\002\001\001\000\002\001\001\000\006\103\u05ee\274\u05ef" +
                          "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                          "\001\000\004\235\u05f2\001\001\000\002\001\001\000\002" +
                          "\001\001\000\006\107\u05f6\276\u05f5\001\001\000\002\001" +
                          "\001\000\002\001\001\000\002\001\001\000\004\233\u05f9" +
                          "\001\001\000\002\001\001\000\002\001\001\000\006\037" +
                          "\u0600\242\u0602\001\001\000\002\001\001\000\002\001\001" +
                          "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                          "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                          "\001\001\000\002\001\001\000\002\001\001\000\004\253" +
                          "\u060c\001\001\000\002\001\001\000\002\001\001\000\002" +
                          "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                          "\001\000\006\027\065\234\u060f\001\001\000\002\001\001" +
                          "\000\002\001\001\000\004\277\u0615\001\001\000\002\001" +
                          "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                          "\000\002\001\001\000\004\235\u0618\001\001\000\002\001" +
                          "\001\000\002\001\001\000\004\324\u061d\001\001\000\002" +
                          "\001\001\000\002\001\001\000\002\001\001\000\004\031" +
                          "\u061f\001\001\000\002\001\001\000\004\334\u0622\001\001" +
                          "\000\002\001\001\000\002\001\001\000\004\032\u0624\001" +
                          "\001\000\002\001\001\000\002\001\001\000\004\032\u0627" +
                          "\001\001\000\002\001\001\000\004\331\u0629\001\001\000" +
                          "\002\001\001\000\004\031\u062b\001\001\000\002\001\001" +
                          "\000\004\311\u062f\001\001\000\002\001\001\000\002\001" +
                          "\001\000\002\001\001\000\002\001\001\000\004\235\u0632" +
                          "\001\001\000\002\001\001\000\002\001\001\000\004\334" +
                          "\u0635\001\001\000\002\001\001\000\004\032\u0637\001\001" +
                          "\000\002\001\001\000\004\334\u0639\001\001\000\002\001" +
                          "\001\000\004\032\u063b\001\001\000\002\001\001\000\004" +
                          "\323\u063d\001\001\000\002\001\001\000\002\001\001\000" +
                          "\004\235\u0640\001\001\000\002\001\001\000\002\001\001" +
                          "\000\004\301\u0644\001\001\000\002\001\001\000\002\001" +
                          "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                          "\000\006\027\065\234\u0649\001\001\000\002\001\001\000" +
                          "\002\001\001\000\004\324\u064c\001\001\000\002\001\001" +
                          "\000\004\031\u064e\001\001\000\002\001\001\000\004\313" +
                          "\u0650\001\001\000\002\001\001\000\002\001\001\000\002" +
                          "\001\001\000\002\001\001\000\006\027\065\234\u0655\001" +
                          "\001\000\002\001\001\000\002\001\001\000\004\334\u0658" +
                          "\001\001\000\002\001\001\000\004\032\u065a\001\001\000" +
                          "\002\001\001\000\004\332\u065c\001\001\000\002\001\001" +
                          "\000\004\032\u065e\001\001\000\002\001\001\000\004\325" +
                          "\u0660\001\001\000\002\001\001\000\004\031\u0662\001\001" +
                          "\000\002\001\001\000\004\265\u0667\001\001\000\002\001" +
                          "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                          "\000\002\001\001\000\006\027\065\234\u066a\001\001\000" +
                          "\002\001\001\000\002\001\001\000\004\311\u066d\001\001" +
                          "\000\002\001\001\000\002\001\001\000\004\235\u0670\001" +
                          "\001\000\002\001\001\000\002\001\001\000\004\313\u0673" +
                          "\001\001\000\002\001\001\000\004\032\u0675\001\001\000" +
                          "\002\001\001\000\004\312\u0677\001\001\000\002\001\001" +
                          "\000\004\032\u0679\001\001\000\002\001\001\000\004\300" +
                          "\u067b\001\001\000\002\001\001\000\004\052\u0681\001\001" +
                          "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                          "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
                          "\236\u0684\001\001\000\002\001\001\000\004\111\u068a\001" +
                          "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                          "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                          "\006\027\065\234\u068d\001\001\000\002\001\001\000\002" +
                          "\001\001\000\004\160\u0693\001\001\000\002\001\001\000" +
                          "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                          "\001\001\000\004\235\u0696\001\001\000\002\001\001\000" +
                          "\002\001\001\000\004\217\u069b\001\001\000\002\001\001" +
                          "\000\002\001\001\000\002\001\001\000\004\031\u069d\001" +
                          "\001\000\002\001\001\000\004\231\u06a0\001\001\000\002" +
                          "\001\001\000\002\001\001\000\004\032\u06a2\001\001\000" +
                          "\002\001\001\000\002\001\001\000\004\032\u06a5\001\001" +
                          "\000\002\001\001\000\004\225\u06a7\001\001\000\002\001" +
                          "\001\000\004\031\u06a9\001\001\000\002\001\001\000\004" +
                          "\177\u06ad\001\001\000\002\001\001\000\002\001\001\000" +
                          "\002\001\001\000\002\001\001\000\004\235\u06b0\001\001" +
                          "\000\002\001\001\000\002\001\001\000\004\231\u06b3\001" +
                          "\001\000\002\001\001\000\004\032\u06b5\001\001\000\002" +
                          "\001\001\000\004\231\u06b7\001\001\000\002\001\001\000" +
                          "\004\032\u06b9\001\001\000\002\001\001\000\004\216\u06bb" +
                          "\001\001\000\002\001\001\000\002\001\001\000\004\235" +
                          "\u06be\001\001\000\002\001\001\000\002\001\001\000\004" +
                          "\164\u06c4\001\001\000\002\001\001\000\002\001\001\000" +
                          "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
                          "\027\065\234\u06c7\001\001\000\002\001\001\000\002\001" +
                          "\001\000\004\217\u06ca\001\001\000\002\001\001\000\004" +
                          "\031\u06cc\001\001\000\002\001\001\000\004\203\u06cf\001" +
                          "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                          "\000\002\001\001\000\006\027\065\234\u06d3\001\001\000" +
                          "\002\001\001\000\002\001\001\000\004\231\u06d6\001\001" +
                          "\000\002\001\001\000\004\032\u06d8\001\001\000\002\001" +
                          "\001\000\004\226\u06da\001\001\000\002\001\001\000\004" +
                          "\032\u06dc\001\001\000\002\001\001\000\004\221\u06de\001" +
                          "\001\000\002\001\001\000\004\031\u06e0\001\001\000\002" +
                          "\001\001\000\004\135\u06e3\001\001\000\002\001\001\000" +
                          "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                          "\001\001\000\006\027\065\234\u06e8\001\001\000\002\001" +
                          "\001\000\002\001\001\000\004\177\u06eb\001\001\000\002" +
                          "\001\001\000\002\001\001\000\004\235\u06ee\001\001\000" +
                          "\002\001\001\000\002\001\001\000\004\203\u06f1\001\001" +
                          "\000\002\001\001\000\004\032\u06f3\001\001\000\002\001" +
                          "\001\000\004\202\u06f5\001\001\000\002\001\001\000\004" +
                          "\032\u06f7\001\001\000\002\001\001\000\004\163\u06f9\001" +
                          "\001\000\002\001\001\000\002\001\001\000\006\027\065" +
                          "\234\u06fc\001\001\000\002\001\001\000\002\001\001\000" +
                          "\004\110\u0702\001\001\000\002\001\001\000\002\001\001" +
                          "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                          "\004\236\u0705\001\001\000\002\001\001\000\004\160\u0707" +
                          "\001\001\000\002\001\001\000\002\001\001\000\004\235" +
                          "\u070a\001\001\000\002\001\001\000\002\001\001\000\004" +
                          "\162\u070f\001\001\000\002\001\001\000\002\001\001\000" +
                          "\002\001\001\000\002\001\001\000\004\236\u0712\001\001" +
                          "\000\002\001\001\000\004\217\u0714\001\001\000\002\001" +
                          "\001\000\004\031\u0716\001\001\000\002\001\001\000\004" +
                          "\201\u0719\001\001\000\002\001\001\000\002\001\001\000" +
                          "\002\001\001\000\004\236\u071c\001\001\000\002\001\001" +
                          "\000\004\231\u071e\001\001\000\002\001\001\000\004\032" +
                          "\u0720\001\001\000\002\001\001\000\004\227\u0722\001\001" +
                          "\000\002\001\001\000\004\032\u0724\001\001\000\002\001" +
                          "\001\000\004\220\u0726\001\001\000\002\001\001\000\004" +
                          "\031\u0728\001\001\000\002\001\001\000\004\134\u072c\001" +
                          "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                          "\000\002\001\001\000\004\236\u072f\001\001\000\002\001" +
                          "\001\000\004\177\u0731\001\001\000\002\001\001\000\002" +
                          "\001\001\000\004\235\u0734\001\001\000\002\001\001\000" +
                          "\002\001\001\000\004\201\u0737\001\001\000\002\001\001" +
                          "\000\004\032\u0739\001\001\000\002\001\001\000\004\200" +
                          "\u073b\001\001\000\002\001\001\000\004\032\u073d\001\001" +
                          "\000\002\001\001\000\004\161\u073f\001\001\000\002\001" +
                          "\001\000\002\001\001\000\004\235\u0742\001\001\000\002" +
                          "\001\001\000\002\001\001\000\004\113\u0749\001\001\000" +
                          "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                          "\001\001\000\002\001\001\000\004\236\u074b\001\001\000" +
                          "\002\001\001\000\004\164\u074d\001\001\000\002\001\001" +
                          "\000\002\001\001\000\006\027\065\234\u0750\001\001\000" +
                          "\002\001\001\000\002\001\001\000\004\162\u0753\001\001" +
                          "\000\002\001\001\000\002\001\001\000\004\235\u0756\001" +
                          "\001\000\002\001\001\000\002\001\001\000\004\165\u0759" +
                          "\001\001\000\002\001\001\000\004\031\u075b\001\001\000" +
                          "\002\001\001\000\004\137\u075e\001\001\000\002\001\001" +
                          "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                          "\004\236\u0762\001\001\000\002\001\001\000\004\203\u0764" +
                          "\001\001\000\002\001\001\000\002\001\001\000\006\027" +
                          "\065\234\u0767\001\001\000\002\001\001\000\002\001\001" +
                          "\000\004\201\u076a\001\001\000\002\001\001\000\004\032" +
                          "\u076c\001\001\000\002\001\001\000\004\204\u076e\001\001" +
                          "\000\002\001\001\000\004\031\u0770\001\001\000\002\001" +
                          "\001\000\004\071\u0776\001\001\000\002\001\001\000\002" +
                          "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                          "\001\000\004\236\u0778\001\001\000\002\001\001\000\004" +
                          "\135\u077a\001\001\000\002\001\001\000\002\001\001\000" +
                          "\006\027\065\234\u077d\001\001\000\002\001\001\000\002" +
                          "\001\001\000\004\134\u0780\001\001\000\002\001\001\000" +
                          "\002\001\001\000\004\235\u0783\001\001\000\002\001\001" +
                          "\000\002\001\001\000\004\137\u0786\001\001\000\002\001" +
                          "\001\000\004\032\u0788\001\001\000\002\001\001\000\004" +
                          "\136\u078a\001\001\000\002\001\001\000\004\032\u078c\001" +
                          "\001\000\002\001\001\000\004\112\u078e\001\001\000\002" +
                          "\001\001\000\004\236\u0790\001\001\000\002\001\001\000" +
                          "\004\060\u0796\001\001\000\002\001\001\000\002\001\001" +
                          "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                          "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
                          "\111\u079b\001\001\000\002\001\001\000\002\001\001\000" +
                          "\006\027\065\234\u079e\001\001\000\002\001\001\000\002" +
                          "\001\001\000\004\122\u07a4\001\001\000\002\001\001\000" +
                          "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                          "\001\001\000\002\001\001\000\002\001\001\000\004\160" +
                          "\u07a9\001\001\000\002\001\001\000\002\001\001\000\004" +
                          "\235\u07ac\001\001\000\002\001\001\000\002\001\001\000" +
                          "\004\173\u07b1\001\001\000\002\001\001\000\002\001\001" +
                          "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                          "\002\001\001\000\004\217\u07b6\001\001\000\002\001\001" +
                          "\000\004\031\u07b8\001\001\000\002\001\001\000\004\212" +
                          "\u07bb\001\001\000\002\001\001\000\002\001\001\000\002" +
                          "\001\001\000\002\001\001\000\002\001\001\000\004\231" +
                          "\u07c0\001\001\000\002\001\001\000\004\032\u07c2\001\001" +
                          "\000\002\001\001\000\004\224\u07c4\001\001\000\002\001" +
                          "\001\000\004\032\u07c6\001\001\000\002\001\001\000\004" +
                          "\223\u07c8\001\001\000\002\001\001\000\004\031\u07ca\001" +
                          "\001\000\002\001\001\000\004\146\u07ce\001\001\000\002" +
                          "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                          "\001\000\002\001\001\000\002\001\001\000\004\177\u07d3" +
                          "\001\001\000\002\001\001\000\002\001\001\000\004\235" +
                          "\u07d6\001\001\000\002\001\001\000\002\001\001\000\004" +
                          "\212\u07d9\001\001\000\002\001\001\000\004\032\u07db\001" +
                          "\001\000\002\001\001\000\004\211\u07dd\001\001\000\002" +
                          "\001\001\000\004\032\u07df\001\001\000\002\001\001\000" +
                          "\004\172\u07e1\001\001\000\002\001\001\000\002\001\001" +
                          "\000\004\235\u07e4\001\001\000\002\001\001\000\002\001" +
                          "\001\000\004\126\u07ea\001\001\000\002\001\001\000\002" +
                          "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                          "\001\000\002\001\001\000\002\001\001\000\004\164\u07ef" +
                          "\001\001\000\002\001\001\000\002\001\001\000\006\027" +
                          "\065\234\u07f2\001\001\000\002\001\001\000\002\001\001" +
                          "\000\004\173\u07f5\001\001\000\002\001\001\000\004\031" +
                          "\u07f7\001\001\000\002\001\001\000\004\152\u07f9\001\001" +
                          "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                          "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
                          "\203\u0800\001\001\000\002\001\001\000\002\001\001\000" +
                          "\006\027\065\234\u0803\001\001\000\002\001\001\000\002" +
                          "\001\001\000\004\212\u0806\001\001\000\002\001\001\000" +
                          "\004\032\u0808\001\001\000\002\001\001\000\004\214\u080a" +
                          "\001\001\000\002\001\001\000\004\032\u080c\001\001\000" +
                          "\002\001\001\000\004\175\u080e\001\001\000\002\001\001" +
                          "\000\004\031\u0810\001\001\000\002\001\001\000\004\077" +
                          "\u0815\001\001\000\002\001\001\000\002\001\001\000\002" +
                          "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                          "\001\000\002\001\001\000\004\135\u081a\001\001\000\002" +
                          "\001\001\000\002\001\001\000\006\027\065\234\u081d\001" +
                          "\001\000\002\001\001\000\002\001\001\000\004\146\u0820" +
                          "\001\001\000\002\001\001\000\002\001\001\000\004\235" +
                          "\u0823\001\001\000\002\001\001\000\002\001\001\000\004" +
                          "\152\u0826\001\001\000\002\001\001\000\004\032\u0828\001" +
                          "\001\000\002\001\001\000\004\151\u082a\001\001\000\002" +
                          "\001\001\000\004\032\u082c\001\001\000\002\001\001\000" +
                          "\004\125\u082e\001\001\000\002\001\001\000\002\001\001" +
                          "\000\006\027\065\234\u0831\001\001\000\002\001\001\000" +
                          "\002\001\001\000\006\057\u0837\257\u0838\001\001\000\002" +
                          "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                          "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                          "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                          "\004\277\u083f\001\001\000\002\001\001\000\004\110\u0841" +
                          "\001\001\000\002\001\001\000\004\236\u0843\001\001\000" +
                          "\002\001\001\000\004\122\u0845\001\001\000\002\001\001" +
                          "\000\002\001\001\000\004\235\u0848\001\001\000\002\001" +
                          "\001\000\002\001\001\000\006\124\u084d\306\u084f\001\001" +
                          "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                          "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                          "\001\001\000\002\001\001\000\002\001\001\000\004\324" +
                          "\u0855\001\001\000\002\001\001\000\004\162\u0857\001\001" +
                          "\000\002\001\001\000\004\236\u0859\001\001\000\002\001" +
                          "\001\000\004\173\u085b\001\001\000\002\001\001\000\004" +
                          "\031\u085d\001\001\000\002\001\001\000\006\150\u0860\320" +
                          "\u0862\001\001\000\002\001\001\000\002\001\001\000\002" +
                          "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                          "\001\000\002\001\001\000\002\001\001\000\004\334\u0868" +
                          "\001\001\000\002\001\001\000\004\201\u086a\001\001\000" +
                          "\002\001\001\000\004\236\u086c\001\001\000\002\001\001" +
                          "\000\004\212\u086e\001\001\000\002\001\001\000\004\032" +
                          "\u0870\001\001\000\002\001\001\000\006\213\u0873\330\u0872" +
                          "\001\001\000\002\001\001\000\002\001\001\000\004\032" +
                          "\u0875\001\001\000\002\001\001\000\006\174\u0878\327\u0877" +
                          "\001\001\000\002\001\001\000\002\001\001\000\004\031" +
                          "\u087a\001\001\000\002\001\001\000\006\076\u087d\271\u0880" +
                          "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                          "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                          "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                          "\004\311\u0886\001\001\000\002\001\001\000\004\134\u0888" +
                          "\001\001\000\002\001\001\000\004\236\u088a\001\001\000" +
                          "\002\001\001\000\004\146\u088c\001\001\000\002\001\001" +
                          "\000\002\001\001\000\004\235\u088f\001\001\000\002\001" +
                          "\001\000\002\001\001\000\006\150\u0892\320\u0893\001\001" +
                          "\000\002\001\001\000\002\001\001\000\004\032\u0895\001" +
                          "\001\000\002\001\001\000\006\147\u0897\317\u0898\001\001" +
                          "\000\002\001\001\000\002\001\001\000\004\032\u089a\001" +
                          "\001\000\002\001\001\000\006\123\u089d\305\u089c\001\001" +
                          "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                          "\004\235\u08a0\001\001\000\002\001\001\000\002\001\001" +
                          "\000\006\062\u08a5\261\u08a7\001\001\000\002\001\001\000" +
                          "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                          "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                          "\001\000\002\001\001\000\002\001\001\000\004\301\u08ae" +
                          "\001\001\000\002\001\001\000\004\113\u08b0\001\001\000" +
                          "\002\001\001\000\004\236\u08b2\001\001\000\002\001\001" +
                          "\000\004\126\u08b4\001\001\000\002\001\001\000\002\001" +
                          "\001\000\006\027\065\234\u08b7\001\001\000\002\001\001" +
                          "\000\002\001\001\000\006\124\u08ba\306\u08bb\001\001\000" +
                          "\002\001\001\000\002\001\001\000\004\031\u08bd\001\001" +
                          "\000\002\001\001\000\006\101\u08c1\273\u08c3\001\001\000" +
                          "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                          "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                          "\001\000\002\001\001\000\002\001\001\000\004\313\u08c9" +
                          "\001\001\000\002\001\001\000\004\137\u08cb\001\001\000" +
                          "\002\001\001\000\004\236\u08cd\001\001\000\002\001\001" +
                          "\000\004\152\u08cf\001\001\000\002\001\001\000\002\001" +
                          "\001\000\006\027\065\234\u08d2\001\001\000\002\001\001" +
                          "\000\002\001\001\000\006\150\u08d5\320\u08d6\001\001\000" +
                          "\002\001\001\000\002\001\001\000\004\032\u08d8\001\001" +
                          "\000\002\001\001\000\006\153\u08db\321\u08da\001\001\000" +
                          "\002\001\001\000\002\001\001\000\004\032\u08dd\001\001" +
                          "\000\002\001\001\000\006\127\u08df\307\u08e0\001\001\000" +
                          "\002\001\001\000\002\001\001\000\004\031\u08e2\001\001" +
                          "\000\002\001\001\000\006\045\u08e9\247\u08e5\001\001\000" +
                          "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                          "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                          "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                          "\000\004\265\u08ef\001\001\000\002\001\001\000\004\071" +
                          "\u08f1\001\001\000\002\001\001\000\004\236\u08f3\001\001" +
                          "\000\002\001\001\000\004\077\u08f5\001\001\000\002\001" +
                          "\001\000\002\001\001\000\006\027\065\234\u08f8\001\001" +
                          "\000\002\001\001\000\002\001\001\000\006\076\u08fb\271" +
                          "\u08fc\001\001\000\002\001\001\000\002\001\001\000\002" +
                          "\001\001\000\004\235\u08ff\001\001\000\002\001\001\000" +
                          "\002\001\001\000\006\101\u0902\273\u0903\001\001\000\002" +
                          "\001\001\000\002\001\001\000\004\032\u0905\001\001\000" +
                          "\002\001\001\000\006\100\u0908\272\u0907\001\001\000\002" +
                          "\001\001\000\002\001\001\000\004\032\u090a\001\001\000" +
                          "\002\001\001\000\006\061\u090d\260\u090c\001\001\000\002" +
                          "\001\001\000\002\001\001\000\002\001\001\000\004\235" +
                          "\u0910\001\001\000\002\001\001\000\002\001\001\000\006" +
                          "\043\u0916\245\u0915\001\001\000\002\001\001\000\002\001" +
                          "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                          "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                          "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
                          "\256\u0920\001\001\000\002\001\001\000\002\001\001\000" +
                          "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                          "\001\001\000\004\233\u0926\001\001\000\002\001\001\000" +
                          "\002\001\001\000\004\301\u0929\001\001\000\002\001\001" +
                          "\000\002\001\001\000\006\027\065\234\u092c\001\001\000" +
                          "\002\001\001\000\002\001\001\000\004\303\u0932\001\001" +
                          "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                          "\002\001\001\000\002\001\001\000\004\233\u0935\001\001" +
                          "\000\002\001\001\000\002\001\001\000\004\324\u0938\001" +
                          "\001\000\002\001\001\000\004\031\u093a\001\001\000\002" +
                          "\001\001\000\004\315\u093d\001\001\000\002\001\001\000" +
                          "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
                          "\233\u0941\001\001\000\002\001\001\000\002\001\001\000" +
                          "\004\334\u0944\001\001\000\002\001\001\000\004\032\u0946" +
                          "\001\001\000\002\001\001\000\004\335\u0948\001\001\000" +
                          "\002\001\001\000\004\032\u094a\001\001\000\002\001\001" +
                          "\000\004\326\u094c\001\001\000\002\001\001\000\004\031" +
                          "\u094e\001\001\000\002\001\001\000\004\270\u0953\001\001" +
                          "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                          "\002\001\001\000\002\001\001\000\004\233\u0956\001\001" +
                          "\000\002\001\001\000\002\001\001\000\004\313\u0959\001" +
                          "\001\000\002\001\001\000\002\001\001\000\006\027\065" +
                          "\234\u095c\001\001\000\002\001\001\000\002\001\001\000" +
                          "\004\315\u095f\001\001\000\002\001\001\000\004\032\u0961" +
                          "\001\001\000\002\001\001\000\004\316\u0963\001\001\000" +
                          "\002\001\001\000\004\032\u0965\001\001\000\002\001\001" +
                          "\000\004\304\u0967\001\001\000\002\001\001\000\004\056" +
                          "\u096e\001\001\000\002\001\001\000\002\001\001\000\002" +
                          "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                          "\001\000\004\236\u0970\001\001\000\002\001\001\000\004" +
                          "\120\u0976\001\001\000\002\001\001\000\002\001\001\000" +
                          "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                          "\001\001\000\004\233\u0979\001\001\000\002\001\001\000" +
                          "\002\001\001\000\004\164\u097c\001\001\000\002\001\001" +
                          "\000\002\001\001\000\006\027\065\234\u097f\001\001\000" +
                          "\002\001\001\000\002\001\001\000\004\167\u0985\001\001" +
                          "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                          "\002\001\001\000\002\001\001\000\004\233\u0988\001\001" +
                          "\000\002\001\001\000\002\001\001\000\004\217\u098b\001" +
                          "\001\000\002\001\001\000\004\031\u098d\001\001\000\002" +
                          "\001\001\000\004\206\u0990\001\001\000\002\001\001\000" +
                          "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
                          "\233\u0994\001\001\000\002\001\001\000\002\001\001\000" +
                          "\004\231\u0997\001\001\000\002\001\001\000\004\032\u0999" +
                          "\001\001\000\002\001\001\000\004\232\u099b\001\001\000" +
                          "\002\001\001\000\004\032\u099d\001\001\000\002\001\001" +
                          "\000\004\222\u099f\001\001\000\002\001\001\000\004\031" +
                          "\u09a1\001\001\000\002\001\001\000\004\144\u09a6\001\001" +
                          "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                          "\002\001\001\000\002\001\001\000\004\233\u09a9\001\001" +
                          "\000\002\001\001\000\002\001\001\000\004\203\u09ac\001" +
                          "\001\000\002\001\001\000\002\001\001\000\006\027\065" +
                          "\234\u09af\001\001\000\002\001\001\000\002\001\001\000" +
                          "\004\206\u09b2\001\001\000\002\001\001\000\004\032\u09b4" +
                          "\001\001\000\002\001\001\000\004\210\u09b6\001\001\000" +
                          "\002\001\001\000\004\032\u09b8\001\001\000\002\001\001" +
                          "\000\004\171\u09ba\001\001\000\002\001\001\000\002\001" +
                          "\001\000\004\233\u09bd\001\001\000\002\001\001\000\002" +
                          "\001\001\000\004\113\u09c0\001\001\000\002\001\001\000" +
                          "\002\001\001\000\006\027\065\234\u09c3\001\001\000\002" +
                          "\001\001\000\002\001\001\000\004\116\u09c6\001\001\000" +
                          "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                          "\001\001\000\002\001\001\000\002\001\001\000\004\233" +
                          "\u09cd\001\001\000\002\001\001\000\002\001\001\000\004" +
                          "\162\u09d0\001\001\000\002\001\001\000\004\236\u09d2\001" +
                          "\001\000\002\001\001\000\004\167\u09d4\001\001\000\002" +
                          "\001\001\000\004\031\u09d6\001\001\000\002\001\001\000" +
                          "\004\142\u09db\001\001\000\002\001\001\000\002\001\001" +
                          "\000\002\001\001\000\002\001\001\000\004\236\u09dd\001" +
                          "\001\000\002\001\001\000\004\206\u09df\001\001\000\002" +
                          "\001\001\000\002\001\001\000\004\233\u09e2\001\001\000" +
                          "\002\001\001\000\002\001\001\000\004\201\u09e5\001\001" +
                          "\000\002\001\001\000\004\032\u09e7\001\001\000\002\001" +
                          "\001\000\004\207\u09e9\001\001\000\002\001\001\000\004" +
                          "\032\u09eb\001\001\000\002\001\001\000\004\170\u09ed\001" +
                          "\001\000\002\001\001\000\004\031\u09ef\001\001\000\002" +
                          "\001\001\000\004\075\u09f2\001\001\000\002\001\001\000" +
                          "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                          "\001\001\000\002\001\001\000\004\233\u09f8\001\001\000" +
                          "\002\001\001\000\002\001\001\000\004\137\u09fb\001\001" +
                          "\000\002\001\001\000\004\236\u09fd\001\001\000\002\001" +
                          "\001\000\004\144\u09ff\001\001\000\002\001\001\000\002" +
                          "\001\001\000\006\027\065\234\u0a02\001\001\000\002\001" +
                          "\001\000\002\001\001\000\004\142\u0a05\001\001\000\002" +
                          "\001\001\000\004\032\u0a07\001\001\000\002\001\001\000" +
                          "\004\145\u0a09\001\001\000\002\001\001\000\004\032\u0a0b" +
                          "\001\001\000\002\001\001\000\004\121\u0a0d\001\001\000" +
                          "\002\001\001\000\004\236\u0a0f\001\001\000\002\001\001" +
                          "\000\004\067\u0a15\001\001\000\002\001\001\000\002\001" +
                          "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                          "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                          "\004\120\u0a1a\001\001\000\002\001\001\000\002\001\001" +
                          "\000\004\233\u0a1d\001\001\000\002\001\001\000\002\001" +
                          "\001\000\004\126\u0a20\001\001\000\002\001\001\000\002" +
                          "\001\001\000\006\027\065\234\u0a23\001\001\000\002\001" +
                          "\001\000\002\001\001\000\004\131\u0a27\001\001\000\002" +
                          "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                          "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                          "\000\004\167\u0a2e\001\001\000\002\001\001\000\002\001" +
                          "\001\000\004\233\u0a31\001\001\000\002\001\001\000\002" +
                          "\001\001\000\004\173\u0a34\001\001\000\002\001\001\000" +
                          "\004\031\u0a36\001\001\000\002\001\001\000\004\155\u0a39" +
                          "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                          "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                          "\000\004\206\u0a3f\001\001\000\002\001\001\000\002\001" +
                          "\001\000\004\233\u0a42\001\001\000\002\001\001\000\002" +
                          "\001\001\000\004\212\u0a45\001\001\000\002\001\001\000" +
                          "\004\032\u0a47\001\001\000\002\001\001\000\004\215\u0a49" +
                          "\001\001\000\002\001\001\000\004\032\u0a4b\001\001\000" +
                          "\002\001\001\000\004\176\u0a4d\001\001\000\002\001\001" +
                          "\000\004\031\u0a4f\001\001\000\002\001\001\000\004\106" +
                          "\u0a53\001\001\000\002\001\001\000\002\001\001\000\002" +
                          "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                          "\001\000\002\001\001\000\004\144\u0a59\001\001\000\002" +
                          "\001\001\000\002\001\001\000\004\233\u0a5c\001\001\000" +
                          "\002\001\001\000\002\001\001\000\004\152\u0a5f\001\001" +
                          "\000\002\001\001\000\002\001\001\000\006\027\065\234" +
                          "\u0a62\001\001\000\002\001\001\000\002\001\001\000\004" +
                          "\155\u0a65\001\001\000\002\001\001\000\004\032\u0a67\001" +
                          "\001\000\002\001\001\000\004\157\u0a69\001\001\000\002" +
                          "\001\001\000\004\032\u0a6b\001\001\000\002\001\001\000" +
                          "\004\133\u0a6d\001\001\000\002\001\001\000\002\001\001" +
                          "\000\004\233\u0a70\001\001\000\002\001\001\000\002\001" +
                          "\001\000\006\062\u0a73\261\u0a74\001\001\000\002\001\001" +
                          "\000\002\001\001\000\002\001\001\000\006\027\065\234" +
                          "\u0a77\001\001\000\002\001\001\000\002\001\001\000\006" +
                          "\065\u0a80\263\u0a7c\001\001\000\002\001\001\000\002\001" +
                          "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                          "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                          "\002\001\001\000\002\001\001\000\004\303\u0a85\001\001" +
                          "\000\002\001\001\000\004\116\u0a87\001\001\000\002\001" +
                          "\001\000\002\001\001\000\004\233\u0a8a\001\001\000\002" +
                          "\001\001\000\002\001\001\000\006\124\u0a8d\306\u0a8e\001" +
                          "\001\000\002\001\001\000\002\001\001\000\004\236\u0a90" +
                          "\001\001\000\002\001\001\000\004\131\u0a92\001\001\000" +
                          "\002\001\001\000\004\031\u0a94\001\001\000\002\001\001" +
                          "\000\006\104\u0a97\275\u0a9a\001\001\000\002\001\001\000" +
                          "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                          "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                          "\001\000\002\001\001\000\004\315\u0aa0\001\001\000\002" +
                          "\001\001\000\004\142\u0aa2\001\001\000\002\001\001\000" +
                          "\002\001\001\000\004\233\u0aa5\001\001\000\002\001\001" +
                          "\000\002\001\001\000\006\150\u0aa8\320\u0aa9\001\001\000" +
                          "\002\001\001\000\002\001\001\000\004\236\u0aab\001\001" +
                          "\000\002\001\001\000\004\155\u0aad\001\001\000\002\001" +
                          "\001\000\004\032\u0aaf\001\001\000\002\001\001\000\006" +
                          "\156\u0ab2\322\u0ab1\001\001\000\002\001\001\000\002\001" +
                          "\001\000\004\032\u0ab4\001\001\000\002\001\001\000\006" +
                          "\132\u0ab7\310\u0ab6\001\001\000\002\001\001\000\002\001" +
                          "\001\000\004\031\u0ab9\001\001\000\002\001\001\000\006" +
                          "\051\u0abf\252\u0ac0\001\001\000\002\001\001\000\002\001" +
                          "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                          "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                          "\002\001\001\000\002\001\001\000\004\270\u0ac6\001\001" +
                          "\000\002\001\001\000\004\075\u0ac8\001\001\000\002\001" +
                          "\001\000\002\001\001\000\004\233\u0acb\001\001\000\002" +
                          "\001\001\000\002\001\001\000\006\101\u0ace\273\u0acf\001" +
                          "\001\000\002\001\001\000\002\001\001\000\004\236\u0ad1" +
                          "\001\001\000\002\001\001\000\004\106\u0ad3\001\001\000" +
                          "\002\001\001\000\002\001\001\000\006\027\065\234\u0ad6" +
                          "\001\001\000\002\001\001\000\002\001\001\000\006\104" +
                          "\u0ad9\275\u0ada\001\001\000\002\001\001\000\002\001\001" +
                          "\000\004\032\u0adc\001\001\000\002\001\001\000\006\107" +
                          "\u0adf\276\u0ade\001\001\000\002\001\001\000\002\001\001" +
                          "\000\004\032\u0ae1\001\001\000\002\001\001\000\006\070" +
                          "\u0ae3\264\u0ae4\001\001\000\002\001\001\000\002\001\001" +
                          "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                          "\004\241\u0aec\001\001\000\002\001\001\000\002\001\001" +
                          "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                          "\002\001\001\000\002\001\001\000\004\233\u0af1\001\001" +
                          "\000\002\001\001\000\002\001\001\000\004\253\u0af4\001" +
                          "\001\000\002\001\001\000\002\001\001\000\006\027\065" +
                          "\234\u0af7\001\001\000\002\001\001\000\002\001\001\000" +
                          "\004\254\u0afa\001\001\000\002\001\001\000\002\001\001" +
                          "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                          "\002\001\001\000\004\233\u0b01\001\001\000\002\001\001" +
                          "\000\002\001\001\000\004\277\u0b04\001\001\000\002\001" +
                          "\001\000\002\001\001\000\004\235\u0b07\001\001\000\002" +
                          "\001\001\000\002\001\001\000\004\303\u0b0a\001\001\000" +
                          "\002\001\001\000\004\031\u0b0c\001\001\000\002\001\001" +
                          "\000\004\266\u0b10\001\001\000\002\001\001\000\002\001" +
                          "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                          "\000\004\233\u0b14\001\001\000\002\001\001\000\002\001" +
                          "\001\000\004\311\u0b17\001\001\000\002\001\001\000\002" +
                          "\001\001\000\004\235\u0b1a\001\001\000\002\001\001\000" +
                          "\002\001\001\000\004\315\u0b1d\001\001\000\002\001\001" +
                          "\000\004\032\u0b1f\001\001\000\002\001\001\000\004\314" +
                          "\u0b21\001\001\000\002\001\001\000\004\032\u0b23\001\001" +
                          "\000\002\001\001\000\004\302\u0b25\001\001\000\002\001" +
                          "\001\000\002\001\001\000\004\235\u0b28\001\001\000\002" +
                          "\001\001\000\002\001\001\000\004\256\u0b2b\001\001\000" +
                          "\002\001\001\000\004\031\u0b2d\001\001\000\002\001\001" +
                          "\000\004\246\u0b33\001\001\000\002\001\001\000\002\001" +
                          "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                          "\000\002\001\001\000\004\233\u0b36\001\001\000\002\001" +
                          "\001\000\002\001\001\000\004\265\u0b39\001\001\000\002" +
                          "\001\001\000\002\001\001\000\006\027\065\234\u0b3c\001" +
                          "\001\000\002\001\001\000\002\001\001\000\004\266\u0b3f" +
                          "\001\001\000\002\001\001\000\002\001\001\000\004\235" +
                          "\u0b42\001\001\000\002\001\001\000\002\001\001\000\004" +
                          "\270\u0b45\001\001\000\002\001\001\000\004\032\u0b47\001" +
                          "\001\000\002\001\001\000\004\267\u0b49\001\001\000\002" +
                          "\001\001\000\004\032\u0b4b\001\001\000\002\001\001\000" +
                          "\004\255\u0b4d\001\001\000\002\001\001\000\004\036\u0b55" +
                          "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                          "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                          "\000\002\001\001\000\002\001\001\000\004\233\u0b58\001" +
                          "\001\000\002\001\001\000\002\001\001\000\004\052\u0b5b" +
                          "\001\001\000\002\001\001\000\004\236\u0b5d\001\001\000" +
                          "\002\001\001\000\004\054\u0b5f\001\001\000\002\001\001" +
                          "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                          "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
                          "\233\u0b67\001\001\000\002\001\001\000\002\001\001\000" +
                          "\004\111\u0b6a\001\001\000\002\001\001\000\002\001\001" +
                          "\000\006\027\065\234\u0b6d\001\001\000\002\001\001\000" +
                          "\002\001\001\000\004\114\u0b74\001\001\000\002\001\001" +
                          "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                          "\002\001\001\000\002\001\001\000\004\233\u0b77\001\001" +
                          "\000\002\001\001\000\002\001\001\000\004\160\u0b7a\001" +
                          "\001\000\002\001\001\000\002\001\001\000\004\235\u0b7d" +
                          "\001\001\000\002\001\001\000\002\001\001\000\004\167" +
                          "\u0b80\001\001\000\002\001\001\000\004\031\u0b82\001\001" +
                          "\000\002\001\001\000\004\140\u0b87\001\001\000\002\001" +
                          "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                          "\000\002\001\001\000\004\233\u0b8a\001\001\000\002\001" +
                          "\001\000\002\001\001\000\004\177\u0b8d\001\001\000\002" +
                          "\001\001\000\002\001\001\000\004\235\u0b90\001\001\000" +
                          "\002\001\001\000\002\001\001\000\004\206\u0b93\001\001" +
                          "\000\002\001\001\000\004\032\u0b95\001\001\000\002\001" +
                          "\001\000\004\205\u0b97\001\001\000\002\001\001\000\004" +
                          "\032\u0b99\001\001\000\002\001\001\000\004\166\u0b9b\001" +
                          "\001\000\002\001\001\000\002\001\001\000\004\235\u0b9e" +
                          "\001\001\000\002\001\001\000\002\001\001\000\004\120" +
                          "\u0ba1\001\001\000\002\001\001\000\004\031\u0ba3\001\001" +
                          "\000\002\001\001\000\004\073\u0ba8\001\001\000\002\001" +
                          "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                          "\000\002\001\001\000\002\001\001\000\004\233\u0bac\001" +
                          "\001\000\002\001\001\000\002\001\001\000\004\135\u0baf" +
                          "\001\001\000\002\001\001\000\002\001\001\000\006\027" +
                          "\065\234\u0bb2\001\001\000\002\001\001\000\002\001\001" +
                          "\000\004\140\u0bb5\001\001\000\002\001\001\000\002\001" +
                          "\001\000\004\235\u0bb8\001\001\000\002\001\001\000\002" +
                          "\001\001\000\004\144\u0bbb\001\001\000\002\001\001\000" +
                          "\004\032\u0bbd\001\001\000\002\001\001\000\004\143\u0bbf" +
                          "\001\001\000\002\001\001\000\004\032\u0bc1\001\001\000" +
                          "\002\001\001\000\004\117\u0bc3\001\001\000\002\001\001" +
                          "\000\002\001\001\000\006\027\065\234\u0bc6\001\001\000" +
                          "\002\001\001\000\002\001\001\000\004\053\u0bce\001\001" +
                          "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                          "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                          "\001\001\000\004\233\u0bd1\001\001\000\002\001\001\000" +
                          "\002\001\001\000\004\110\u0bd4\001\001\000\002\001\001" +
                          "\000\004\236\u0bd6\001\001\000\002\001\001\000\004\114" +
                          "\u0bd8\001\001\000\002\001\001\000\002\001\001\000\004" +
                          "\235\u0bdb\001\001\000\002\001\001\000\002\001\001\000" +
                          "\004\116\u0bde\001\001\000\002\001\001\000\004\031\u0be0" +
                          "\001\001\000\002\001\001\000\004\072\u0be3\001\001\000" +
                          "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                          "\001\001\000\002\001\001\000\004\236\u0be8\001\001\000" +
                          "\002\001\001\000\004\140\u0bea\001\001\000\002\001\001" +
                          "\000\002\001\001\000\004\233\u0bed\001\001\000\002\001" +
                          "\001\000\002\001\001\000\004\134\u0bf0\001\001\000\002" +
                          "\001\001\000\002\001\001\000\004\235\u0bf3\001\001\000" +
                          "\002\001\001\000\002\001\001\000\004\142\u0bf6\001\001" +
                          "\000\002\001\001\000\004\032\u0bf8\001\001\000\002\001" +
                          "\001\000\004\141\u0bfa\001\001\000\002\001\001\000\004" +
                          "\032\u0bfc\001\001\000\002\001\001\000\004\115\u0bfe\001" +
                          "\001\000\002\001\001\000\002\001\001\000\004\235\u0c01" +
                          "\001\001\000\002\001\001\000\002\001\001\000\004\056" +
                          "\u0c04\001\001\000\002\001\001\000\004\031\u0c06\001\001" +
                          "\000\002\001\001\000\004\044\u0c0b\001\001\000\002\001" +
                          "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                          "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                          "\004\233\u0c10\001\001\000\002\001\001\000\002\001\001" +
                          "\000\004\071\u0c13\001\001\000\002\001\001\000\004\236" +
                          "\u0c15\001\001\000\002\001\001\000\004\073\u0c17\001\001" +
                          "\000\002\001\001\000\002\001\001\000\006\027\065\234" +
                          "\u0c1a\001\001\000\002\001\001\000\002\001\001\000\004" +
                          "\072\u0c1d\001\001\000\002\001\001\000\002\001\001\000" +
                          "\004\235\u0c20\001\001\000\002\001\001\000\002\001\001" +
                          "\000\004\075\u0c23\001\001\000\002\001\001\000\004\032" +
                          "\u0c25\001\001\000\002\001\001\000\004\074\u0c27\001\001" +
                          "\000\002\001\001\000\004\032\u0c29\001\001\000\002\001" +
                          "\001\000\004\055\u0c2b\001\001\000\002\001\001\000\002" +
                          "\001\001\000\006\027\065\234\u0c2e\001\001\000\002\001" +
                          "\001\000\002\001\001\000\006\040\u0c33\243\u0c31\001\001" +
                          "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                          "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                          "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                          "\001\000\002\001\001\000\004\254\u0c3d\001\001\000\002" +
                          "\001\001\000\004\053\u0c3f\001\001\000\002\001\001\000" +
                          "\002\001\001\000\004\233\u0c42\001\001\000\002\001\001" +
                          "\000\002\001\001\000\006\057\u0c46\257\u0c45\001\001\000" +
                          "\002\001\001\000\002\001\001\000\004\236\u0c48\001\001" +
                          "\000\002\001\001\000\004\063\u0c4e\001\001\000\002\001" +
                          "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                          "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                          "\002\001\001\000\004\114\u0c53\001\001\000\002\001\001" +
                          "\000\002\001\001\000\004\233\u0c56\001\001\000\002\001" +
                          "\001\000\002\001\001\000\004\122\u0c59\001\001\000\002" +
                          "\001\001\000\002\001\001\000\004\235\u0c5c\001\001\000" +
                          "\002\001\001\000\002\001\001\000\004\131\u0c5f\001\001" +
                          "\000\002\001\001\000\004\031\u0c61\001\001\000\002\001" +
                          "\001\000\004\102\u0c65\001\001\000\002\001\001\000\002" +
                          "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                          "\001\000\002\001\001\000\002\001\001\000\004\140\u0c6b" +
                          "\001\001\000\002\001\001\000\002\001\001\000\004\233" +
                          "\u0c6e\001\001\000\002\001\001\000\002\001\001\000\004" +
                          "\146\u0c71\001\001\000\002\001\001\000\002\001\001\000" +
                          "\004\235\u0c74\001\001\000\002\001\001\000\002\001\001" +
                          "\000\004\155\u0c77\001\001\000\002\001\001\000\004\032" +
                          "\u0c79\001\001\000\002\001\001\000\004\154\u0c7b\001\001" +
                          "\000\002\001\001\000\004\032\u0c7d\001\001\000\002\001" +
                          "\001\000\004\130\u0c7f\001\001\000\002\001\001\000\002" +
                          "\001\001\000\004\235\u0c82\001\001\000\002\001\001\000" +
                          "\002\001\001\000\006\065\u0c86\263\u0c85\001\001\000\002" +
                          "\001\001\000\002\001\001\000\004\031\u0c88\001\001\000" +
                          "\002\001\001\000\006\046\u0c90\250\u0c8c\001\001\000\002" +
                          "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                          "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                          "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                          "\004\266\u0c95\001\001\000\002\001\001\000\004\072\u0c97" +
                          "\001\001\000\002\001\001\000\004\236\u0c99\001\001\000" +
                          "\002\001\001\000\004\102\u0c9b\001\001\000\002\001\001" +
                          "\000\002\001\001\000\004\233\u0c9e\001\001\000\002\001" +
                          "\001\000\002\001\001\000\006\076\u0ca1\271\u0ca2\001\001" +
                          "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                          "\004\235\u0ca5\001\001\000\002\001\001\000\002\001\001" +
                          "\000\006\103\u0ca9\275\u0cac\001\001\000\002\001\001\000" +
                          "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                          "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                          "\001\000\004\233\u0cb1\001\001\000\002\001\001\000\002" +
                          "\001\001\000\006\147\u0579\320\u0aa9\001\001\000\002\001" +
                          "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                          "\000\002\001\001\000\004\235\u0cba\001\001\000\002\001" +
                          "\001\000\002\001\001\000\004\213\u04b5\001\001\000\002" +
                          "\001\001\000\002\001\001\000\004\032\u0cc0\001\001\000" +
                          "\002\001\001\000\004\330\u0872\001\001\000\002\001\001" +
                          "\000\002\001\001\000\002\001\001\000\004\235\u0cc6\001" +
                          "\001\000\002\001\001\000\002\001\001\000\004\156\u0585" +
                          "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                          "\001\000\002\001\001\000\004\233\u0cce\001\001\000\002" +
                          "\001\001\000\002\001\001\000\004\213\u055f\001\001\000" +
                          "\004\032\u0cd2\001\001\000\002\001\001\000\004\322\u0ab1" +
                          "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                          "\001\000\002\001\001\000\004\233\u0cd9\001\001\000\002" +
                          "\001\001\000\002\001\001\000\004\330\u055e\001\001\000" +
                          "\004\032\u0cdd\001\001\000\002\001\001\000\006\103\u0cdf" +
                          "\274\u0ce0\001\001\000\002\001\001\000\002\001\001\000" +
                          "\004\032\u0ce2\001\001\000\002\001\001\000\006\064\u0ce5" +
                          "\262\u0ce4\001\001\000\002\001\001\000\002\001\001\000" +
                          "\004\236\u0ce7\001\001\000\002\001\001\000\004\041\u0ced" +
                          "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                          "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                          "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                          "\004\054\u0cf3\001\001\000\002\001\001\000\002\001\001" +
                          "\000\004\233\u0cf6\001\001\000\002\001\001\000\002\001" +
                          "\001\000\004\060\u0cf9\001\001\000\002\001\001\000\002" +
                          "\001\001\000\006\027\065\234\u0cfc\001\001\000\002\001" +
                          "\001\000\002\001\001\000\004\063\u0cff\001\001\000\002" +
                          "\001\001\000\002\001\001\000\004\235\u0d02\001\001\000" +
                          "\002\001\001\000\002\001\001\000\004\067\u0d05\001\001" +
                          "\000\002\001\001\000\004\031\u0d07\001\001\000\002\001" +
                          "\001\000\004\047\u0d0d\001\001\000\002\001\001\000\002" +
                          "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                          "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                          "\000\004\073\u0d12\001\001\000\002\001\001\000\002\001" +
                          "\001\000\004\233\u0d15\001\001\000\002\001\001\000\002" +
                          "\001\001\000\004\077\u0d18\001\001\000\002\001\001\000" +
                          "\002\001\001\000\006\027\065\234\u0d1b\001\001\000\002" +
                          "\001\001\000\002\001\001\000\004\102\u0d1e\001\001\000" +
                          "\002\001\001\000\002\001\001\000\004\235\u0d21\001\001" +
                          "\000\002\001\001\000\002\001\001\000\004\106\u0d24\001" +
                          "\001\000\002\001\001\000\004\032\u0d26\001\001\000\002" +
                          "\001\001\000\004\105\u0d28\001\001\000\002\001\001\000" +
                          "\004\032\u0d2a\001\001\000\002\001\001\000\004\066\u0d2c" +
                          "\001\001\000\002\001\001\000\006\002\u0d2f\003\u0d31\001" +
                          "\001\000\006\002\u0d39\003\u0d38\001\001\000\002\001\001" +
                          "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                          "\002\001\001\000\002\001\001\000\004\003\u0d37\001\001" +
                          "\000\004\003\u0d38\001\001\000\002\001\001\000\002\001" +
                          "\001\000\002\001\001\000\004\031\u0d3b\001\001\000\002" +
                          "\001\001\000\006\035\u0d43\240\u0d3e\001\001\000\002\001" +
                          "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                          "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                          "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                          "\001\001\000\004\246\u0d49\001\001\000\002\001\001\000" +
                          "\004\044\u0d4b\001\001\000\002\001\001\000\002\001\001" +
                          "\000\004\233\u0d4e\001\001\000\002\001\001\000\002\001" +
                          "\001\000\006\045\u0d52\247\u0d51\001\001\000\002\001\001" +
                          "\000\002\001\001\000\004\236\u0d54\001\001\000\002\001" +
                          "\001\000\004\047\u0d56\001\001\000\002\001\001\000\002" +
                          "\001\001\000\006\027\065\234\u0d59\001\001\000\002\001" +
                          "\001\000\002\001\001\000\006\046\u0d5d\250\u0d5c\001\001" +
                          "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                          "\004\235\u0d60\001\001\000\002\001\001\000\002\001\001" +
                          "\000\006\051\u0d63\252\u0d64\001\001\000\002\001\001\000" +
                          "\002\001\001\000\004\032\u0d66\001\001\000\002\001\001" +
                          "\000\006\050\u0d69\251\u0d68\001\001\000\002\001\001\000" +
                          "\002\001\001\000\004\004\u0d6d\001\001\000\002\001\001" +
                          "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                          "\002\001\001\000\002\001\001\000\004\023\u0d73\001\001" +
                          "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                          "\004\005\u0d79\001\001\000\002\001\001\000\002\001\001" +
                          "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                          "\006\024\u0d7c\026\u0d7d\001\001\000\002\001\001\000\002" +
                          "\001\001\000\004\026\u0d82\001\001\000\002\001\001\000" +
                          "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                          "\001\001\000\004\026\u0d98\001\001\000\004\026\u0d93\001" +
                          "\001\000\004\026\u0d8e\001\001\000\002\001\001\000\004" +
                          "\026\u0d89\001\001\000\002\001\001\000\002\001\001\000" +
                          "\002\001\001\000\006\024\u0d8d\026\u0d7d\001\001\000\002" +
                          "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                          "\001\000\006\024\u0d92\026\u0d7d\001\001\000\002\001\001" +
                          "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                          "\006\024\u0d97\026\u0d7d\001\001\000\002\001\001\000\002" +
                          "\001\001\000\002\001\001\000\002\001\001\000\006\024" +
                          "\u0d9c\026\u0d7d\001\001\000\002\001\001\000\006\024\u0d9e" +
                          "\026\u0d7d\001\001\000\002\001\001\000\006\024\u0db0\026" +
                          "\u0d7d\001\001\000\004\026\u0dad\001\001\000\004\026\u0daa" +
                          "\001\001\000\004\026\u0da7\001\001\000\004\026\u0da4\001" +
                          "\001\000\002\001\001\000\006\024\u0da6\026\u0d7d\001\001" +
                          "\000\002\001\001\000\002\001\001\000\006\024\u0da9\026" +
                          "\u0d7d\001\001\000\002\001\001\000\002\001\001\000\006" +
                          "\024\u0dac\026\u0d7d\001\001\000\002\001\001\000\002\001" +
                          "\001\000\006\024\u0daf\026\u0d7d\001\001\000\002\001\001" +
                          "\000\002\001\001\000\002\001\001\000\004\016\u0db5\001" +
                          "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                          "\000\002\001\001\000\004\025\u0db8\001\001\000\002\001" +
                          "\001\000\002\001\001\000\004\022\u0dbc\001\001\000\002" +
                          "\001\001\000\002\001\001\000\004\030\u0dbf\001\001\000" +
                          "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
                          "\030\u0dc2\001\001\000\002\001\001\000\004\020\u0dc5\001" +
                          "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                          "\000\004\025\u0dc8\001\001\000\002\001\001\000\002\001" +
                          "\001\000\002\001\001\000\002\001\001\000\004\025\u0dcd" +
                          "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
                          "\u0dd1\001\001\000\002\001\001\000\002\001\001\000\002" +
                          "\001\001\000\002\001\001\000\006\024\u0dd5\026\u0d7d\001" +
                          "\001\000\002\001\001\000\002\001\001\000\004\022\u0dd8" +
                          "\001\001\000\002\001\001\000\004\030\u0dda\001\001\000" +
                          "\002\001\001\000\004\017\u0ddc\001\001\000\002\001\001" +
                          "\000\002\001\001\000\002\001\001\000\006\024\u0de0\026" +
                          "\u0d7d\001\001\000\002\001\001\000\002\001\001\000\002" +
                          "\001\001\000\004\030\u0de4\001\001\000\002\001\001\000" +
                          "\004\011\u0de6\001\001\000\002\001\001\000\002\001\001" +
                          "\000\002\001\001\000\002\001\001\000\006\024\u0deb\026" +
                          "\u0d7d\001\001\000\002\001\001\000\002\001\001\000\004" +
                          "\020\u0dee\001\001\000\002\001\001\000\002\001\001\000" +
                          "\004\025\u0df1\001\001\000\002\001\001\000\002\001\001" +
                          "\000\004\017\u0df4\001\001\000\002\001\001\000\004\023" +
                          "\u0df6\001\001\000\002\001\001\000\002\001\001\000\006" +
                          "\024\u0df9\026\u0d7d\001\001\000\002\001\001\000\002\001" +
                          "\001\000\004\006\u0dfe\001\001\000\002\001\001\000\002" +
                          "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                          "\001\000\004\023\u0e02\001\001\000\002\001\001\000\002" +
                          "\001\001\000\004\016\u0e05\001\001\000\002\001\001\000" +
                          "\002\001\001\000\004\025\u0e08\001\001\000\002\001\001" +
                          "\000\002\001\001\000\004\015\u0e0c\001\001\000\002\001" +
                          "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                          "\000\004\023\u0e10\001\001\000\002\001\001\000\002\001" +
                          "\001\000\004\022\u0e13\001\001\000\002\001\001\000\004" +
                          "\030\u0e15\001\001\000\002\001\001\000\004\021\u0e17\001" +
                          "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                          "\000\004\023\u0e1b\001\001\000\002\001\001\000\002\001" +
                          "\001\000\002\001\001\000\004\030\u0e1f\001\001\000\002" +
                          "\001\001\000\004\012\u0e22\001\001\000\002\001\001\000" +
                          "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
                          "\023\u0e26\001\001\000\002\001\001\000\002\001\001\000" +
                          "\004\020\u0e29\001\001\000\002\001\001\000\002\001\001" +
                          "\000\004\025\u0e2c\001\001\000\002\001\001\000\002\001" +
                          "\001\000\004\021\u0e2f\001\001\000\002\001\001\000\006" +
                          "\002\u0e31\003\u0e32\001\001\000\002\001\001\000\002\001" +
                          "\001\000\002\001\001\000\004\025\u0e35\001\001\000\002" +
                          "\001\001\000\002\001\001\000\004\007\u0e39\001\001\000" +
                          "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                          "\001\001\000\002\001\001\000\004\023\u0e3e\001\001\000" +
                          "\002\001\001\000\002\001\001\000\004\014\u0e41\001\001" +
                          "\000\002\001\001\000\002\001\001\000\006\024\u0e44\026" +
                          "\u0d7d\001\001\000\002\001\001\000\002\001\001\000\004" +
                          "\015\u0e47\001\001\000\002\001\001\000\004\030\u0e49\001" +
                          "\001\000\002\001\001\000\004\013\u0e4b\001\001\000\002" +
                          "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                          "\001\000\004\023\u0e50\001\001\000\002\001\001\000\002" +
                          "\001\001\000\004\017\u0e53\001\001\000\002\001\001\000" +
                          "\002\001\001\000\006\024\u0e56\026\u0d7d\001\001\000\002" +
                          "\001\001\000\002\001\001\000\004\021\u0e59\001\001\000" +
                          "\002\001\001\000\004\030\u0e5b\001\001\000\002\001\001" +
                          "\000\004\010\u0e60\001\001\000\002\001\001\000\002\001" +
                          "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                          "\000\004\023\u0e63\001\001\000\002\001\001\000\002\001" +
                          "\001\000\004\011\u0e66\001\001\000\002\001\001\000\002" +
                          "\001\001\000\006\024\u0e69\026\u0d7d\001\001\000\002\001" +
                          "\001\000\002\001\001\000\004\012\u0e6c\001\001\000\002" +
                          "\001\001\000\002\001\001\000\004\025\u0e6f\001\001\000" +
                          "\002\001\001\000\002\001\001\000\004\013\u0e72\001\001" +
                          "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
  {
    action_obj = new CUP$SintacticoParser$actions(this);
  }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
          int                        act_num,
          java_cup.runtime.lr_parser parser,
          java.util.Stack            stack,
          int                        top)
          throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  private int barra=0,pie=0;
  private int entrarErrorSintactico=0;
  private String tituloObtener;
  public String getTituloObtener(){
    return tituloObtener;
  }
  private void setTituloObtener(String titulo){
    tituloObtener=titulo;
  }
  /*private ArrayList<String[]> filasOperadores=new ArrayList<>();
    private ArrayList<String[]> filasErrores=new ArrayList<>();*/
  //agarrar datos
  private ArrayList<String[]> tituloArray=new ArrayList<>();
  public ArrayList<String[]> getTitulo(){
    return tituloArray;
  }
  private ArrayList<String[]> ejeXArray=new ArrayList<>();
  public ArrayList<String[]> getEjeX(){
    return ejeXArray;
  }
  private ArrayList<String[]> ejeYArray=new ArrayList<>();
  public ArrayList<String[]> getEjeY(){
    return ejeYArray;
  }
  private ArrayList<String[]> etiquetasArray  =new ArrayList<>();
  public ArrayList<String[]> getEtiquetas(){
    return etiquetasArray;
  }
  private ArrayList<String[]> valoresArray=new ArrayList<>();
  public ArrayList<String[]> getValores(){
    return valoresArray;
  }
  private ArrayList<String[]> unirPieArray=new ArrayList<>();
  public ArrayList<String[]> getUnirPie(){
    return unirPieArray;
  }
  private ArrayList<String[]> unirBarraArray=new ArrayList<>();
  public ArrayList<String[]> getUnirBarra(){
    return unirBarraArray;
  }
  private ArrayList<String[]> tipoArray=new ArrayList<>();
  public ArrayList<String[]> getTipo(){
    return tipoArray;
  }
  private ArrayList<String[]> totalArray=new ArrayList<>();
  public ArrayList<String[]> getTotal(){
    return totalArray;
  }
  private ArrayList<String[]> extraArray=new ArrayList<>();
  public ArrayList<String[]> getExtra(){
    return extraArray;
  }
  private ArrayList<String> ejecutarArray=new ArrayList<>();
  public ArrayList<String> getEjecutar(){
    return ejecutarArray;
  }

  //reportes
  private ArrayList<String[]> errorSintactico=new ArrayList<>();
  private ArrayList<String[]> ocurrenciaOperadores=new ArrayList<>();
  public ArrayList<String[]> getOcurrenciaOperadores(){
    return ocurrenciaOperadores;
  }
  public ArrayList<String[]> getErrorSintactico(){
    return errorSintactico;
  }
  private void incrementarContadorBarra() {
    barra++;
  }
  public int obtenerEntrarErrorSintactico(){
    return entrarErrorSintactico;
  }
  private void incrementarContadorPie() {
    pie++;
  }
  public int getIncrementarContadorBarra() {
    return barra;
  }
  public int getIncrementarContadorPie() {
    return pie;
  }/*
    public ArrayList<String[]> getFilasOperadores(){
        return filasOperadores;
    }

    public ArrayList<String[]> getFilasErrores(){
        return filasErrores;
    }*/
  public SintacticoParser(parteLexica lexer) {
    super(lexer);
  }
  private int count = 0;
  private Boolean vBarraFCircular;
  private void increaseCount() {
    count++;
  }
  public int getCount() {
    return count;
  }


  public void report_error(String message, Object info) {
    System.out.println("public void report_error");
  }

  public void report_fatal_error(String message, Object info) {
    System.out.println("public void report_fatal_error");
  }

  public void syntax_error(Symbol cur_token) {
    entrarErrorSintactico=1;
    errorSintactico.add(new String[]{String.valueOf((cur_token.value)),String.valueOf((cur_token.left)),String.valueOf((cur_token.right)),"Sintactico","Se esperaba 'graficar' o 'animar'"});

  }

  public void unrecovered_syntax_error(Symbol cur_token) {
    if (cur_token.sym == sym.EOF) {
      System.out.println("public void unrecoveredsyntax_error");
    }
  }


  /** Cup generated class to encapsulate user supplied action code.*/
  @SuppressWarnings({"rawtypes", "unchecked", "unused"})
  class CUP$SintacticoParser$actions {
    private final SintacticoParser parser;

    /** Constructor */
    CUP$SintacticoParser$actions(SintacticoParser parser) {
      this.parser = parser;
    }

    /** Method 0 with the actual generated action code for actions 0 to 300. */
    public final java_cup.runtime.Symbol CUP$SintacticoParser$do_action_part00000000(
            int                        CUP$SintacticoParser$act_num,
            java_cup.runtime.lr_parser CUP$SintacticoParser$parser,
            java.util.Stack            CUP$SintacticoParser$stack,
            int                        CUP$SintacticoParser$top)
            throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoParser$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoParser$act_num)
      {
        /*. . . . . . . . . . . . . . . . . . . .*/
        case 0: // $START ::= s EOF
        {
          Object RESULT =null;
          int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-1)).left;
          int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-1)).right;
          String start_val = (String)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-1)).value;
          RESULT = start_val;
          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        /* ACCEPT */
        CUP$SintacticoParser$parser.done_parsing();
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 1: // s ::= DEF BARRA LLAVEA cuerpo_barra LLAVEC s
        {
          String RESULT =null;
          incrementarContadorBarra();
          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 2: // s ::= DEF PIE LLAVEA eleccion_cuerpo_pie LLAVEC s
        {
          String RESULT =null;
          incrementarContadorPie();
          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 3: // s ::= DEF BARRA LLAVEA cuerpo_barra LLAVEC f
        {
          String RESULT =null;
          incrementarContadorBarra();
          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 4: // s ::= DEF PIE LLAVEA eleccion_cuerpo_pie LLAVEC f
        {
          String RESULT =null;
          incrementarContadorPie();
          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 5: // s ::= error s
        {
          String RESULT =null;
          System.out.println("accion desde gramatica");
          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 6: // f ::= EJECUTAR PARENTESISA TEXTO PARENTESISC PUNTOCOMA f
        {
          String RESULT =null;
          int textoleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-3)).left;
          int textoright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-3)).right;
          String texto = (String)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-3)).value;
          System.out.println("ejecutar mas de una vez al final");ejecutarArray.add(texto);
          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("f",1, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 7: // f ::= EJECUTAR PARENTESISA TEXTO PARENTESISC PUNTOCOMA
        {
          String RESULT =null;
          int textoleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-2)).left;
          int textoright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-2)).right;
          String texto = (String)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-2)).value;
          System.out.println("ejecutar una vez al final"+getTituloObtener()+texto);ejecutarArray.add(texto);
          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("f",1, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 8: // f ::= error f
        {
          String RESULT =null;
          System.out.println("accion desde gramatica");
          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("f",1, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 9: // eleccion_cuerpo_pie ::= cuerpo_circular_cantidad
        {
          String RESULT =null;
          tipoArray.add(new String[]{getTituloObtener(),"Cantidad"});
          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("eleccion_cuerpo_pie",26, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 10: // eleccion_cuerpo_pie ::= cuerpo_circular_porcentaje
        {
          String RESULT =null;
          tipoArray.add(new String[]{getTituloObtener(),"Porcentaje"});
          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("eleccion_cuerpo_pie",26, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 11: // cuerpo_circular_porcentaje ::= TITULO DOSPUNTOS crear_tit_pie PUNTOCOMA cuerpo_cp_tipo_etiquetas_valores_extra_unir
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_circular_porcentaje",157, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 12: // cuerpo_circular_porcentaje ::= TIPO DOSPUNTOS PORCENTAJE PUNTOCOMA cuerpo_cp_titulo_etiquetas_valores_extra_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_circular_porcentaje",157, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 13: // cuerpo_circular_porcentaje ::= ETIQUETAS DOSPUNTOS CORCHETEA repetir_etiquetas CORCHETEC PUNTOCOMA cuerpo_cp_titulo_tipo_valores_extra_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_circular_porcentaje",157, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 14: // cuerpo_circular_porcentaje ::= VALORES DOSPUNTOS CORCHETEA repetir_valores CORCHETEC PUNTOCOMA cuerpo_cp_titulo_tipo_etiquetas_extra_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_circular_porcentaje",157, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 15: // cuerpo_circular_porcentaje ::= EXTRA DOSPUNTOS definir_extra PUNTOCOMA cuerpo_cp_titulo_tipo_etiquetas_valores_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_circular_porcentaje",157, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 16: // cuerpo_circular_porcentaje ::= UNIR DOSPUNTOS CORCHETEA repetir_pie CORCHETEC PUNTOCOMA cuerpo_cp_titulo_tipo_etiquetas_valores_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_circular_porcentaje",157, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 17: // cuerpo_cp_tipo_etiquetas_valores_extra_unir ::= TIPO DOSPUNTOS PORCENTAJE PUNTOCOMA cuerpo_cp_etiquetas_valores_extra_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_tipo_etiquetas_valores_extra_unir",158, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 18: // cuerpo_cp_tipo_etiquetas_valores_extra_unir ::= ETIQUETAS DOSPUNTOS CORCHETEA repetir_etiquetas CORCHETEC PUNTOCOMA cuerpo_cp_tipo_valores_extra_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_tipo_etiquetas_valores_extra_unir",158, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 19: // cuerpo_cp_tipo_etiquetas_valores_extra_unir ::= VALORES DOSPUNTOS CORCHETEA repetir_valores CORCHETEC PUNTOCOMA cuerpo_cp_tipo_etiquetas_extra_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_tipo_etiquetas_valores_extra_unir",158, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 20: // cuerpo_cp_tipo_etiquetas_valores_extra_unir ::= EXTRA DOSPUNTOS definir_extra PUNTOCOMA cuerpo_cp_tipo_etiquetas_valores_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_tipo_etiquetas_valores_extra_unir",158, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 21: // cuerpo_cp_tipo_etiquetas_valores_extra_unir ::= UNIR DOSPUNTOS CORCHETEA repetir_pie CORCHETEC PUNTOCOMA cuerpo_cp_tipo_etiquetas_valores_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_tipo_etiquetas_valores_extra_unir",158, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 22: // cuerpo_cp_titulo_etiquetas_valores_extra_unir ::= TITULO DOSPUNTOS crear_tit_pie PUNTOCOMA cuerpo_cp_etiquetas_valores_extra_unir
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_etiquetas_valores_extra_unir",159, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 23: // cuerpo_cp_titulo_etiquetas_valores_extra_unir ::= ETIQUETAS DOSPUNTOS CORCHETEA repetir_etiquetas CORCHETEC PUNTOCOMA cuerpo_cp_titulo_valores_extra_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_etiquetas_valores_extra_unir",159, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 24: // cuerpo_cp_titulo_etiquetas_valores_extra_unir ::= VALORES DOSPUNTOS CORCHETEA repetir_valores CORCHETEC PUNTOCOMA cuerpo_cp_titulo_etiquetas_extra_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_etiquetas_valores_extra_unir",159, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 25: // cuerpo_cp_titulo_etiquetas_valores_extra_unir ::= EXTRA DOSPUNTOS definir_extra PUNTOCOMA cuerpo_cp_titulo_etiquetas_valores_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_etiquetas_valores_extra_unir",159, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 26: // cuerpo_cp_titulo_etiquetas_valores_extra_unir ::= UNIR DOSPUNTOS CORCHETEA repetir_pie CORCHETEC PUNTOCOMA cuerpo_cp_titulo_etiquetas_valores_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_etiquetas_valores_extra_unir",159, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 27: // cuerpo_cp_titulo_tipo_valores_extra_unir ::= TITULO DOSPUNTOS crear_tit_pie PUNTOCOMA cuerpo_cp_tipo_valores_extra_unir
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_tipo_valores_extra_unir",160, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 28: // cuerpo_cp_titulo_tipo_valores_extra_unir ::= TIPO DOSPUNTOS PORCENTAJE PUNTOCOMA cuerpo_cp_titulo_valores_extra_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_tipo_valores_extra_unir",160, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 29: // cuerpo_cp_titulo_tipo_valores_extra_unir ::= VALORES DOSPUNTOS CORCHETEA repetir_valores CORCHETEC PUNTOCOMA cuerpo_cp_titulo_tipo_extra_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_tipo_valores_extra_unir",160, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 30: // cuerpo_cp_titulo_tipo_valores_extra_unir ::= EXTRA DOSPUNTOS definir_extra PUNTOCOMA cuerpo_cp_titulo_tipo_valores_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_tipo_valores_extra_unir",160, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 31: // cuerpo_cp_titulo_tipo_valores_extra_unir ::= UNIR DOSPUNTOS CORCHETEA repetir_pie CORCHETEC PUNTOCOMA cuerpo_cp_titulo_tipo_valores_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_tipo_valores_extra_unir",160, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 32: // cuerpo_cp_titulo_tipo_etiquetas_extra_unir ::= TITULO DOSPUNTOS crear_tit_pie PUNTOCOMA cuerpo_cp_tipo_etiquetas_extra_unir
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_tipo_etiquetas_extra_unir",161, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 33: // cuerpo_cp_titulo_tipo_etiquetas_extra_unir ::= TIPO DOSPUNTOS PORCENTAJE PUNTOCOMA cuerpo_cp_titulo_etiquetas_extra_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_tipo_etiquetas_extra_unir",161, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 34: // cuerpo_cp_titulo_tipo_etiquetas_extra_unir ::= ETIQUETAS DOSPUNTOS CORCHETEA repetir_etiquetas CORCHETEC PUNTOCOMA cuerpo_cp_titulo_tipo_extra_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_tipo_etiquetas_extra_unir",161, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 35: // cuerpo_cp_titulo_tipo_etiquetas_extra_unir ::= EXTRA DOSPUNTOS definir_extra PUNTOCOMA cuerpo_cp_titulo_tipo_etiquetas_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_tipo_etiquetas_extra_unir",161, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 36: // cuerpo_cp_titulo_tipo_etiquetas_extra_unir ::= UNIR DOSPUNTOS CORCHETEA repetir_pie CORCHETEC PUNTOCOMA cuerpo_cp_titulo_tipo_etiquetas_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_tipo_etiquetas_extra_unir",161, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 37: // cuerpo_cp_titulo_tipo_etiquetas_valores_unir ::= TITULO DOSPUNTOS crear_tit_pie PUNTOCOMA cuerpo_cp_tipo_etiquetas_valores_unir
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_tipo_etiquetas_valores_unir",162, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 38: // cuerpo_cp_titulo_tipo_etiquetas_valores_unir ::= TIPO DOSPUNTOS PORCENTAJE PUNTOCOMA cuerpo_cp_titulo_etiquetas_valores_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_tipo_etiquetas_valores_unir",162, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 39: // cuerpo_cp_titulo_tipo_etiquetas_valores_unir ::= ETIQUETAS DOSPUNTOS CORCHETEA repetir_etiquetas CORCHETEC PUNTOCOMA cuerpo_cp_titulo_tipo_valores_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_tipo_etiquetas_valores_unir",162, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 40: // cuerpo_cp_titulo_tipo_etiquetas_valores_unir ::= VALORES DOSPUNTOS CORCHETEA repetir_valores CORCHETEC PUNTOCOMA cuerpo_cp_titulo_tipo_etiquetas_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_tipo_etiquetas_valores_unir",162, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 41: // cuerpo_cp_titulo_tipo_etiquetas_valores_unir ::= UNIR DOSPUNTOS CORCHETEA repetir_pie CORCHETEC PUNTOCOMA cuerpo_cp_titulo_tipo_etiquetas_valores
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_tipo_etiquetas_valores_unir",162, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 42: // cuerpo_cp_titulo_tipo_etiquetas_valores_extra ::= TITULO DOSPUNTOS crear_tit_pie PUNTOCOMA cuerpo_cp_tipo_etiquetas_valores_extra
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_tipo_etiquetas_valores_extra",163, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 43: // cuerpo_cp_titulo_tipo_etiquetas_valores_extra ::= TIPO DOSPUNTOS PORCENTAJE PUNTOCOMA cuerpo_cp_titulo_etiquetas_valores_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_tipo_etiquetas_valores_extra",163, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 44: // cuerpo_cp_titulo_tipo_etiquetas_valores_extra ::= ETIQUETAS DOSPUNTOS CORCHETEA repetir_etiquetas CORCHETEC PUNTOCOMA cuerpo_cp_titulo_tipo_valores_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_tipo_etiquetas_valores_extra",163, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 45: // cuerpo_cp_titulo_tipo_etiquetas_valores_extra ::= VALORES DOSPUNTOS CORCHETEA repetir_valores CORCHETEC PUNTOCOMA cuerpo_cp_titulo_tipo_etiquetas_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_tipo_etiquetas_valores_extra",163, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 46: // cuerpo_cp_titulo_tipo_etiquetas_valores_extra ::= EXTRA DOSPUNTOS definir_extra PUNTOCOMA cuerpo_cp_titulo_tipo_etiquetas_valores
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_tipo_etiquetas_valores_extra",163, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 47: // cuerpo_cp_etiquetas_valores_extra_unir ::= ETIQUETAS DOSPUNTOS CORCHETEA repetir_etiquetas CORCHETEC PUNTOCOMA cuerpo_cp_valores_extra_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_etiquetas_valores_extra_unir",164, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 48: // cuerpo_cp_etiquetas_valores_extra_unir ::= VALORES DOSPUNTOS CORCHETEA repetir_valores CORCHETEC PUNTOCOMA cuerpo_cp_etiquetas_extra_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_etiquetas_valores_extra_unir",164, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 49: // cuerpo_cp_etiquetas_valores_extra_unir ::= EXTRA DOSPUNTOS definir_extra PUNTOCOMA cuerpo_cp_etiquetas_valores_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_etiquetas_valores_extra_unir",164, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 50: // cuerpo_cp_etiquetas_valores_extra_unir ::= UNIR DOSPUNTOS CORCHETEA repetir_pie CORCHETEC PUNTOCOMA cuerpo_cp_etiquetas_valores_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_etiquetas_valores_extra_unir",164, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 51: // cuerpo_cp_tipo_valores_extra_unir ::= TIPO DOSPUNTOS PORCENTAJE PUNTOCOMA cuerpo_cp_valores_extra_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_tipo_valores_extra_unir",165, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 52: // cuerpo_cp_tipo_valores_extra_unir ::= VALORES DOSPUNTOS CORCHETEA repetir_valores CORCHETEC PUNTOCOMA cuerpo_cp_tipo_extra_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_tipo_valores_extra_unir",165, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 53: // cuerpo_cp_tipo_valores_extra_unir ::= EXTRA DOSPUNTOS definir_extra PUNTOCOMA cuerpo_cp_tipo_valores_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_tipo_valores_extra_unir",165, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 54: // cuerpo_cp_tipo_valores_extra_unir ::= UNIR DOSPUNTOS CORCHETEA repetir_pie CORCHETEC PUNTOCOMA cuerpo_cp_tipo_valores_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_tipo_valores_extra_unir",165, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 55: // cuerpo_cp_tipo_etiquetas_extra_unir ::= TIPO DOSPUNTOS PORCENTAJE PUNTOCOMA cuerpo_cp_etiquetas_extra_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_tipo_etiquetas_extra_unir",166, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 56: // cuerpo_cp_tipo_etiquetas_extra_unir ::= ETIQUETAS DOSPUNTOS CORCHETEA repetir_etiquetas CORCHETEC PUNTOCOMA cuerpo_cp_tipo_extra_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_tipo_etiquetas_extra_unir",166, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 57: // cuerpo_cp_tipo_etiquetas_extra_unir ::= EXTRA DOSPUNTOS definir_extra PUNTOCOMA cuerpo_cp_tipo_etiquetas_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_tipo_etiquetas_extra_unir",166, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 58: // cuerpo_cp_tipo_etiquetas_extra_unir ::= UNIR DOSPUNTOS CORCHETEA repetir_pie CORCHETEC PUNTOCOMA cuerpo_cp_tipo_etiquetas_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_tipo_etiquetas_extra_unir",166, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 59: // cuerpo_cp_tipo_etiquetas_valores_unir ::= TIPO DOSPUNTOS PORCENTAJE PUNTOCOMA cuerpo_cp_etiquetas_valores_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_tipo_etiquetas_valores_unir",167, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 60: // cuerpo_cp_tipo_etiquetas_valores_unir ::= ETIQUETAS DOSPUNTOS CORCHETEA repetir_etiquetas CORCHETEC PUNTOCOMA cuerpo_cp_tipo_valores_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_tipo_etiquetas_valores_unir",167, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 61: // cuerpo_cp_tipo_etiquetas_valores_unir ::= VALORES DOSPUNTOS CORCHETEA repetir_valores CORCHETEC PUNTOCOMA cuerpo_cp_tipo_etiquetas_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_tipo_etiquetas_valores_unir",167, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 62: // cuerpo_cp_tipo_etiquetas_valores_unir ::= UNIR DOSPUNTOS CORCHETEA repetir_pie CORCHETEC PUNTOCOMA cuerpo_cp_tipo_etiquetas_valores
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_tipo_etiquetas_valores_unir",167, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 63: // cuerpo_cp_tipo_etiquetas_valores_extra ::= TIPO DOSPUNTOS PORCENTAJE PUNTOCOMA cuerpo_cp_etiquetas_valores_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_tipo_etiquetas_valores_extra",168, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 64: // cuerpo_cp_tipo_etiquetas_valores_extra ::= ETIQUETAS DOSPUNTOS CORCHETEA repetir_etiquetas CORCHETEC PUNTOCOMA cuerpo_cp_tipo_valores_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_tipo_etiquetas_valores_extra",168, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 65: // cuerpo_cp_tipo_etiquetas_valores_extra ::= VALORES DOSPUNTOS CORCHETEA repetir_valores CORCHETEC PUNTOCOMA cuerpo_cp_tipo_etiquetas_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_tipo_etiquetas_valores_extra",168, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 66: // cuerpo_cp_tipo_etiquetas_valores_extra ::= EXTRA DOSPUNTOS definir_extra PUNTOCOMA cuerpo_cp_tipo_etiquetas_valores
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_tipo_etiquetas_valores_extra",168, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 67: // cuerpo_cp_titulo_valores_extra_unir ::= TITULO DOSPUNTOS crear_tit_pie PUNTOCOMA cuerpo_cp_valores_extra_unir
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_valores_extra_unir",169, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 68: // cuerpo_cp_titulo_valores_extra_unir ::= VALORES DOSPUNTOS CORCHETEA repetir_valores CORCHETEC PUNTOCOMA cuerpo_cp_titulo_extra_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_valores_extra_unir",169, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 69: // cuerpo_cp_titulo_valores_extra_unir ::= EXTRA DOSPUNTOS definir_extra PUNTOCOMA cuerpo_cp_titulo_valores_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_valores_extra_unir",169, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 70: // cuerpo_cp_titulo_valores_extra_unir ::= UNIR DOSPUNTOS CORCHETEA repetir_pie CORCHETEC PUNTOCOMA cuerpo_cp_titulo_valores_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_valores_extra_unir",169, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 71: // cuerpo_cp_titulo_etiquetas_extra_unir ::= TITULO DOSPUNTOS crear_tit_pie PUNTOCOMA cuerpo_cp_etiquetas_extra_unir
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_etiquetas_extra_unir",170, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 72: // cuerpo_cp_titulo_etiquetas_extra_unir ::= ETIQUETAS DOSPUNTOS CORCHETEA repetir_etiquetas CORCHETEC PUNTOCOMA cuerpo_cp_titulo_extra_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_etiquetas_extra_unir",170, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 73: // cuerpo_cp_titulo_etiquetas_extra_unir ::= EXTRA DOSPUNTOS definir_extra PUNTOCOMA cuerpo_cp_titulo_etiquetas_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_etiquetas_extra_unir",170, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 74: // cuerpo_cp_titulo_etiquetas_extra_unir ::= UNIR DOSPUNTOS CORCHETEA repetir_pie CORCHETEC PUNTOCOMA cuerpo_cp_titulo_etiquetas_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_etiquetas_extra_unir",170, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 75: // cuerpo_cp_titulo_etiquetas_valores_unir ::= TITULO DOSPUNTOS crear_tit_pie PUNTOCOMA cuerpo_cp_etiquetas_valores_unir
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_etiquetas_valores_unir",171, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 76: // cuerpo_cp_titulo_etiquetas_valores_unir ::= ETIQUETAS DOSPUNTOS CORCHETEA repetir_etiquetas CORCHETEC PUNTOCOMA cuerpo_cp_titulo_valores_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_etiquetas_valores_unir",171, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 77: // cuerpo_cp_titulo_etiquetas_valores_unir ::= VALORES DOSPUNTOS CORCHETEA repetir_valores CORCHETEC PUNTOCOMA cuerpo_cp_titulo_etiquetas_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_etiquetas_valores_unir",171, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 78: // cuerpo_cp_titulo_etiquetas_valores_unir ::= UNIR DOSPUNTOS CORCHETEA repetir_pie CORCHETEC PUNTOCOMA cuerpo_cp_titulo_etiquetas_valores
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_etiquetas_valores_unir",171, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 79: // cuerpo_cp_titulo_etiquetas_valores_extra ::= TITULO DOSPUNTOS crear_tit_pie PUNTOCOMA cuerpo_cp_etiquetas_valores_extra
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_etiquetas_valores_extra",172, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 80: // cuerpo_cp_titulo_etiquetas_valores_extra ::= ETIQUETAS DOSPUNTOS CORCHETEA repetir_etiquetas CORCHETEC PUNTOCOMA cuerpo_cp_titulo_valores_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_etiquetas_valores_extra",172, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 81: // cuerpo_cp_titulo_etiquetas_valores_extra ::= VALORES DOSPUNTOS CORCHETEA repetir_valores CORCHETEC PUNTOCOMA cuerpo_cp_titulo_etiquetas_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_etiquetas_valores_extra",172, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 82: // cuerpo_cp_titulo_etiquetas_valores_extra ::= EXTRA DOSPUNTOS definir_extra PUNTOCOMA cuerpo_cp_titulo_etiquetas_valores
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_etiquetas_valores_extra",172, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 83: // cuerpo_cp_titulo_tipo_extra_unir ::= TITULO DOSPUNTOS crear_tit_pie PUNTOCOMA cuerpo_cp_tipo_extra_unir
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_tipo_extra_unir",173, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 84: // cuerpo_cp_titulo_tipo_extra_unir ::= TIPO DOSPUNTOS PORCENTAJE PUNTOCOMA cuerpo_cp_titulo_extra_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_tipo_extra_unir",173, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 85: // cuerpo_cp_titulo_tipo_extra_unir ::= EXTRA DOSPUNTOS definir_extra PUNTOCOMA cuerpo_cp_titulo_tipo_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_tipo_extra_unir",173, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 86: // cuerpo_cp_titulo_tipo_extra_unir ::= UNIR DOSPUNTOS CORCHETEA repetir_pie CORCHETEC PUNTOCOMA cuerpo_cp_titulo_tipo_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_tipo_extra_unir",173, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 87: // cuerpo_cp_titulo_tipo_valores_unir ::= TITULO DOSPUNTOS crear_tit_pie PUNTOCOMA cuerpo_cp_tipo_valores_unir
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_tipo_valores_unir",174, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 88: // cuerpo_cp_titulo_tipo_valores_unir ::= TIPO DOSPUNTOS PORCENTAJE PUNTOCOMA cuerpo_cp_titulo_valores_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_tipo_valores_unir",174, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 89: // cuerpo_cp_titulo_tipo_valores_unir ::= VALORES DOSPUNTOS CORCHETEA repetir_valores CORCHETEC PUNTOCOMA cuerpo_cp_titulo_tipo_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_tipo_valores_unir",174, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 90: // cuerpo_cp_titulo_tipo_valores_unir ::= UNIR DOSPUNTOS CORCHETEA repetir_pie CORCHETEC PUNTOCOMA cuerpo_cp_titulo_tipo_valores
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_tipo_valores_unir",174, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 91: // cuerpo_cp_titulo_tipo_valores_extra ::= TITULO DOSPUNTOS crear_tit_pie PUNTOCOMA cuerpo_cp_tipo_valores_extra
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_tipo_valores_extra",175, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 92: // cuerpo_cp_titulo_tipo_valores_extra ::= TIPO DOSPUNTOS PORCENTAJE PUNTOCOMA cuerpo_cp_titulo_valores_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_tipo_valores_extra",175, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 93: // cuerpo_cp_titulo_tipo_valores_extra ::= VALORES DOSPUNTOS CORCHETEA repetir_valores CORCHETEC PUNTOCOMA cuerpo_cp_titulo_tipo_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_tipo_valores_extra",175, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 94: // cuerpo_cp_titulo_tipo_valores_extra ::= EXTRA DOSPUNTOS definir_extra PUNTOCOMA cuerpo_cp_titulo_tipo_valores
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_tipo_valores_extra",175, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 95: // cuerpo_cp_titulo_tipo_etiquetas_unir ::= TITULO DOSPUNTOS crear_tit_pie PUNTOCOMA cuerpo_cp_tipo_etiquetas_unir
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_tipo_etiquetas_unir",176, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 96: // cuerpo_cp_titulo_tipo_etiquetas_unir ::= TIPO DOSPUNTOS PORCENTAJE PUNTOCOMA cuerpo_cp_titulo_etiquetas_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_tipo_etiquetas_unir",176, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 97: // cuerpo_cp_titulo_tipo_etiquetas_unir ::= ETIQUETAS DOSPUNTOS CORCHETEA repetir_etiquetas CORCHETEC PUNTOCOMA cuerpo_cp_titulo_tipo_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_tipo_etiquetas_unir",176, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 98: // cuerpo_cp_titulo_tipo_etiquetas_unir ::= UNIR DOSPUNTOS CORCHETEA repetir_pie CORCHETEC PUNTOCOMA cuerpo_cp_titulo_tipo_etiquetas
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_tipo_etiquetas_unir",176, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 99: // cuerpo_cp_titulo_tipo_etiquetas_extra ::= TITULO DOSPUNTOS crear_tit_pie PUNTOCOMA cuerpo_cp_tipo_etiquetas_extra
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_tipo_etiquetas_extra",177, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 100: // cuerpo_cp_titulo_tipo_etiquetas_extra ::= TIPO DOSPUNTOS PORCENTAJE PUNTOCOMA cuerpo_cp_titulo_etiquetas_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_tipo_etiquetas_extra",177, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 101: // cuerpo_cp_titulo_tipo_etiquetas_extra ::= ETIQUETAS DOSPUNTOS CORCHETEA repetir_etiquetas CORCHETEC PUNTOCOMA cuerpo_cp_titulo_tipo_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_tipo_etiquetas_extra",177, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 102: // cuerpo_cp_titulo_tipo_etiquetas_extra ::= EXTRA DOSPUNTOS definir_extra PUNTOCOMA cuerpo_cp_titulo_tipo_etiquetas
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_tipo_etiquetas_extra",177, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 103: // cuerpo_cp_titulo_tipo_etiquetas_valores ::= TITULO DOSPUNTOS crear_tit_pie PUNTOCOMA cuerpo_cp_tipo_etiquetas_valores
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_tipo_etiquetas_valores",178, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 104: // cuerpo_cp_titulo_tipo_etiquetas_valores ::= TIPO DOSPUNTOS PORCENTAJE PUNTOCOMA cuerpo_cp_titulo_etiquetas_valores
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_tipo_etiquetas_valores",178, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 105: // cuerpo_cp_titulo_tipo_etiquetas_valores ::= ETIQUETAS DOSPUNTOS CORCHETEA repetir_etiquetas CORCHETEC PUNTOCOMA cuerpo_cp_titulo_tipo_valores
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_tipo_etiquetas_valores",178, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 106: // cuerpo_cp_titulo_tipo_etiquetas_valores ::= VALORES DOSPUNTOS CORCHETEA repetir_valores CORCHETEC PUNTOCOMA cuerpo_cp_titulo_tipo_etiquetas
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_tipo_etiquetas_valores",178, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 107: // cuerpo_cp_valores_extra_unir ::= VALORES DOSPUNTOS CORCHETEA repetir_valores CORCHETEC PUNTOCOMA cuerpo_cp_extra_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_valores_extra_unir",179, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 108: // cuerpo_cp_valores_extra_unir ::= EXTRA DOSPUNTOS definir_extra PUNTOCOMA cuerpo_cp_valores_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_valores_extra_unir",179, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 109: // cuerpo_cp_valores_extra_unir ::= UNIR DOSPUNTOS CORCHETEA repetir_pie CORCHETEC PUNTOCOMA cuerpo_cp_valores_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_valores_extra_unir",179, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 110: // cuerpo_cp_etiquetas_extra_unir ::= ETIQUETAS DOSPUNTOS CORCHETEA repetir_etiquetas CORCHETEC PUNTOCOMA cuerpo_cp_extra_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_etiquetas_extra_unir",180, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 111: // cuerpo_cp_etiquetas_extra_unir ::= EXTRA DOSPUNTOS definir_extra PUNTOCOMA cuerpo_cp_etiquetas_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_etiquetas_extra_unir",180, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 112: // cuerpo_cp_etiquetas_extra_unir ::= UNIR DOSPUNTOS CORCHETEA repetir_pie CORCHETEC PUNTOCOMA cuerpo_cp_etiquetas_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_etiquetas_extra_unir",180, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 113: // cuerpo_cp_etiquetas_valores_unir ::= ETIQUETAS DOSPUNTOS CORCHETEA repetir_etiquetas CORCHETEC PUNTOCOMA cuerpo_cp_valores_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_etiquetas_valores_unir",181, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 114: // cuerpo_cp_etiquetas_valores_unir ::= VALORES DOSPUNTOS CORCHETEA repetir_valores CORCHETEC PUNTOCOMA cuerpo_cp_etiquetas_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_etiquetas_valores_unir",181, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 115: // cuerpo_cp_etiquetas_valores_unir ::= UNIR DOSPUNTOS CORCHETEA repetir_pie CORCHETEC PUNTOCOMA cuerpo_cp_etiquetas_valores
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_etiquetas_valores_unir",181, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 116: // cuerpo_cp_etiquetas_valores_extra ::= ETIQUETAS DOSPUNTOS CORCHETEA repetir_etiquetas CORCHETEC PUNTOCOMA cuerpo_cp_valores_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_etiquetas_valores_extra",182, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 117: // cuerpo_cp_etiquetas_valores_extra ::= VALORES DOSPUNTOS CORCHETEA repetir_valores CORCHETEC PUNTOCOMA cuerpo_cp_etiquetas_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_etiquetas_valores_extra",182, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 118: // cuerpo_cp_etiquetas_valores_extra ::= EXTRA DOSPUNTOS definir_extra PUNTOCOMA cuerpo_cp_etiquetas_valores
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_etiquetas_valores_extra",182, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 119: // cuerpo_cp_tipo_extra_unir ::= TIPO DOSPUNTOS PORCENTAJE PUNTOCOMA cuerpo_cp_extra_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_tipo_extra_unir",183, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 120: // cuerpo_cp_tipo_extra_unir ::= EXTRA DOSPUNTOS definir_extra PUNTOCOMA cuerpo_cp_tipo_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_tipo_extra_unir",183, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 121: // cuerpo_cp_tipo_extra_unir ::= UNIR DOSPUNTOS CORCHETEA repetir_pie CORCHETEC PUNTOCOMA cuerpo_cp_tipo_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_tipo_extra_unir",183, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 122: // cuerpo_cp_tipo_valores_unir ::= TIPO DOSPUNTOS PORCENTAJE PUNTOCOMA cuerpo_cp_valores_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_tipo_valores_unir",184, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 123: // cuerpo_cp_tipo_valores_unir ::= VALORES DOSPUNTOS CORCHETEA repetir_valores CORCHETEC PUNTOCOMA cuerpo_cp_tipo_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_tipo_valores_unir",184, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 124: // cuerpo_cp_tipo_valores_unir ::= UNIR DOSPUNTOS CORCHETEA repetir_pie CORCHETEC PUNTOCOMA cuerpo_cp_tipo_valores
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_tipo_valores_unir",184, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 125: // cuerpo_cp_tipo_valores_extra ::= TIPO DOSPUNTOS PORCENTAJE PUNTOCOMA cuerpo_cp_valores_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_tipo_valores_extra",185, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 126: // cuerpo_cp_tipo_valores_extra ::= VALORES DOSPUNTOS CORCHETEA repetir_valores CORCHETEC PUNTOCOMA cuerpo_cp_tipo_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_tipo_valores_extra",185, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 127: // cuerpo_cp_tipo_valores_extra ::= EXTRA DOSPUNTOS definir_extra PUNTOCOMA cuerpo_cp_tipo_valores
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_tipo_valores_extra",185, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 128: // cuerpo_cp_tipo_etiquetas_unir ::= TIPO DOSPUNTOS PORCENTAJE PUNTOCOMA cuerpo_cp_etiquetas_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_tipo_etiquetas_unir",186, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 129: // cuerpo_cp_tipo_etiquetas_unir ::= ETIQUETAS DOSPUNTOS CORCHETEA repetir_etiquetas CORCHETEC PUNTOCOMA cuerpo_cp_tipo_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_tipo_etiquetas_unir",186, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 130: // cuerpo_cp_tipo_etiquetas_unir ::= UNIR DOSPUNTOS CORCHETEA repetir_pie CORCHETEC PUNTOCOMA cuerpo_cp_tipo_etiquetas
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_tipo_etiquetas_unir",186, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 131: // cuerpo_cp_tipo_etiquetas_extra ::= TIPO DOSPUNTOS PORCENTAJE PUNTOCOMA cuerpo_cp_etiquetas_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_tipo_etiquetas_extra",187, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 132: // cuerpo_cp_tipo_etiquetas_extra ::= ETIQUETAS DOSPUNTOS CORCHETEA repetir_etiquetas CORCHETEC PUNTOCOMA cuerpo_cp_tipo_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_tipo_etiquetas_extra",187, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 133: // cuerpo_cp_tipo_etiquetas_extra ::= EXTRA DOSPUNTOS definir_extra PUNTOCOMA cuerpo_cp_tipo_etiquetas
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_tipo_etiquetas_extra",187, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 134: // cuerpo_cp_tipo_etiquetas_valores ::= TIPO DOSPUNTOS PORCENTAJE PUNTOCOMA cuerpo_cp_etiquetas_valores
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_tipo_etiquetas_valores",188, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 135: // cuerpo_cp_tipo_etiquetas_valores ::= ETIQUETAS DOSPUNTOS CORCHETEA repetir_etiquetas CORCHETEC PUNTOCOMA cuerpo_cp_tipo_valores
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_tipo_etiquetas_valores",188, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 136: // cuerpo_cp_tipo_etiquetas_valores ::= VALORES DOSPUNTOS CORCHETEA repetir_valores CORCHETEC PUNTOCOMA cuerpo_cp_tipo_etiquetas
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_tipo_etiquetas_valores",188, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 137: // cuerpo_cp_titulo_extra_unir ::= TITULO DOSPUNTOS crear_tit_pie PUNTOCOMA cuerpo_cp_extra_unir
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_extra_unir",189, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 138: // cuerpo_cp_titulo_extra_unir ::= EXTRA DOSPUNTOS definir_extra PUNTOCOMA cuerpo_cp_titulo_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_extra_unir",189, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 139: // cuerpo_cp_titulo_extra_unir ::= UNIR DOSPUNTOS CORCHETEA repetir_pie CORCHETEC PUNTOCOMA cuerpo_cp_titulo_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_extra_unir",189, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 140: // cuerpo_cp_titulo_valores_unir ::= TITULO DOSPUNTOS crear_tit_pie PUNTOCOMA cuerpo_cp_valores_unir
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_valores_unir",190, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 141: // cuerpo_cp_titulo_valores_unir ::= VALORES DOSPUNTOS CORCHETEA repetir_valores CORCHETEC PUNTOCOMA cuerpo_cp_titulo_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_valores_unir",190, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 142: // cuerpo_cp_titulo_valores_unir ::= UNIR DOSPUNTOS CORCHETEA repetir_pie CORCHETEC PUNTOCOMA cuerpo_cp_titulo_valores
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_valores_unir",190, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 143: // cuerpo_cp_titulo_valores_extra ::= TITULO DOSPUNTOS crear_tit_pie PUNTOCOMA cuerpo_cp_valores_extra
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_valores_extra",191, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 144: // cuerpo_cp_titulo_valores_extra ::= VALORES DOSPUNTOS CORCHETEA repetir_valores CORCHETEC PUNTOCOMA cuerpo_cp_titulo_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_valores_extra",191, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 145: // cuerpo_cp_titulo_valores_extra ::= EXTRA DOSPUNTOS definir_extra PUNTOCOMA cuerpo_cp_titulo_valores
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_valores_extra",191, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 146: // cuerpo_cp_titulo_etiquetas_unir ::= TITULO DOSPUNTOS crear_tit_pie PUNTOCOMA cuerpo_cp_etiquetas_unir
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_etiquetas_unir",192, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 147: // cuerpo_cp_titulo_etiquetas_unir ::= ETIQUETAS DOSPUNTOS CORCHETEA repetir_etiquetas CORCHETEC PUNTOCOMA cuerpo_cp_titulo_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_etiquetas_unir",192, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 148: // cuerpo_cp_titulo_etiquetas_unir ::= UNIR DOSPUNTOS CORCHETEA repetir_pie CORCHETEC PUNTOCOMA cuerpo_cp_titulo_etiquetas
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_etiquetas_unir",192, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 149: // cuerpo_cp_titulo_etiquetas_extra ::= TITULO DOSPUNTOS crear_tit_pie PUNTOCOMA cuerpo_cp_etiquetas_extra
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_etiquetas_extra",193, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 150: // cuerpo_cp_titulo_etiquetas_extra ::= ETIQUETAS DOSPUNTOS CORCHETEA repetir_etiquetas CORCHETEC PUNTOCOMA cuerpo_cp_titulo_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_etiquetas_extra",193, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 151: // cuerpo_cp_titulo_etiquetas_extra ::= EXTRA DOSPUNTOS definir_extra PUNTOCOMA cuerpo_cp_titulo_etiquetas
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_etiquetas_extra",193, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 152: // cuerpo_cp_titulo_etiquetas_valores ::= TITULO DOSPUNTOS crear_tit_pie PUNTOCOMA cuerpo_cp_etiquetas_valores
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_etiquetas_valores",194, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 153: // cuerpo_cp_titulo_etiquetas_valores ::= ETIQUETAS DOSPUNTOS CORCHETEA repetir_etiquetas CORCHETEC PUNTOCOMA cuerpo_cp_titulo_valores
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_etiquetas_valores",194, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 154: // cuerpo_cp_titulo_etiquetas_valores ::= VALORES DOSPUNTOS CORCHETEA repetir_valores CORCHETEC PUNTOCOMA cuerpo_cp_titulo_etiquetas
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_etiquetas_valores",194, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 155: // cuerpo_cp_titulo_tipo_unir ::= TITULO DOSPUNTOS crear_tit_pie PUNTOCOMA cuerpo_cp_tipo_unir
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_tipo_unir",195, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 156: // cuerpo_cp_titulo_tipo_unir ::= TIPO DOSPUNTOS PORCENTAJE PUNTOCOMA cuerpo_cp_titulo_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_tipo_unir",195, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 157: // cuerpo_cp_titulo_tipo_unir ::= UNIR DOSPUNTOS CORCHETEA repetir_pie CORCHETEC PUNTOCOMA cuerpo_cp_titulo_tipo
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_tipo_unir",195, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 158: // cuerpo_cp_titulo_tipo_extra ::= TITULO DOSPUNTOS crear_tit_pie PUNTOCOMA cuerpo_cp_tipo_extra
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_tipo_extra",196, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 159: // cuerpo_cp_titulo_tipo_extra ::= TIPO DOSPUNTOS PORCENTAJE PUNTOCOMA cuerpo_cp_titulo_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_tipo_extra",196, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 160: // cuerpo_cp_titulo_tipo_extra ::= EXTRA DOSPUNTOS definir_extra PUNTOCOMA cuerpo_cp_titulo_tipo
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_tipo_extra",196, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 161: // cuerpo_cp_titulo_tipo_valores ::= TITULO DOSPUNTOS crear_tit_pie PUNTOCOMA cuerpo_cp_tipo_valores
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_tipo_valores",197, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 162: // cuerpo_cp_titulo_tipo_valores ::= TIPO DOSPUNTOS PORCENTAJE PUNTOCOMA cuerpo_cp_titulo_valores
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_tipo_valores",197, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 163: // cuerpo_cp_titulo_tipo_valores ::= VALORES DOSPUNTOS CORCHETEA repetir_valores CORCHETEC PUNTOCOMA cuerpo_cp_titulo_tipo
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_tipo_valores",197, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 164: // cuerpo_cp_titulo_tipo_etiquetas ::= TITULO DOSPUNTOS crear_tit_pie PUNTOCOMA cuerpo_cp_tipo_etiquetas
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_tipo_etiquetas",198, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 165: // cuerpo_cp_titulo_tipo_etiquetas ::= TIPO DOSPUNTOS PORCENTAJE PUNTOCOMA cuerpo_cp_titulo_etiquetas
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_tipo_etiquetas",198, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 166: // cuerpo_cp_titulo_tipo_etiquetas ::= ETIQUETAS DOSPUNTOS CORCHETEA repetir_etiquetas CORCHETEC PUNTOCOMA cuerpo_cp_titulo_tipo
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_tipo_etiquetas",198, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 167: // cuerpo_cp_extra_unir ::= EXTRA DOSPUNTOS definir_extra PUNTOCOMA cuerpo_cp_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_extra_unir",199, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 168: // cuerpo_cp_extra_unir ::= UNIR DOSPUNTOS CORCHETEA repetir_pie CORCHETEC PUNTOCOMA cuerpo_cp_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_extra_unir",199, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 169: // cuerpo_cp_valores_unir ::= VALORES DOSPUNTOS CORCHETEA repetir_valores CORCHETEC PUNTOCOMA cuerpo_cp_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_valores_unir",200, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 170: // cuerpo_cp_valores_unir ::= UNIR DOSPUNTOS CORCHETEA repetir_pie CORCHETEC PUNTOCOMA cuerpo_cp_valores
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_valores_unir",200, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 171: // cuerpo_cp_valores_extra ::= VALORES DOSPUNTOS CORCHETEA repetir_valores CORCHETEC PUNTOCOMA cuerpo_cp_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_valores_extra",201, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 172: // cuerpo_cp_valores_extra ::= EXTRA DOSPUNTOS definir_extra PUNTOCOMA cuerpo_cp_valores
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_valores_extra",201, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 173: // cuerpo_cp_etiquetas_unir ::= ETIQUETAS DOSPUNTOS CORCHETEA repetir_etiquetas CORCHETEC PUNTOCOMA cuerpo_cp_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_etiquetas_unir",202, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 174: // cuerpo_cp_etiquetas_unir ::= UNIR DOSPUNTOS CORCHETEA repetir_pie CORCHETEC PUNTOCOMA cuerpo_cp_etiquetas
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_etiquetas_unir",202, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 175: // cuerpo_cp_etiquetas_extra ::= ETIQUETAS DOSPUNTOS CORCHETEA repetir_etiquetas CORCHETEC PUNTOCOMA cuerpo_cp_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_etiquetas_extra",203, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 176: // cuerpo_cp_etiquetas_extra ::= EXTRA DOSPUNTOS definir_extra PUNTOCOMA cuerpo_cp_etiquetas
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_etiquetas_extra",203, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 177: // cuerpo_cp_etiquetas_valores ::= ETIQUETAS DOSPUNTOS CORCHETEA repetir_etiquetas CORCHETEC PUNTOCOMA cuerpo_cp_valores
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_etiquetas_valores",204, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 178: // cuerpo_cp_etiquetas_valores ::= VALORES DOSPUNTOS CORCHETEA repetir_valores CORCHETEC PUNTOCOMA cuerpo_cp_etiquetas
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_etiquetas_valores",204, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 179: // cuerpo_cp_tipo_unir ::= TIPO DOSPUNTOS PORCENTAJE PUNTOCOMA cuerpo_cp_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_tipo_unir",205, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 180: // cuerpo_cp_tipo_unir ::= UNIR DOSPUNTOS CORCHETEA repetir_pie CORCHETEC PUNTOCOMA cuerpo_cp_tipo
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_tipo_unir",205, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 181: // cuerpo_cp_tipo_extra ::= TIPO DOSPUNTOS PORCENTAJE PUNTOCOMA cuerpo_cp_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_tipo_extra",206, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 182: // cuerpo_cp_tipo_extra ::= EXTRA DOSPUNTOS definir_extra PUNTOCOMA cuerpo_cp_tipo
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_tipo_extra",206, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 183: // cuerpo_cp_tipo_valores ::= TIPO DOSPUNTOS PORCENTAJE PUNTOCOMA cuerpo_cp_valores
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_tipo_valores",207, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 184: // cuerpo_cp_tipo_valores ::= VALORES DOSPUNTOS CORCHETEA repetir_valores CORCHETEC PUNTOCOMA cuerpo_cp_tipo
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_tipo_valores",207, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 185: // cuerpo_cp_tipo_etiquetas ::= TIPO DOSPUNTOS PORCENTAJE PUNTOCOMA cuerpo_cp_etiquetas
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_tipo_etiquetas",208, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 186: // cuerpo_cp_tipo_etiquetas ::= ETIQUETAS DOSPUNTOS CORCHETEA repetir_etiquetas CORCHETEC PUNTOCOMA cuerpo_cp_tipo
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_tipo_etiquetas",208, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 187: // cuerpo_cp_titulo_unir ::= TITULO DOSPUNTOS crear_tit_pie PUNTOCOMA cuerpo_cp_unir
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_unir",209, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 188: // cuerpo_cp_titulo_unir ::= UNIR DOSPUNTOS CORCHETEA repetir_pie CORCHETEC PUNTOCOMA cuerpo_cp_titulo
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_unir",209, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 189: // cuerpo_cp_titulo_extra ::= TITULO DOSPUNTOS crear_tit_pie PUNTOCOMA cuerpo_cp_extra
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_extra",210, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 190: // cuerpo_cp_titulo_extra ::= EXTRA DOSPUNTOS definir_extra PUNTOCOMA cuerpo_cp_titulo
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_extra",210, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 191: // cuerpo_cp_titulo_valores ::= TITULO DOSPUNTOS crear_tit_pie PUNTOCOMA cuerpo_cp_valores
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_valores",211, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 192: // cuerpo_cp_titulo_valores ::= VALORES DOSPUNTOS CORCHETEA repetir_valores CORCHETEC PUNTOCOMA cuerpo_cp_titulo
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_valores",211, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 193: // cuerpo_cp_titulo_etiquetas ::= TITULO DOSPUNTOS crear_tit_pie PUNTOCOMA cuerpo_cp_etiquetas
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_etiquetas",212, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 194: // cuerpo_cp_titulo_etiquetas ::= ETIQUETAS DOSPUNTOS CORCHETEA repetir_etiquetas CORCHETEC PUNTOCOMA cuerpo_cp_titulo
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_etiquetas",212, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 195: // cuerpo_cp_titulo_tipo ::= TITULO DOSPUNTOS crear_tit_pie PUNTOCOMA cuerpo_cp_tipo
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_tipo",213, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 196: // cuerpo_cp_titulo_tipo ::= TIPO DOSPUNTOS PORCENTAJE PUNTOCOMA cuerpo_cp_titulo
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo_tipo",213, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 197: // cuerpo_cp_tipo ::= TIPO DOSPUNTOS PORCENTAJE PUNTOCOMA
        {
          String RESULT =null;
          System.out.println("tipo al final");
          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_tipo",214, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 198: // cuerpo_cp_titulo ::= TITULO DOSPUNTOS crear_tit_pie PUNTOCOMA
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-3)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-3)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-3)).value;
          System.out.println("titulo al final");
          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_titulo",215, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 199: // cuerpo_cp_valores ::= VALORES DOSPUNTOS CORCHETEA repetir_valores CORCHETEC PUNTOCOMA
        {
          String RESULT =null;
          System.out.println("valores al final");
          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_valores",216, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 200: // cuerpo_cp_unir ::= UNIR DOSPUNTOS CORCHETEA repetir_pie CORCHETEC PUNTOCOMA
        {
          String RESULT =null;
          System.out.println("unir al final");
          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_unir",217, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 201: // cuerpo_cp_extra ::= EXTRA DOSPUNTOS definir_extra PUNTOCOMA
        {
          String RESULT =null;
          System.out.println("extra al final");
          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_extra",218, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 202: // cuerpo_cp_etiquetas ::= ETIQUETAS DOSPUNTOS CORCHETEA repetir_etiquetas CORCHETEC PUNTOCOMA
        {
          String RESULT =null;
          System.out.println("etiquetas al final");
          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cp_etiquetas",219, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 203: // cuerpo_circular_cantidad ::= TITULO DOSPUNTOS crear_tit_pie PUNTOCOMA cuerpo_cc_tipo_etiquetas_valores_total_extra_unir
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_circular_cantidad",25, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 204: // cuerpo_circular_cantidad ::= TIPO DOSPUNTOS CANTIDAD PUNTOCOMA cuerpo_cc_titulo_etiquetas_valores_total_extra_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_circular_cantidad",25, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 205: // cuerpo_circular_cantidad ::= ETIQUETAS DOSPUNTOS CORCHETEA repetir_etiquetas CORCHETEC PUNTOCOMA cuerpo_cc_titulo_tipo_valores_total_extra_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_circular_cantidad",25, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 206: // cuerpo_circular_cantidad ::= VALORES DOSPUNTOS CORCHETEA repetir_valores CORCHETEC PUNTOCOMA cuerpo_cc_titulo_tipo_etiquetas_total_extra_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_circular_cantidad",25, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 207: // cuerpo_circular_cantidad ::= TOTAL DOSPUNTOS repetir_total PUNTOCOMA cuerpo_cc_titulo_tipo_etiquetas_valores_extra_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_circular_cantidad",25, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 208: // cuerpo_circular_cantidad ::= EXTRA DOSPUNTOS definir_extra PUNTOCOMA cuerpo_cc_titulo_tipo_etiquetas_valores_total_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_circular_cantidad",25, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 209: // cuerpo_circular_cantidad ::= UNIR DOSPUNTOS CORCHETEA repetir_pie CORCHETEC PUNTOCOMA cuerpo_cc_titulo_tipo_etiquetas_valores_total_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_circular_cantidad",25, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 210: // cuerpo_cc_tipo_etiquetas_valores_total_extra_unir ::= TIPO DOSPUNTOS CANTIDAD PUNTOCOMA cuerpo_cc_etiquetas_valores_total_extra_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_etiquetas_valores_total_extra_unir",27, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 211: // cuerpo_cc_tipo_etiquetas_valores_total_extra_unir ::= ETIQUETAS DOSPUNTOS CORCHETEA repetir_etiquetas CORCHETEC PUNTOCOMA cuerpo_cc_tipo_valores_total_extra_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_etiquetas_valores_total_extra_unir",27, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 212: // cuerpo_cc_tipo_etiquetas_valores_total_extra_unir ::= VALORES DOSPUNTOS CORCHETEA repetir_valores CORCHETEC PUNTOCOMA cuerpo_cc_tipo_etiquetas_total_extra_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_etiquetas_valores_total_extra_unir",27, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 213: // cuerpo_cc_tipo_etiquetas_valores_total_extra_unir ::= TOTAL DOSPUNTOS repetir_total PUNTOCOMA cuerpo_cc_tipo_etiquetas_valores_extra_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_etiquetas_valores_total_extra_unir",27, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 214: // cuerpo_cc_tipo_etiquetas_valores_total_extra_unir ::= EXTRA DOSPUNTOS definir_extra PUNTOCOMA cuerpo_cc_tipo_etiquetas_valores_total_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_etiquetas_valores_total_extra_unir",27, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 215: // cuerpo_cc_tipo_etiquetas_valores_total_extra_unir ::= UNIR DOSPUNTOS CORCHETEA repetir_pie CORCHETEC PUNTOCOMA cuerpo_cc_tipo_etiquetas_valores_total_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_etiquetas_valores_total_extra_unir",27, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 216: // cuerpo_cc_titulo_etiquetas_valores_total_extra_unir ::= TITULO DOSPUNTOS crear_tit_pie PUNTOCOMA cuerpo_cc_etiquetas_valores_total_extra_unir
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_etiquetas_valores_total_extra_unir",28, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 217: // cuerpo_cc_titulo_etiquetas_valores_total_extra_unir ::= ETIQUETAS DOSPUNTOS CORCHETEA repetir_etiquetas CORCHETEC PUNTOCOMA cuerpo_cc_titulo_valores_total_extra_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_etiquetas_valores_total_extra_unir",28, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 218: // cuerpo_cc_titulo_etiquetas_valores_total_extra_unir ::= VALORES DOSPUNTOS CORCHETEA repetir_valores CORCHETEC PUNTOCOMA cuerpo_cc_titulo_etiquetas_total_extra_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_etiquetas_valores_total_extra_unir",28, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 219: // cuerpo_cc_titulo_etiquetas_valores_total_extra_unir ::= TOTAL DOSPUNTOS repetir_total PUNTOCOMA cuerpo_cc_titulo_etiquetas_valores_extra_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_etiquetas_valores_total_extra_unir",28, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 220: // cuerpo_cc_titulo_etiquetas_valores_total_extra_unir ::= EXTRA DOSPUNTOS definir_extra PUNTOCOMA cuerpo_cc_titulo_etiquetas_valores_total_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_etiquetas_valores_total_extra_unir",28, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 221: // cuerpo_cc_titulo_etiquetas_valores_total_extra_unir ::= UNIR DOSPUNTOS CORCHETEA repetir_pie CORCHETEC PUNTOCOMA cuerpo_cc_titulo_etiquetas_valores_total_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_etiquetas_valores_total_extra_unir",28, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 222: // cuerpo_cc_titulo_tipo_valores_total_extra_unir ::= TITULO DOSPUNTOS crear_tit_pie PUNTOCOMA cuerpo_cc_tipo_valores_total_extra_unir
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_valores_total_extra_unir",29, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 223: // cuerpo_cc_titulo_tipo_valores_total_extra_unir ::= TIPO DOSPUNTOS CANTIDAD PUNTOCOMA cuerpo_cc_titulo_valores_total_extra_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_valores_total_extra_unir",29, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 224: // cuerpo_cc_titulo_tipo_valores_total_extra_unir ::= VALORES DOSPUNTOS CORCHETEA repetir_valores CORCHETEC PUNTOCOMA cuerpo_cc_titulo_tipo_total_extra_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_valores_total_extra_unir",29, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 225: // cuerpo_cc_titulo_tipo_valores_total_extra_unir ::= TOTAL DOSPUNTOS repetir_total PUNTOCOMA cuerpo_cc_titulo_tipo_valores_extra_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_valores_total_extra_unir",29, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 226: // cuerpo_cc_titulo_tipo_valores_total_extra_unir ::= EXTRA DOSPUNTOS definir_extra PUNTOCOMA cuerpo_cc_titulo_tipo_valores_total_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_valores_total_extra_unir",29, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 227: // cuerpo_cc_titulo_tipo_valores_total_extra_unir ::= UNIR DOSPUNTOS CORCHETEA repetir_pie CORCHETEC PUNTOCOMA cuerpo_cc_titulo_tipo_valores_total_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_valores_total_extra_unir",29, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 228: // cuerpo_cc_titulo_tipo_etiquetas_total_extra_unir ::= TITULO DOSPUNTOS crear_tit_pie PUNTOCOMA cuerpo_cc_tipo_etiquetas_total_extra_unir
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_etiquetas_total_extra_unir",30, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 229: // cuerpo_cc_titulo_tipo_etiquetas_total_extra_unir ::= TIPO DOSPUNTOS CANTIDAD PUNTOCOMA cuerpo_cc_titulo_etiquetas_total_extra_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_etiquetas_total_extra_unir",30, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 230: // cuerpo_cc_titulo_tipo_etiquetas_total_extra_unir ::= ETIQUETAS DOSPUNTOS CORCHETEA repetir_etiquetas CORCHETEC PUNTOCOMA cuerpo_cc_titulo_tipo_total_extra_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_etiquetas_total_extra_unir",30, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 231: // cuerpo_cc_titulo_tipo_etiquetas_total_extra_unir ::= TOTAL DOSPUNTOS repetir_total PUNTOCOMA cuerpo_cc_titulo_tipo_etiquetas_extra_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_etiquetas_total_extra_unir",30, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 232: // cuerpo_cc_titulo_tipo_etiquetas_total_extra_unir ::= EXTRA DOSPUNTOS definir_extra PUNTOCOMA cuerpo_cc_titulo_tipo_etiquetas_total_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_etiquetas_total_extra_unir",30, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 233: // cuerpo_cc_titulo_tipo_etiquetas_total_extra_unir ::= UNIR DOSPUNTOS CORCHETEA repetir_pie CORCHETEC PUNTOCOMA cuerpo_cc_titulo_tipo_etiquetas_total_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_etiquetas_total_extra_unir",30, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 234: // cuerpo_cc_titulo_tipo_etiquetas_valores_extra_unir ::= TITULO DOSPUNTOS crear_tit_pie PUNTOCOMA cuerpo_cc_tipo_etiquetas_valores_extra_unir
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_etiquetas_valores_extra_unir",31, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 235: // cuerpo_cc_titulo_tipo_etiquetas_valores_extra_unir ::= TIPO DOSPUNTOS CANTIDAD PUNTOCOMA cuerpo_cc_titulo_etiquetas_valores_extra_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_etiquetas_valores_extra_unir",31, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 236: // cuerpo_cc_titulo_tipo_etiquetas_valores_extra_unir ::= ETIQUETAS DOSPUNTOS CORCHETEA repetir_etiquetas CORCHETEC PUNTOCOMA cuerpo_cc_titulo_tipo_valores_extra_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_etiquetas_valores_extra_unir",31, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 237: // cuerpo_cc_titulo_tipo_etiquetas_valores_extra_unir ::= VALORES DOSPUNTOS CORCHETEA repetir_valores CORCHETEC PUNTOCOMA cuerpo_cc_titulo_tipo_etiquetas_extra_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_etiquetas_valores_extra_unir",31, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 238: // cuerpo_cc_titulo_tipo_etiquetas_valores_extra_unir ::= EXTRA DOSPUNTOS definir_extra PUNTOCOMA cuerpo_cc_titulo_tipo_etiquetas_valores_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_etiquetas_valores_extra_unir",31, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 239: // cuerpo_cc_titulo_tipo_etiquetas_valores_extra_unir ::= UNIR DOSPUNTOS CORCHETEA repetir_pie CORCHETEC PUNTOCOMA cuerpo_cc_titulo_tipo_etiquetas_valores_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_etiquetas_valores_extra_unir",31, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 240: // cuerpo_cc_titulo_tipo_etiquetas_valores_total_unir ::= TITULO DOSPUNTOS crear_tit_pie PUNTOCOMA cuerpo_cc_tipo_etiquetas_valores_total_unir
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_etiquetas_valores_total_unir",32, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 241: // cuerpo_cc_titulo_tipo_etiquetas_valores_total_unir ::= TIPO DOSPUNTOS CANTIDAD PUNTOCOMA cuerpo_cc_titulo_etiquetas_valores_total_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_etiquetas_valores_total_unir",32, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 242: // cuerpo_cc_titulo_tipo_etiquetas_valores_total_unir ::= ETIQUETAS DOSPUNTOS CORCHETEA repetir_etiquetas CORCHETEC PUNTOCOMA cuerpo_cc_titulo_tipo_valores_total_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_etiquetas_valores_total_unir",32, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 243: // cuerpo_cc_titulo_tipo_etiquetas_valores_total_unir ::= VALORES DOSPUNTOS CORCHETEA repetir_valores CORCHETEC PUNTOCOMA cuerpo_cc_titulo_tipo_etiquetas_total_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_etiquetas_valores_total_unir",32, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 244: // cuerpo_cc_titulo_tipo_etiquetas_valores_total_unir ::= TOTAL DOSPUNTOS repetir_total PUNTOCOMA cuerpo_cc_titulo_tipo_etiquetas_valores_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_etiquetas_valores_total_unir",32, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 245: // cuerpo_cc_titulo_tipo_etiquetas_valores_total_unir ::= UNIR DOSPUNTOS CORCHETEA repetir_pie CORCHETEC PUNTOCOMA cuerpo_cc_titulo_tipo_etiquetas_valores_total
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_etiquetas_valores_total_unir",32, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 246: // cuerpo_cc_titulo_tipo_etiquetas_valores_total_extra ::= TITULO DOSPUNTOS crear_tit_pie PUNTOCOMA cuerpo_cc_tipo_etiquetas_valores_total_extra
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_etiquetas_valores_total_extra",33, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 247: // cuerpo_cc_titulo_tipo_etiquetas_valores_total_extra ::= TIPO DOSPUNTOS CANTIDAD PUNTOCOMA cuerpo_cc_titulo_etiquetas_valores_total_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_etiquetas_valores_total_extra",33, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 248: // cuerpo_cc_titulo_tipo_etiquetas_valores_total_extra ::= ETIQUETAS DOSPUNTOS CORCHETEA repetir_etiquetas CORCHETEC PUNTOCOMA cuerpo_cc_titulo_tipo_valores_total_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_etiquetas_valores_total_extra",33, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 249: // cuerpo_cc_titulo_tipo_etiquetas_valores_total_extra ::= VALORES DOSPUNTOS CORCHETEA repetir_valores CORCHETEC PUNTOCOMA cuerpo_cc_titulo_tipo_etiquetas_total_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_etiquetas_valores_total_extra",33, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 250: // cuerpo_cc_titulo_tipo_etiquetas_valores_total_extra ::= TOTAL DOSPUNTOS repetir_total PUNTOCOMA cuerpo_cc_titulo_tipo_etiquetas_valores_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_etiquetas_valores_total_extra",33, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 251: // cuerpo_cc_titulo_tipo_etiquetas_valores_total_extra ::= EXTRA DOSPUNTOS definir_extra PUNTOCOMA cuerpo_cc_titulo_tipo_etiquetas_valores_total
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_etiquetas_valores_total_extra",33, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 252: // cuerpo_cc_etiquetas_valores_total_extra_unir ::= ETIQUETAS DOSPUNTOS CORCHETEA repetir_etiquetas CORCHETEC PUNTOCOMA cuerpo_cc_valores_total_extra_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_etiquetas_valores_total_extra_unir",34, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 253: // cuerpo_cc_etiquetas_valores_total_extra_unir ::= VALORES DOSPUNTOS CORCHETEA repetir_valores CORCHETEC PUNTOCOMA cuerpo_cc_etiquetas_total_extra_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_etiquetas_valores_total_extra_unir",34, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 254: // cuerpo_cc_etiquetas_valores_total_extra_unir ::= TOTAL DOSPUNTOS repetir_total PUNTOCOMA cuerpo_cc_etiquetas_valores_extra_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_etiquetas_valores_total_extra_unir",34, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 255: // cuerpo_cc_etiquetas_valores_total_extra_unir ::= EXTRA DOSPUNTOS definir_extra PUNTOCOMA cuerpo_cc_etiquetas_valores_total_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_etiquetas_valores_total_extra_unir",34, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 256: // cuerpo_cc_etiquetas_valores_total_extra_unir ::= UNIR DOSPUNTOS CORCHETEA repetir_pie CORCHETEC PUNTOCOMA cuerpo_cc_etiquetas_valores_total_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_etiquetas_valores_total_extra_unir",34, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 257: // cuerpo_cc_tipo_valores_total_extra_unir ::= TIPO DOSPUNTOS CANTIDAD PUNTOCOMA cuerpo_cc_valores_total_extra_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_valores_total_extra_unir",35, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 258: // cuerpo_cc_tipo_valores_total_extra_unir ::= VALORES DOSPUNTOS CORCHETEA repetir_valores CORCHETEC PUNTOCOMA cuerpo_cc_tipo_total_extra_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_valores_total_extra_unir",35, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 259: // cuerpo_cc_tipo_valores_total_extra_unir ::= TOTAL DOSPUNTOS repetir_total PUNTOCOMA cuerpo_cc_tipo_valores_extra_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_valores_total_extra_unir",35, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 260: // cuerpo_cc_tipo_valores_total_extra_unir ::= EXTRA DOSPUNTOS definir_extra PUNTOCOMA cuerpo_cc_tipo_valores_total_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_valores_total_extra_unir",35, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 261: // cuerpo_cc_tipo_valores_total_extra_unir ::= UNIR DOSPUNTOS CORCHETEA repetir_pie CORCHETEC PUNTOCOMA cuerpo_cc_tipo_valores_total_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_valores_total_extra_unir",35, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 262: // cuerpo_cc_tipo_etiquetas_total_extra_unir ::= TIPO DOSPUNTOS CANTIDAD PUNTOCOMA cuerpo_cc_etiquetas_total_extra_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_etiquetas_total_extra_unir",36, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 263: // cuerpo_cc_tipo_etiquetas_total_extra_unir ::= ETIQUETAS DOSPUNTOS CORCHETEA repetir_etiquetas CORCHETEC PUNTOCOMA cuerpo_cc_tipo_total_extra_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_etiquetas_total_extra_unir",36, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 264: // cuerpo_cc_tipo_etiquetas_total_extra_unir ::= TOTAL DOSPUNTOS repetir_total PUNTOCOMA cuerpo_cc_tipo_etiquetas_extra_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_etiquetas_total_extra_unir",36, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 265: // cuerpo_cc_tipo_etiquetas_total_extra_unir ::= EXTRA DOSPUNTOS definir_extra PUNTOCOMA cuerpo_cc_tipo_etiquetas_total_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_etiquetas_total_extra_unir",36, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 266: // cuerpo_cc_tipo_etiquetas_total_extra_unir ::= UNIR DOSPUNTOS CORCHETEA repetir_pie CORCHETEC PUNTOCOMA cuerpo_cc_tipo_etiquetas_total_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_etiquetas_total_extra_unir",36, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 267: // cuerpo_cc_tipo_etiquetas_valores_extra_unir ::= TIPO DOSPUNTOS CANTIDAD PUNTOCOMA cuerpo_cc_etiquetas_valores_extra_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_etiquetas_valores_extra_unir",37, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 268: // cuerpo_cc_tipo_etiquetas_valores_extra_unir ::= ETIQUETAS DOSPUNTOS CORCHETEA repetir_etiquetas CORCHETEC PUNTOCOMA cuerpo_cc_tipo_valores_extra_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_etiquetas_valores_extra_unir",37, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 269: // cuerpo_cc_tipo_etiquetas_valores_extra_unir ::= VALORES DOSPUNTOS CORCHETEA repetir_valores CORCHETEC PUNTOCOMA cuerpo_cc_tipo_etiquetas_extra_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_etiquetas_valores_extra_unir",37, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 270: // cuerpo_cc_tipo_etiquetas_valores_extra_unir ::= EXTRA DOSPUNTOS definir_extra PUNTOCOMA cuerpo_cc_tipo_etiquetas_valores_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_etiquetas_valores_extra_unir",37, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 271: // cuerpo_cc_tipo_etiquetas_valores_extra_unir ::= UNIR DOSPUNTOS CORCHETEA repetir_pie CORCHETEC PUNTOCOMA cuerpo_cc_tipo_etiquetas_valores_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_etiquetas_valores_extra_unir",37, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 272: // cuerpo_cc_tipo_etiquetas_valores_total_unir ::= TIPO DOSPUNTOS CANTIDAD PUNTOCOMA cuerpo_cc_etiquetas_valores_total_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_etiquetas_valores_total_unir",38, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 273: // cuerpo_cc_tipo_etiquetas_valores_total_unir ::= ETIQUETAS DOSPUNTOS CORCHETEA repetir_etiquetas CORCHETEC PUNTOCOMA cuerpo_cc_tipo_valores_total_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_etiquetas_valores_total_unir",38, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 274: // cuerpo_cc_tipo_etiquetas_valores_total_unir ::= VALORES DOSPUNTOS CORCHETEA repetir_valores CORCHETEC PUNTOCOMA cuerpo_cc_tipo_etiquetas_total_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_etiquetas_valores_total_unir",38, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 275: // cuerpo_cc_tipo_etiquetas_valores_total_unir ::= TOTAL DOSPUNTOS repetir_total PUNTOCOMA cuerpo_cc_tipo_etiquetas_valores_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_etiquetas_valores_total_unir",38, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 276: // cuerpo_cc_tipo_etiquetas_valores_total_unir ::= UNIR DOSPUNTOS CORCHETEA repetir_pie CORCHETEC PUNTOCOMA cuerpo_cc_tipo_etiquetas_valores_total
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_etiquetas_valores_total_unir",38, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 277: // cuerpo_cc_tipo_etiquetas_valores_total_extra ::= TIPO DOSPUNTOS CANTIDAD PUNTOCOMA cuerpo_cc_etiquetas_valores_total_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_etiquetas_valores_total_extra",39, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 278: // cuerpo_cc_tipo_etiquetas_valores_total_extra ::= ETIQUETAS DOSPUNTOS CORCHETEA repetir_etiquetas CORCHETEC PUNTOCOMA cuerpo_cc_tipo_valores_total_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_etiquetas_valores_total_extra",39, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 279: // cuerpo_cc_tipo_etiquetas_valores_total_extra ::= VALORES DOSPUNTOS CORCHETEA repetir_valores CORCHETEC PUNTOCOMA cuerpo_cc_tipo_etiquetas_total_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_etiquetas_valores_total_extra",39, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 280: // cuerpo_cc_tipo_etiquetas_valores_total_extra ::= TOTAL DOSPUNTOS repetir_total PUNTOCOMA cuerpo_cc_tipo_etiquetas_valores_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_etiquetas_valores_total_extra",39, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 281: // cuerpo_cc_tipo_etiquetas_valores_total_extra ::= EXTRA DOSPUNTOS definir_extra PUNTOCOMA cuerpo_cc_tipo_etiquetas_valores_total
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_etiquetas_valores_total_extra",39, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 282: // cuerpo_cc_titulo_valores_total_extra_unir ::= TITULO DOSPUNTOS crear_tit_pie PUNTOCOMA cuerpo_cc_valores_total_extra_unir
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_valores_total_extra_unir",40, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 283: // cuerpo_cc_titulo_valores_total_extra_unir ::= VALORES DOSPUNTOS CORCHETEA repetir_valores CORCHETEC PUNTOCOMA cuerpo_cc_titulo_total_extra_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_valores_total_extra_unir",40, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 284: // cuerpo_cc_titulo_valores_total_extra_unir ::= TOTAL DOSPUNTOS repetir_total PUNTOCOMA cuerpo_cc_titulo_valores_extra_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_valores_total_extra_unir",40, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 285: // cuerpo_cc_titulo_valores_total_extra_unir ::= EXTRA DOSPUNTOS definir_extra PUNTOCOMA cuerpo_cc_titulo_valores_total_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_valores_total_extra_unir",40, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 286: // cuerpo_cc_titulo_valores_total_extra_unir ::= UNIR DOSPUNTOS CORCHETEA repetir_pie CORCHETEC PUNTOCOMA cuerpo_cc_titulo_valores_total_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_valores_total_extra_unir",40, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 287: // cuerpo_cc_titulo_etiquetas_total_extra_unir ::= TITULO DOSPUNTOS crear_tit_pie PUNTOCOMA cuerpo_cc_etiquetas_total_extra_unir
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_etiquetas_total_extra_unir",41, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 288: // cuerpo_cc_titulo_etiquetas_total_extra_unir ::= ETIQUETAS DOSPUNTOS CORCHETEA repetir_etiquetas CORCHETEC PUNTOCOMA cuerpo_cc_titulo_total_extra_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_etiquetas_total_extra_unir",41, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 289: // cuerpo_cc_titulo_etiquetas_total_extra_unir ::= TOTAL DOSPUNTOS repetir_total PUNTOCOMA cuerpo_cc_titulo_etiquetas_extra_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_etiquetas_total_extra_unir",41, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 290: // cuerpo_cc_titulo_etiquetas_total_extra_unir ::= EXTRA DOSPUNTOS definir_extra PUNTOCOMA cuerpo_cc_titulo_etiquetas_total_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_etiquetas_total_extra_unir",41, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 291: // cuerpo_cc_titulo_etiquetas_total_extra_unir ::= UNIR DOSPUNTOS CORCHETEA repetir_pie CORCHETEC PUNTOCOMA cuerpo_cc_titulo_etiquetas_total_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_etiquetas_total_extra_unir",41, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 292: // cuerpo_cc_titulo_etiquetas_valores_extra_unir ::= TITULO DOSPUNTOS crear_tit_pie PUNTOCOMA cuerpo_cc_etiquetas_valores_extra_unir
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_etiquetas_valores_extra_unir",42, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 293: // cuerpo_cc_titulo_etiquetas_valores_extra_unir ::= ETIQUETAS DOSPUNTOS CORCHETEA repetir_etiquetas CORCHETEC PUNTOCOMA cuerpo_cc_titulo_valores_extra_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_etiquetas_valores_extra_unir",42, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 294: // cuerpo_cc_titulo_etiquetas_valores_extra_unir ::= VALORES DOSPUNTOS CORCHETEA repetir_valores CORCHETEC PUNTOCOMA cuerpo_cc_titulo_etiquetas_extra_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_etiquetas_valores_extra_unir",42, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 295: // cuerpo_cc_titulo_etiquetas_valores_extra_unir ::= EXTRA DOSPUNTOS definir_extra PUNTOCOMA cuerpo_cc_titulo_etiquetas_valores_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_etiquetas_valores_extra_unir",42, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 296: // cuerpo_cc_titulo_etiquetas_valores_extra_unir ::= UNIR DOSPUNTOS CORCHETEA repetir_pie CORCHETEC PUNTOCOMA cuerpo_cc_titulo_etiquetas_valores_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_etiquetas_valores_extra_unir",42, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 297: // cuerpo_cc_titulo_etiquetas_valores_total_unir ::= TITULO DOSPUNTOS crear_tit_pie PUNTOCOMA cuerpo_cc_etiquetas_valores_total_unir
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_etiquetas_valores_total_unir",43, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 298: // cuerpo_cc_titulo_etiquetas_valores_total_unir ::= ETIQUETAS DOSPUNTOS CORCHETEA repetir_etiquetas CORCHETEC PUNTOCOMA cuerpo_cc_titulo_valores_total_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_etiquetas_valores_total_unir",43, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 299: // cuerpo_cc_titulo_etiquetas_valores_total_unir ::= VALORES DOSPUNTOS CORCHETEA repetir_valores CORCHETEC PUNTOCOMA cuerpo_cc_titulo_etiquetas_total_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_etiquetas_valores_total_unir",43, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /* . . . . . .*/
        default:
          throw new Exception(
                  "Invalid action number "+CUP$SintacticoParser$act_num+"found in internal parse table");

      }
    } /* end of method */
    /** Method 1 with the actual generated action code for actions 300 to 600. */
    public final java_cup.runtime.Symbol CUP$SintacticoParser$do_action_part00000001(
            int                        CUP$SintacticoParser$act_num,
            java_cup.runtime.lr_parser CUP$SintacticoParser$parser,
            java.util.Stack            CUP$SintacticoParser$stack,
            int                        CUP$SintacticoParser$top)
            throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoParser$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoParser$act_num)
      {
        /*. . . . . . . . . . . . . . . . . . . .*/
        case 300: // cuerpo_cc_titulo_etiquetas_valores_total_unir ::= TOTAL DOSPUNTOS repetir_total PUNTOCOMA cuerpo_cc_titulo_etiquetas_valores_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_etiquetas_valores_total_unir",43, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 301: // cuerpo_cc_titulo_etiquetas_valores_total_unir ::= UNIR DOSPUNTOS CORCHETEA repetir_pie CORCHETEC PUNTOCOMA cuerpo_cc_titulo_etiquetas_valores_total
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_etiquetas_valores_total_unir",43, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 302: // cuerpo_cc_titulo_etiquetas_valores_total_extra ::= TITULO DOSPUNTOS crear_tit_pie PUNTOCOMA cuerpo_cc_etiquetas_valores_total_extra
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_etiquetas_valores_total_extra",44, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 303: // cuerpo_cc_titulo_etiquetas_valores_total_extra ::= ETIQUETAS DOSPUNTOS CORCHETEA repetir_etiquetas CORCHETEC PUNTOCOMA cuerpo_cc_titulo_valores_total_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_etiquetas_valores_total_extra",44, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 304: // cuerpo_cc_titulo_etiquetas_valores_total_extra ::= VALORES DOSPUNTOS CORCHETEA repetir_valores CORCHETEC PUNTOCOMA cuerpo_cc_titulo_etiquetas_total_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_etiquetas_valores_total_extra",44, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 305: // cuerpo_cc_titulo_etiquetas_valores_total_extra ::= TOTAL DOSPUNTOS repetir_total PUNTOCOMA cuerpo_cc_titulo_etiquetas_valores_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_etiquetas_valores_total_extra",44, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 306: // cuerpo_cc_titulo_etiquetas_valores_total_extra ::= EXTRA DOSPUNTOS definir_extra PUNTOCOMA cuerpo_cc_titulo_etiquetas_valores_total
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_etiquetas_valores_total_extra",44, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 307: // cuerpo_cc_titulo_tipo_total_extra_unir ::= TITULO DOSPUNTOS crear_tit_pie PUNTOCOMA cuerpo_cc_tipo_total_extra_unir
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_total_extra_unir",45, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 308: // cuerpo_cc_titulo_tipo_total_extra_unir ::= TIPO DOSPUNTOS CANTIDAD PUNTOCOMA cuerpo_cc_titulo_total_extra_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_total_extra_unir",45, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 309: // cuerpo_cc_titulo_tipo_total_extra_unir ::= TOTAL DOSPUNTOS repetir_total PUNTOCOMA cuerpo_cc_titulo_tipo_extra_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_total_extra_unir",45, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 310: // cuerpo_cc_titulo_tipo_total_extra_unir ::= EXTRA DOSPUNTOS definir_extra PUNTOCOMA cuerpo_cc_titulo_tipo_total_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_total_extra_unir",45, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 311: // cuerpo_cc_titulo_tipo_total_extra_unir ::= UNIR DOSPUNTOS CORCHETEA repetir_pie CORCHETEC PUNTOCOMA cuerpo_cc_titulo_tipo_total_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_total_extra_unir",45, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 312: // cuerpo_cc_titulo_tipo_valores_extra_unir ::= TITULO DOSPUNTOS crear_tit_pie PUNTOCOMA cuerpo_cc_tipo_valores_extra_unir
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_valores_extra_unir",46, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 313: // cuerpo_cc_titulo_tipo_valores_extra_unir ::= TIPO DOSPUNTOS CANTIDAD PUNTOCOMA cuerpo_cc_titulo_valores_extra_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_valores_extra_unir",46, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 314: // cuerpo_cc_titulo_tipo_valores_extra_unir ::= VALORES DOSPUNTOS CORCHETEA repetir_valores CORCHETEC PUNTOCOMA cuerpo_cc_titulo_tipo_extra_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_valores_extra_unir",46, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 315: // cuerpo_cc_titulo_tipo_valores_extra_unir ::= EXTRA DOSPUNTOS definir_extra PUNTOCOMA cuerpo_cc_titulo_tipo_valores_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_valores_extra_unir",46, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 316: // cuerpo_cc_titulo_tipo_valores_extra_unir ::= UNIR DOSPUNTOS CORCHETEA repetir_pie CORCHETEC PUNTOCOMA cuerpo_cc_titulo_tipo_valores_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_valores_extra_unir",46, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 317: // cuerpo_cc_titulo_tipo_valores_total_unir ::= TITULO DOSPUNTOS crear_tit_pie PUNTOCOMA cuerpo_cc_tipo_valores_total_unir
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_valores_total_unir",47, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 318: // cuerpo_cc_titulo_tipo_valores_total_unir ::= TIPO DOSPUNTOS CANTIDAD PUNTOCOMA cuerpo_cc_titulo_valores_total_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_valores_total_unir",47, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 319: // cuerpo_cc_titulo_tipo_valores_total_unir ::= VALORES DOSPUNTOS CORCHETEA repetir_valores CORCHETEC PUNTOCOMA cuerpo_cc_titulo_tipo_total_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_valores_total_unir",47, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 320: // cuerpo_cc_titulo_tipo_valores_total_unir ::= TOTAL DOSPUNTOS repetir_total PUNTOCOMA cuerpo_cc_titulo_tipo_valores_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_valores_total_unir",47, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 321: // cuerpo_cc_titulo_tipo_valores_total_unir ::= UNIR DOSPUNTOS CORCHETEA repetir_pie CORCHETEC PUNTOCOMA cuerpo_cc_titulo_tipo_valores_total
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_valores_total_unir",47, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 322: // cuerpo_cc_titulo_tipo_valores_total_extra ::= TITULO DOSPUNTOS crear_tit_pie PUNTOCOMA cuerpo_cc_tipo_valores_total_extra
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_valores_total_extra",48, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 323: // cuerpo_cc_titulo_tipo_valores_total_extra ::= TIPO DOSPUNTOS CANTIDAD PUNTOCOMA cuerpo_cc_titulo_valores_total_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_valores_total_extra",48, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 324: // cuerpo_cc_titulo_tipo_valores_total_extra ::= VALORES DOSPUNTOS CORCHETEA repetir_valores CORCHETEC PUNTOCOMA cuerpo_cc_titulo_tipo_total_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_valores_total_extra",48, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 325: // cuerpo_cc_titulo_tipo_valores_total_extra ::= TOTAL DOSPUNTOS repetir_total PUNTOCOMA cuerpo_cc_titulo_tipo_valores_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_valores_total_extra",48, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 326: // cuerpo_cc_titulo_tipo_valores_total_extra ::= EXTRA DOSPUNTOS definir_extra PUNTOCOMA cuerpo_cc_titulo_tipo_valores_total
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_valores_total_extra",48, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 327: // cuerpo_cc_titulo_tipo_etiquetas_extra_unir ::= TITULO DOSPUNTOS crear_tit_pie PUNTOCOMA cuerpo_cc_tipo_etiquetas_extra_unir
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_etiquetas_extra_unir",49, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 328: // cuerpo_cc_titulo_tipo_etiquetas_extra_unir ::= TIPO DOSPUNTOS CANTIDAD PUNTOCOMA cuerpo_cc_titulo_etiquetas_extra_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_etiquetas_extra_unir",49, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 329: // cuerpo_cc_titulo_tipo_etiquetas_extra_unir ::= ETIQUETAS DOSPUNTOS CORCHETEA repetir_etiquetas CORCHETEC PUNTOCOMA cuerpo_cc_titulo_tipo_extra_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_etiquetas_extra_unir",49, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 330: // cuerpo_cc_titulo_tipo_etiquetas_extra_unir ::= EXTRA DOSPUNTOS definir_extra PUNTOCOMA cuerpo_cc_titulo_tipo_etiquetas_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_etiquetas_extra_unir",49, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 331: // cuerpo_cc_titulo_tipo_etiquetas_extra_unir ::= UNIR DOSPUNTOS CORCHETEA repetir_pie CORCHETEC PUNTOCOMA cuerpo_cc_titulo_tipo_etiquetas_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_etiquetas_extra_unir",49, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 332: // cuerpo_cc_titulo_tipo_etiquetas_total_unir ::= TITULO DOSPUNTOS crear_tit_pie PUNTOCOMA cuerpo_cc_tipo_etiquetas_total_unir
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_etiquetas_total_unir",50, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 333: // cuerpo_cc_titulo_tipo_etiquetas_total_unir ::= TIPO DOSPUNTOS CANTIDAD PUNTOCOMA cuerpo_cc_titulo_etiquetas_total_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_etiquetas_total_unir",50, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 334: // cuerpo_cc_titulo_tipo_etiquetas_total_unir ::= ETIQUETAS DOSPUNTOS CORCHETEA repetir_etiquetas CORCHETEC PUNTOCOMA cuerpo_cc_titulo_tipo_total_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_etiquetas_total_unir",50, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 335: // cuerpo_cc_titulo_tipo_etiquetas_total_unir ::= TOTAL DOSPUNTOS repetir_total PUNTOCOMA cuerpo_cc_titulo_tipo_etiquetas_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_etiquetas_total_unir",50, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 336: // cuerpo_cc_titulo_tipo_etiquetas_total_unir ::= UNIR DOSPUNTOS CORCHETEA repetir_pie CORCHETEC PUNTOCOMA cuerpo_cc_titulo_tipo_etiquetas_total
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_etiquetas_total_unir",50, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 337: // cuerpo_cc_titulo_tipo_etiquetas_total_extra ::= TITULO DOSPUNTOS crear_tit_pie PUNTOCOMA cuerpo_cc_tipo_etiquetas_total_extra
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_etiquetas_total_extra",51, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 338: // cuerpo_cc_titulo_tipo_etiquetas_total_extra ::= TIPO DOSPUNTOS CANTIDAD PUNTOCOMA cuerpo_cc_titulo_etiquetas_total_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_etiquetas_total_extra",51, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 339: // cuerpo_cc_titulo_tipo_etiquetas_total_extra ::= ETIQUETAS DOSPUNTOS CORCHETEA repetir_etiquetas CORCHETEC PUNTOCOMA cuerpo_cc_titulo_tipo_total_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_etiquetas_total_extra",51, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 340: // cuerpo_cc_titulo_tipo_etiquetas_total_extra ::= TOTAL DOSPUNTOS repetir_total PUNTOCOMA cuerpo_cc_titulo_tipo_etiquetas_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_etiquetas_total_extra",51, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 341: // cuerpo_cc_titulo_tipo_etiquetas_total_extra ::= EXTRA DOSPUNTOS definir_extra PUNTOCOMA cuerpo_cc_titulo_tipo_etiquetas_total
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_etiquetas_total_extra",51, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 342: // cuerpo_cc_titulo_tipo_etiquetas_valores_unir ::= TITULO DOSPUNTOS crear_tit_pie PUNTOCOMA cuerpo_cc_tipo_etiquetas_valores_unir
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_etiquetas_valores_unir",52, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 343: // cuerpo_cc_titulo_tipo_etiquetas_valores_unir ::= TIPO DOSPUNTOS CANTIDAD PUNTOCOMA cuerpo_cc_titulo_etiquetas_valores_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_etiquetas_valores_unir",52, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 344: // cuerpo_cc_titulo_tipo_etiquetas_valores_unir ::= ETIQUETAS DOSPUNTOS CORCHETEA repetir_etiquetas CORCHETEC PUNTOCOMA cuerpo_cc_titulo_tipo_valores_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_etiquetas_valores_unir",52, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 345: // cuerpo_cc_titulo_tipo_etiquetas_valores_unir ::= VALORES DOSPUNTOS CORCHETEA repetir_valores CORCHETEC PUNTOCOMA cuerpo_cc_titulo_tipo_etiquetas_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_etiquetas_valores_unir",52, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 346: // cuerpo_cc_titulo_tipo_etiquetas_valores_unir ::= UNIR DOSPUNTOS CORCHETEA repetir_pie CORCHETEC PUNTOCOMA cuerpo_cc_titulo_tipo_etiquetas_valores
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_etiquetas_valores_unir",52, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 347: // cuerpo_cc_titulo_tipo_etiquetas_valores_extra ::= TITULO DOSPUNTOS crear_tit_pie PUNTOCOMA cuerpo_cc_tipo_etiquetas_valores_extra
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_etiquetas_valores_extra",53, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 348: // cuerpo_cc_titulo_tipo_etiquetas_valores_extra ::= TIPO DOSPUNTOS CANTIDAD PUNTOCOMA cuerpo_cc_titulo_etiquetas_valores_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_etiquetas_valores_extra",53, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 349: // cuerpo_cc_titulo_tipo_etiquetas_valores_extra ::= ETIQUETAS DOSPUNTOS CORCHETEA repetir_etiquetas CORCHETEC PUNTOCOMA cuerpo_cc_titulo_tipo_valores_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_etiquetas_valores_extra",53, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 350: // cuerpo_cc_titulo_tipo_etiquetas_valores_extra ::= VALORES DOSPUNTOS CORCHETEA repetir_valores CORCHETEC PUNTOCOMA cuerpo_cc_titulo_tipo_etiquetas_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_etiquetas_valores_extra",53, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 351: // cuerpo_cc_titulo_tipo_etiquetas_valores_extra ::= EXTRA DOSPUNTOS definir_extra PUNTOCOMA cuerpo_cc_titulo_tipo_etiquetas_valores
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_etiquetas_valores_extra",53, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 352: // cuerpo_cc_titulo_tipo_etiquetas_valores_total ::= TITULO DOSPUNTOS crear_tit_pie PUNTOCOMA cuerpo_cc_tipo_etiquetas_valores_total
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_etiquetas_valores_total",54, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 353: // cuerpo_cc_titulo_tipo_etiquetas_valores_total ::= TIPO DOSPUNTOS CANTIDAD PUNTOCOMA cuerpo_cc_titulo_etiquetas_valores_total
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_etiquetas_valores_total",54, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 354: // cuerpo_cc_titulo_tipo_etiquetas_valores_total ::= ETIQUETAS DOSPUNTOS CORCHETEA repetir_etiquetas CORCHETEC PUNTOCOMA cuerpo_cc_titulo_tipo_valores_total
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_etiquetas_valores_total",54, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 355: // cuerpo_cc_titulo_tipo_etiquetas_valores_total ::= VALORES DOSPUNTOS CORCHETEA repetir_valores CORCHETEC PUNTOCOMA cuerpo_cc_titulo_tipo_etiquetas_total
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_etiquetas_valores_total",54, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 356: // cuerpo_cc_titulo_tipo_etiquetas_valores_total ::= TOTAL DOSPUNTOS repetir_total PUNTOCOMA cuerpo_cc_titulo_tipo_etiquetas_valores
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_etiquetas_valores_total",54, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 357: // cuerpo_cc_valores_total_extra_unir ::= VALORES DOSPUNTOS CORCHETEA repetir_valores CORCHETEC PUNTOCOMA cuerpo_cc_total_extra_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_valores_total_extra_unir",55, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 358: // cuerpo_cc_valores_total_extra_unir ::= TOTAL DOSPUNTOS repetir_total PUNTOCOMA cuerpo_cc_valores_extra_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_valores_total_extra_unir",55, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 359: // cuerpo_cc_valores_total_extra_unir ::= EXTRA DOSPUNTOS definir_extra PUNTOCOMA cuerpo_cc_valores_total_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_valores_total_extra_unir",55, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 360: // cuerpo_cc_valores_total_extra_unir ::= UNIR DOSPUNTOS CORCHETEA repetir_pie CORCHETEC PUNTOCOMA cuerpo_cc_valores_total_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_valores_total_extra_unir",55, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 361: // cuerpo_cc_etiquetas_total_extra_unir ::= ETIQUETAS DOSPUNTOS CORCHETEA repetir_etiquetas CORCHETEC PUNTOCOMA cuerpo_cc_total_extra_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_etiquetas_total_extra_unir",56, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 362: // cuerpo_cc_etiquetas_total_extra_unir ::= TOTAL DOSPUNTOS repetir_total PUNTOCOMA cuerpo_cc_etiquetas_extra_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_etiquetas_total_extra_unir",56, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 363: // cuerpo_cc_etiquetas_total_extra_unir ::= EXTRA DOSPUNTOS definir_extra PUNTOCOMA cuerpo_cc_etiquetas_total_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_etiquetas_total_extra_unir",56, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 364: // cuerpo_cc_etiquetas_total_extra_unir ::= UNIR DOSPUNTOS CORCHETEA repetir_pie CORCHETEC PUNTOCOMA cuerpo_cc_etiquetas_total_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_etiquetas_total_extra_unir",56, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 365: // cuerpo_cc_etiquetas_valores_extra_unir ::= ETIQUETAS DOSPUNTOS CORCHETEA repetir_etiquetas CORCHETEC PUNTOCOMA cuerpo_cc_valores_extra_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_etiquetas_valores_extra_unir",57, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 366: // cuerpo_cc_etiquetas_valores_extra_unir ::= VALORES DOSPUNTOS CORCHETEA repetir_valores CORCHETEC PUNTOCOMA cuerpo_cc_etiquetas_extra_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_etiquetas_valores_extra_unir",57, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 367: // cuerpo_cc_etiquetas_valores_extra_unir ::= EXTRA DOSPUNTOS definir_extra PUNTOCOMA cuerpo_cc_etiquetas_valores_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_etiquetas_valores_extra_unir",57, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 368: // cuerpo_cc_etiquetas_valores_extra_unir ::= UNIR DOSPUNTOS CORCHETEA repetir_pie CORCHETEC PUNTOCOMA cuerpo_cc_etiquetas_valores_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_etiquetas_valores_extra_unir",57, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 369: // cuerpo_cc_etiquetas_valores_total_unir ::= ETIQUETAS DOSPUNTOS CORCHETEA repetir_etiquetas CORCHETEC PUNTOCOMA cuerpo_cc_valores_total_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_etiquetas_valores_total_unir",58, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 370: // cuerpo_cc_etiquetas_valores_total_unir ::= VALORES DOSPUNTOS CORCHETEA repetir_valores CORCHETEC PUNTOCOMA cuerpo_cc_etiquetas_total_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_etiquetas_valores_total_unir",58, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 371: // cuerpo_cc_etiquetas_valores_total_unir ::= TOTAL DOSPUNTOS repetir_total PUNTOCOMA cuerpo_cc_etiquetas_valores_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_etiquetas_valores_total_unir",58, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 372: // cuerpo_cc_etiquetas_valores_total_unir ::= UNIR DOSPUNTOS CORCHETEA repetir_pie CORCHETEC PUNTOCOMA cuerpo_cc_etiquetas_valores_total
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_etiquetas_valores_total_unir",58, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 373: // cuerpo_cc_etiquetas_valores_total_extra ::= ETIQUETAS DOSPUNTOS CORCHETEA repetir_etiquetas CORCHETEC PUNTOCOMA cuerpo_cc_valores_total_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_etiquetas_valores_total_extra",59, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 374: // cuerpo_cc_etiquetas_valores_total_extra ::= VALORES DOSPUNTOS CORCHETEA repetir_valores CORCHETEC PUNTOCOMA cuerpo_cc_etiquetas_total_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_etiquetas_valores_total_extra",59, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 375: // cuerpo_cc_etiquetas_valores_total_extra ::= TOTAL DOSPUNTOS repetir_total PUNTOCOMA cuerpo_cc_etiquetas_valores_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_etiquetas_valores_total_extra",59, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 376: // cuerpo_cc_etiquetas_valores_total_extra ::= EXTRA DOSPUNTOS definir_extra PUNTOCOMA cuerpo_cc_etiquetas_valores_total
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_etiquetas_valores_total_extra",59, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 377: // cuerpo_cc_tipo_total_extra_unir ::= TIPO DOSPUNTOS CANTIDAD PUNTOCOMA cuerpo_cc_total_extra_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_total_extra_unir",60, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 378: // cuerpo_cc_tipo_total_extra_unir ::= TOTAL DOSPUNTOS repetir_total PUNTOCOMA cuerpo_cc_tipo_extra_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_total_extra_unir",60, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 379: // cuerpo_cc_tipo_total_extra_unir ::= EXTRA DOSPUNTOS definir_extra PUNTOCOMA cuerpo_cc_tipo_total_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_total_extra_unir",60, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 380: // cuerpo_cc_tipo_total_extra_unir ::= UNIR DOSPUNTOS CORCHETEA repetir_pie CORCHETEC PUNTOCOMA cuerpo_cc_tipo_total_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_total_extra_unir",60, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 381: // cuerpo_cc_tipo_valores_extra_unir ::= TIPO DOSPUNTOS CANTIDAD PUNTOCOMA cuerpo_cc_valores_extra_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_valores_extra_unir",61, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 382: // cuerpo_cc_tipo_valores_extra_unir ::= VALORES DOSPUNTOS CORCHETEA repetir_valores CORCHETEC PUNTOCOMA cuerpo_cc_tipo_extra_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_valores_extra_unir",61, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 383: // cuerpo_cc_tipo_valores_extra_unir ::= EXTRA DOSPUNTOS definir_extra PUNTOCOMA cuerpo_cc_tipo_valores_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_valores_extra_unir",61, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 384: // cuerpo_cc_tipo_valores_extra_unir ::= UNIR DOSPUNTOS CORCHETEA repetir_pie CORCHETEC PUNTOCOMA cuerpo_cc_tipo_valores_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_valores_extra_unir",61, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 385: // cuerpo_cc_tipo_valores_total_unir ::= TIPO DOSPUNTOS CANTIDAD PUNTOCOMA cuerpo_cc_valores_total_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_valores_total_unir",62, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 386: // cuerpo_cc_tipo_valores_total_unir ::= VALORES DOSPUNTOS CORCHETEA repetir_valores CORCHETEC PUNTOCOMA cuerpo_cc_tipo_total_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_valores_total_unir",62, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 387: // cuerpo_cc_tipo_valores_total_unir ::= TOTAL DOSPUNTOS repetir_total PUNTOCOMA cuerpo_cc_tipo_valores_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_valores_total_unir",62, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 388: // cuerpo_cc_tipo_valores_total_unir ::= UNIR DOSPUNTOS CORCHETEA repetir_pie CORCHETEC PUNTOCOMA cuerpo_cc_tipo_valores_total
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_valores_total_unir",62, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 389: // cuerpo_cc_tipo_valores_total_extra ::= TIPO DOSPUNTOS CANTIDAD PUNTOCOMA cuerpo_cc_valores_total_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_valores_total_extra",63, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 390: // cuerpo_cc_tipo_valores_total_extra ::= VALORES DOSPUNTOS CORCHETEA repetir_valores CORCHETEC PUNTOCOMA cuerpo_cc_tipo_total_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_valores_total_extra",63, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 391: // cuerpo_cc_tipo_valores_total_extra ::= TOTAL DOSPUNTOS repetir_total PUNTOCOMA cuerpo_cc_tipo_valores_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_valores_total_extra",63, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 392: // cuerpo_cc_tipo_valores_total_extra ::= EXTRA DOSPUNTOS definir_extra PUNTOCOMA cuerpo_cc_tipo_valores_total
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_valores_total_extra",63, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 393: // cuerpo_cc_tipo_etiquetas_extra_unir ::= TIPO DOSPUNTOS CANTIDAD PUNTOCOMA cuerpo_cc_etiquetas_extra_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_etiquetas_extra_unir",64, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 394: // cuerpo_cc_tipo_etiquetas_extra_unir ::= ETIQUETAS DOSPUNTOS CORCHETEA repetir_etiquetas CORCHETEC PUNTOCOMA cuerpo_cc_tipo_extra_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_etiquetas_extra_unir",64, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 395: // cuerpo_cc_tipo_etiquetas_extra_unir ::= EXTRA DOSPUNTOS definir_extra PUNTOCOMA cuerpo_cc_tipo_etiquetas_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_etiquetas_extra_unir",64, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 396: // cuerpo_cc_tipo_etiquetas_extra_unir ::= UNIR DOSPUNTOS CORCHETEA repetir_pie CORCHETEC PUNTOCOMA cuerpo_cc_tipo_etiquetas_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_etiquetas_extra_unir",64, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 397: // cuerpo_cc_tipo_etiquetas_total_unir ::= TIPO DOSPUNTOS CANTIDAD PUNTOCOMA cuerpo_cc_etiquetas_total_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_etiquetas_total_unir",65, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 398: // cuerpo_cc_tipo_etiquetas_total_unir ::= ETIQUETAS DOSPUNTOS CORCHETEA repetir_etiquetas CORCHETEC PUNTOCOMA cuerpo_cc_tipo_total_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_etiquetas_total_unir",65, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 399: // cuerpo_cc_tipo_etiquetas_total_unir ::= TOTAL DOSPUNTOS repetir_total PUNTOCOMA cuerpo_cc_tipo_etiquetas_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_etiquetas_total_unir",65, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 400: // cuerpo_cc_tipo_etiquetas_total_unir ::= UNIR DOSPUNTOS CORCHETEA repetir_pie CORCHETEC PUNTOCOMA cuerpo_cc_tipo_etiquetas_total
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_etiquetas_total_unir",65, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 401: // cuerpo_cc_tipo_etiquetas_total_extra ::= TIPO DOSPUNTOS CANTIDAD PUNTOCOMA cuerpo_cc_etiquetas_total_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_etiquetas_total_extra",66, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 402: // cuerpo_cc_tipo_etiquetas_total_extra ::= ETIQUETAS DOSPUNTOS CORCHETEA repetir_etiquetas CORCHETEC PUNTOCOMA cuerpo_cc_tipo_total_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_etiquetas_total_extra",66, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 403: // cuerpo_cc_tipo_etiquetas_total_extra ::= TOTAL DOSPUNTOS repetir_total PUNTOCOMA cuerpo_cc_tipo_etiquetas_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_etiquetas_total_extra",66, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 404: // cuerpo_cc_tipo_etiquetas_total_extra ::= EXTRA DOSPUNTOS definir_extra PUNTOCOMA cuerpo_cc_tipo_etiquetas_total
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_etiquetas_total_extra",66, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 405: // cuerpo_cc_tipo_etiquetas_valores_unir ::= TIPO DOSPUNTOS CANTIDAD PUNTOCOMA cuerpo_cc_etiquetas_valores_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_etiquetas_valores_unir",67, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 406: // cuerpo_cc_tipo_etiquetas_valores_unir ::= ETIQUETAS DOSPUNTOS CORCHETEA repetir_etiquetas CORCHETEC PUNTOCOMA cuerpo_cc_tipo_valores_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_etiquetas_valores_unir",67, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 407: // cuerpo_cc_tipo_etiquetas_valores_unir ::= VALORES DOSPUNTOS CORCHETEA repetir_valores CORCHETEC PUNTOCOMA cuerpo_cc_tipo_etiquetas_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_etiquetas_valores_unir",67, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 408: // cuerpo_cc_tipo_etiquetas_valores_unir ::= UNIR DOSPUNTOS CORCHETEA repetir_pie CORCHETEC PUNTOCOMA cuerpo_cc_tipo_etiquetas_valores
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_etiquetas_valores_unir",67, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 409: // cuerpo_cc_tipo_etiquetas_valores_extra ::= TIPO DOSPUNTOS CANTIDAD PUNTOCOMA cuerpo_cc_etiquetas_valores_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_etiquetas_valores_extra",68, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 410: // cuerpo_cc_tipo_etiquetas_valores_extra ::= ETIQUETAS DOSPUNTOS CORCHETEA repetir_etiquetas CORCHETEC PUNTOCOMA cuerpo_cc_tipo_valores_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_etiquetas_valores_extra",68, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 411: // cuerpo_cc_tipo_etiquetas_valores_extra ::= VALORES DOSPUNTOS CORCHETEA repetir_valores CORCHETEC PUNTOCOMA cuerpo_cc_tipo_etiquetas_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_etiquetas_valores_extra",68, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 412: // cuerpo_cc_tipo_etiquetas_valores_extra ::= EXTRA DOSPUNTOS definir_extra PUNTOCOMA cuerpo_cc_tipo_etiquetas_valores
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_etiquetas_valores_extra",68, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 413: // cuerpo_cc_tipo_etiquetas_valores_total ::= TIPO DOSPUNTOS CANTIDAD PUNTOCOMA cuerpo_cc_etiquetas_valores_total
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_etiquetas_valores_total",69, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 414: // cuerpo_cc_tipo_etiquetas_valores_total ::= ETIQUETAS DOSPUNTOS CORCHETEA repetir_etiquetas CORCHETEC PUNTOCOMA cuerpo_cc_tipo_valores_total
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_etiquetas_valores_total",69, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 415: // cuerpo_cc_tipo_etiquetas_valores_total ::= VALORES DOSPUNTOS CORCHETEA repetir_valores CORCHETEC PUNTOCOMA cuerpo_cc_tipo_etiquetas_total
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_etiquetas_valores_total",69, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 416: // cuerpo_cc_tipo_etiquetas_valores_total ::= TOTAL DOSPUNTOS repetir_total PUNTOCOMA cuerpo_cc_tipo_etiquetas_valores
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_etiquetas_valores_total",69, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 417: // cuerpo_cc_titulo_total_extra_unir ::= TITULO DOSPUNTOS crear_tit_pie PUNTOCOMA cuerpo_cc_total_extra_unir
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_total_extra_unir",70, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 418: // cuerpo_cc_titulo_total_extra_unir ::= TOTAL DOSPUNTOS repetir_total PUNTOCOMA cuerpo_cc_titulo_extra_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_total_extra_unir",70, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 419: // cuerpo_cc_titulo_total_extra_unir ::= EXTRA DOSPUNTOS definir_extra PUNTOCOMA cuerpo_cc_titulo_total_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_total_extra_unir",70, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 420: // cuerpo_cc_titulo_total_extra_unir ::= UNIR DOSPUNTOS CORCHETEA repetir_pie CORCHETEC PUNTOCOMA cuerpo_cc_titulo_total_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_total_extra_unir",70, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 421: // cuerpo_cc_titulo_valores_extra_unir ::= TITULO DOSPUNTOS crear_tit_pie PUNTOCOMA cuerpo_cc_valores_extra_unir
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_valores_extra_unir",71, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 422: // cuerpo_cc_titulo_valores_extra_unir ::= VALORES DOSPUNTOS CORCHETEA repetir_valores CORCHETEC PUNTOCOMA cuerpo_cc_titulo_extra_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_valores_extra_unir",71, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 423: // cuerpo_cc_titulo_valores_extra_unir ::= EXTRA DOSPUNTOS definir_extra PUNTOCOMA cuerpo_cc_titulo_valores_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_valores_extra_unir",71, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 424: // cuerpo_cc_titulo_valores_extra_unir ::= UNIR DOSPUNTOS CORCHETEA repetir_pie CORCHETEC PUNTOCOMA cuerpo_cc_titulo_valores_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_valores_extra_unir",71, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 425: // cuerpo_cc_titulo_valores_total_unir ::= TITULO DOSPUNTOS crear_tit_pie PUNTOCOMA cuerpo_cc_valores_total_unir
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_valores_total_unir",72, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 426: // cuerpo_cc_titulo_valores_total_unir ::= VALORES DOSPUNTOS CORCHETEA repetir_valores CORCHETEC PUNTOCOMA cuerpo_cc_titulo_total_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_valores_total_unir",72, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 427: // cuerpo_cc_titulo_valores_total_unir ::= TOTAL DOSPUNTOS repetir_total PUNTOCOMA cuerpo_cc_titulo_valores_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_valores_total_unir",72, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 428: // cuerpo_cc_titulo_valores_total_unir ::= UNIR DOSPUNTOS CORCHETEA repetir_pie CORCHETEC PUNTOCOMA cuerpo_cc_titulo_valores_total
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_valores_total_unir",72, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 429: // cuerpo_cc_titulo_valores_total_extra ::= TITULO DOSPUNTOS crear_tit_pie PUNTOCOMA cuerpo_cc_valores_total_extra
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_valores_total_extra",73, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 430: // cuerpo_cc_titulo_valores_total_extra ::= VALORES DOSPUNTOS CORCHETEA repetir_valores CORCHETEC PUNTOCOMA cuerpo_cc_titulo_total_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_valores_total_extra",73, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 431: // cuerpo_cc_titulo_valores_total_extra ::= TOTAL DOSPUNTOS repetir_total PUNTOCOMA cuerpo_cc_titulo_valores_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_valores_total_extra",73, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 432: // cuerpo_cc_titulo_valores_total_extra ::= UNIR DOSPUNTOS CORCHETEA repetir_pie CORCHETEC PUNTOCOMA cuerpo_cc_titulo_valores_total
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_valores_total_extra",73, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 433: // cuerpo_cc_titulo_etiquetas_extra_unir ::= TITULO DOSPUNTOS crear_tit_pie PUNTOCOMA cuerpo_cc_etiquetas_extra_unir
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_etiquetas_extra_unir",74, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 434: // cuerpo_cc_titulo_etiquetas_extra_unir ::= ETIQUETAS DOSPUNTOS CORCHETEA repetir_etiquetas CORCHETEC PUNTOCOMA cuerpo_cc_titulo_extra_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_etiquetas_extra_unir",74, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 435: // cuerpo_cc_titulo_etiquetas_extra_unir ::= EXTRA DOSPUNTOS definir_extra PUNTOCOMA cuerpo_cc_titulo_etiquetas_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_etiquetas_extra_unir",74, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 436: // cuerpo_cc_titulo_etiquetas_extra_unir ::= UNIR DOSPUNTOS CORCHETEA repetir_pie CORCHETEC PUNTOCOMA cuerpo_cc_titulo_etiquetas_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_etiquetas_extra_unir",74, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 437: // cuerpo_cc_titulo_etiquetas_total_unir ::= TITULO DOSPUNTOS crear_tit_pie PUNTOCOMA cuerpo_cc_etiquetas_total_unir
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_etiquetas_total_unir",75, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 438: // cuerpo_cc_titulo_etiquetas_total_unir ::= ETIQUETAS DOSPUNTOS CORCHETEA repetir_etiquetas CORCHETEC PUNTOCOMA cuerpo_cc_titulo_total_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_etiquetas_total_unir",75, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 439: // cuerpo_cc_titulo_etiquetas_total_unir ::= TOTAL DOSPUNTOS repetir_total PUNTOCOMA cuerpo_cc_titulo_etiquetas_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_etiquetas_total_unir",75, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 440: // cuerpo_cc_titulo_etiquetas_total_unir ::= UNIR DOSPUNTOS CORCHETEA repetir_pie CORCHETEC PUNTOCOMA cuerpo_cc_titulo_etiquetas_total
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_etiquetas_total_unir",75, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 441: // cuerpo_cc_titulo_etiquetas_total_extra ::= TITULO DOSPUNTOS crear_tit_pie PUNTOCOMA cuerpo_cc_etiquetas_total_extra
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_etiquetas_total_extra",76, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 442: // cuerpo_cc_titulo_etiquetas_total_extra ::= ETIQUETAS DOSPUNTOS CORCHETEA repetir_etiquetas CORCHETEC PUNTOCOMA cuerpo_cc_titulo_total_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_etiquetas_total_extra",76, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 443: // cuerpo_cc_titulo_etiquetas_total_extra ::= TOTAL DOSPUNTOS repetir_total PUNTOCOMA cuerpo_cc_titulo_etiquetas_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_etiquetas_total_extra",76, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 444: // cuerpo_cc_titulo_etiquetas_total_extra ::= EXTRA DOSPUNTOS definir_extra PUNTOCOMA cuerpo_cc_titulo_etiquetas_total
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_etiquetas_total_extra",76, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 445: // cuerpo_cc_titulo_etiquetas_valores_unir ::= TITULO DOSPUNTOS crear_tit_pie PUNTOCOMA cuerpo_cc_etiquetas_valores_unir
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_etiquetas_valores_unir",77, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 446: // cuerpo_cc_titulo_etiquetas_valores_unir ::= ETIQUETAS DOSPUNTOS CORCHETEA repetir_etiquetas CORCHETEC PUNTOCOMA cuerpo_cc_titulo_valores_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_etiquetas_valores_unir",77, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 447: // cuerpo_cc_titulo_etiquetas_valores_unir ::= VALORES DOSPUNTOS CORCHETEA repetir_valores CORCHETEC PUNTOCOMA cuerpo_cc_titulo_etiquetas_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_etiquetas_valores_unir",77, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 448: // cuerpo_cc_titulo_etiquetas_valores_unir ::= UNIR DOSPUNTOS CORCHETEA repetir_pie CORCHETEC PUNTOCOMA cuerpo_cc_titulo_etiquetas_valores
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_etiquetas_valores_unir",77, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 449: // cuerpo_cc_titulo_etiquetas_valores_extra ::= TITULO DOSPUNTOS crear_tit_pie PUNTOCOMA cuerpo_cc_etiquetas_valores_extra
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_etiquetas_valores_extra",78, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 450: // cuerpo_cc_titulo_etiquetas_valores_extra ::= ETIQUETAS DOSPUNTOS CORCHETEA repetir_etiquetas CORCHETEC PUNTOCOMA cuerpo_cc_titulo_valores_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_etiquetas_valores_extra",78, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 451: // cuerpo_cc_titulo_etiquetas_valores_extra ::= VALORES DOSPUNTOS CORCHETEA repetir_valores CORCHETEC PUNTOCOMA cuerpo_cc_titulo_etiquetas_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_etiquetas_valores_extra",78, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 452: // cuerpo_cc_titulo_etiquetas_valores_extra ::= EXTRA DOSPUNTOS definir_extra PUNTOCOMA cuerpo_cc_titulo_etiquetas_valores
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_etiquetas_valores_extra",78, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 453: // cuerpo_cc_titulo_etiquetas_valores_total ::= TITULO DOSPUNTOS crear_tit_pie PUNTOCOMA cuerpo_cc_etiquetas_valores_total
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_etiquetas_valores_total",79, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 454: // cuerpo_cc_titulo_etiquetas_valores_total ::= ETIQUETAS DOSPUNTOS CORCHETEA repetir_etiquetas CORCHETEC PUNTOCOMA cuerpo_cc_titulo_valores_total
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_etiquetas_valores_total",79, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 455: // cuerpo_cc_titulo_etiquetas_valores_total ::= VALORES DOSPUNTOS CORCHETEA repetir_valores CORCHETEC cuerpo_cc_titulo_etiquetas_total
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_etiquetas_valores_total",79, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 456: // cuerpo_cc_titulo_etiquetas_valores_total ::= TOTAL DOSPUNTOS repetir_total PUNTOCOMA cuerpo_cc_titulo_etiquetas_valores
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_etiquetas_valores_total",79, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 457: // cuerpo_cc_titulo_tipo_extra_unir ::= TITULO DOSPUNTOS crear_tit_pie PUNTOCOMA cuerpo_cc_tipo_extra_unir
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_extra_unir",80, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 458: // cuerpo_cc_titulo_tipo_extra_unir ::= TIPO DOSPUNTOS CANTIDAD PUNTOCOMA cuerpo_cc_titulo_extra_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_extra_unir",80, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 459: // cuerpo_cc_titulo_tipo_extra_unir ::= EXTRA DOSPUNTOS definir_extra PUNTOCOMA cuerpo_cc_titulo_tipo_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_extra_unir",80, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 460: // cuerpo_cc_titulo_tipo_extra_unir ::= UNIR DOSPUNTOS CORCHETEA repetir_pie CORCHETEC PUNTOCOMA cuerpo_cc_titulo_tipo_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_extra_unir",80, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 461: // cuerpo_cc_titulo_tipo_total_unir ::= TITULO DOSPUNTOS crear_tit_pie PUNTOCOMA cuerpo_cc_tipo_total_unir
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_total_unir",81, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 462: // cuerpo_cc_titulo_tipo_total_unir ::= TIPO DOSPUNTOS CANTIDAD PUNTOCOMA cuerpo_cc_titulo_total_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_total_unir",81, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 463: // cuerpo_cc_titulo_tipo_total_unir ::= TOTAL DOSPUNTOS repetir_total PUNTOCOMA cuerpo_cc_titulo_tipo_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_total_unir",81, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 464: // cuerpo_cc_titulo_tipo_total_unir ::= UNIR DOSPUNTOS CORCHETEA repetir_pie CORCHETEC PUNTOCOMA cuerpo_cc_titulo_tipo_total
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_total_unir",81, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 465: // cuerpo_cc_titulo_tipo_total_extra ::= TITULO DOSPUNTOS crear_tit_pie PUNTOCOMA cuerpo_cc_tipo_total_extra
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_total_extra",82, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 466: // cuerpo_cc_titulo_tipo_total_extra ::= TIPO DOSPUNTOS CANTIDAD PUNTOCOMA cuerpo_cc_titulo_total_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_total_extra",82, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 467: // cuerpo_cc_titulo_tipo_total_extra ::= TOTAL DOSPUNTOS repetir_total PUNTOCOMA cuerpo_cc_titulo_tipo_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_total_extra",82, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 468: // cuerpo_cc_titulo_tipo_total_extra ::= EXTRA DOSPUNTOS definir_extra PUNTOCOMA cuerpo_cc_titulo_tipo_total
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_total_extra",82, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 469: // cuerpo_cc_titulo_tipo_valores_unir ::= TITULO DOSPUNTOS crear_tit_pie PUNTOCOMA cuerpo_cc_tipo_valores_unir
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_valores_unir",83, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 470: // cuerpo_cc_titulo_tipo_valores_unir ::= TIPO DOSPUNTOS CANTIDAD PUNTOCOMA cuerpo_cc_titulo_valores_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_valores_unir",83, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 471: // cuerpo_cc_titulo_tipo_valores_unir ::= VALORES DOSPUNTOS CORCHETEA repetir_valores CORCHETEC PUNTOCOMA cuerpo_cc_titulo_tipo_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_valores_unir",83, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 472: // cuerpo_cc_titulo_tipo_valores_unir ::= UNIR DOSPUNTOS CORCHETEA repetir_pie CORCHETEC PUNTOCOMA cuerpo_cc_titulo_tipo_valores
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_valores_unir",83, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 473: // cuerpo_cc_titulo_tipo_valores_extra ::= TITULO DOSPUNTOS crear_tit_pie PUNTOCOMA cuerpo_cc_tipo_valores_extra
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_valores_extra",84, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 474: // cuerpo_cc_titulo_tipo_valores_extra ::= TIPO DOSPUNTOS CANTIDAD PUNTOCOMA cuerpo_cc_titulo_valores_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_valores_extra",84, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 475: // cuerpo_cc_titulo_tipo_valores_extra ::= VALORES DOSPUNTOS CORCHETEA repetir_valores CORCHETEC PUNTOCOMA cuerpo_cc_titulo_tipo_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_valores_extra",84, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 476: // cuerpo_cc_titulo_tipo_valores_extra ::= EXTRA DOSPUNTOS definir_extra PUNTOCOMA cuerpo_cc_titulo_tipo_valores
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_valores_extra",84, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 477: // cuerpo_cc_titulo_tipo_valores_total ::= TITULO DOSPUNTOS crear_tit_pie PUNTOCOMA cuerpo_cc_tipo_valores_total
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_valores_total",85, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 478: // cuerpo_cc_titulo_tipo_valores_total ::= TIPO DOSPUNTOS CANTIDAD PUNTOCOMA cuerpo_cc_titulo_valores_total
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_valores_total",85, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 479: // cuerpo_cc_titulo_tipo_valores_total ::= VALORES DOSPUNTOS CORCHETEA repetir_valores CORCHETEC PUNTOCOMA cuerpo_cc_titulo_tipo_total
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_valores_total",85, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 480: // cuerpo_cc_titulo_tipo_valores_total ::= TOTAL DOSPUNTOS repetir_total PUNTOCOMA cuerpo_cc_titulo_tipo_valores
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_valores_total",85, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 481: // cuerpo_cc_titulo_tipo_etiquetas_unir ::= TITULO DOSPUNTOS crear_tit_pie PUNTOCOMA cuerpo_cc_tipo_etiquetas_unir
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_etiquetas_unir",86, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 482: // cuerpo_cc_titulo_tipo_etiquetas_unir ::= TIPO DOSPUNTOS CANTIDAD PUNTOCOMA cuerpo_cc_titulo_etiquetas_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_etiquetas_unir",86, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 483: // cuerpo_cc_titulo_tipo_etiquetas_unir ::= ETIQUETAS DOSPUNTOS CORCHETEA repetir_etiquetas CORCHETEC PUNTOCOMA cuerpo_cc_titulo_tipo_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_etiquetas_unir",86, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 484: // cuerpo_cc_titulo_tipo_etiquetas_unir ::= UNIR DOSPUNTOS CORCHETEA repetir_pie CORCHETEC PUNTOCOMA cuerpo_cc_titulo_tipo_etiquetas
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_etiquetas_unir",86, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 485: // cuerpo_cc_titulo_tipo_etiquetas_extra ::= TITULO DOSPUNTOS crear_tit_pie PUNTOCOMA cuerpo_cc_tipo_etiquetas_extra
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_etiquetas_extra",87, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 486: // cuerpo_cc_titulo_tipo_etiquetas_extra ::= TIPO DOSPUNTOS CANTIDAD PUNTOCOMA cuerpo_cc_titulo_etiquetas_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_etiquetas_extra",87, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 487: // cuerpo_cc_titulo_tipo_etiquetas_extra ::= ETIQUETAS DOSPUNTOS CORCHETEA repetir_etiquetas CORCHETEC PUNTOCOMA cuerpo_cc_titulo_tipo_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_etiquetas_extra",87, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 488: // cuerpo_cc_titulo_tipo_etiquetas_extra ::= EXTRA DOSPUNTOS definir_extra PUNTOCOMA cuerpo_cc_titulo_tipo_etiquetas
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_etiquetas_extra",87, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 489: // cuerpo_cc_titulo_tipo_etiquetas_total ::= TITULO DOSPUNTOS crear_tit_pie PUNTOCOMA cuerpo_cc_tipo_etiquetas_total
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_etiquetas_total",88, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 490: // cuerpo_cc_titulo_tipo_etiquetas_total ::= TIPO DOSPUNTOS CANTIDAD PUNTOCOMA cuerpo_cc_titulo_etiquetas_total
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_etiquetas_total",88, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 491: // cuerpo_cc_titulo_tipo_etiquetas_total ::= ETIQUETAS DOSPUNTOS CORCHETEA repetir_etiquetas CORCHETEC PUNTOCOMA cuerpo_cc_titulo_tipo_total
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_etiquetas_total",88, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 492: // cuerpo_cc_titulo_tipo_etiquetas_total ::= TOTAL DOSPUNTOS repetir_total PUNTOCOMA cuerpo_cc_titulo_tipo_etiquetas
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_etiquetas_total",88, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 493: // cuerpo_cc_titulo_tipo_etiquetas_valores ::= TITULO DOSPUNTOS crear_tit_pie PUNTOCOMA cuerpo_cc_tipo_etiquetas_valores
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_etiquetas_valores",89, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 494: // cuerpo_cc_titulo_tipo_etiquetas_valores ::= TIPO DOSPUNTOS CANTIDAD PUNTOCOMA cuerpo_cc_titulo_etiquetas_valores
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_etiquetas_valores",89, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 495: // cuerpo_cc_titulo_tipo_etiquetas_valores ::= ETIQUETAS DOSPUNTOS CORCHETEA repetir_etiquetas CORCHETEC PUNTOCOMA cuerpo_cc_titulo_tipo_valores
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_etiquetas_valores",89, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 496: // cuerpo_cc_titulo_tipo_etiquetas_valores ::= VALORES DOSPUNTOS CORCHETEA repetir_valores CORCHETEC PUNTOCOMA cuerpo_cc_titulo_tipo_etiquetas
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_etiquetas_valores",89, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 497: // cuerpo_cc_total_extra_unir ::= TOTAL DOSPUNTOS repetir_total PUNTOCOMA cuerpo_cc_extra_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_total_extra_unir",90, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 498: // cuerpo_cc_total_extra_unir ::= EXTRA DOSPUNTOS definir_extra PUNTOCOMA cuerpo_cc_total_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_total_extra_unir",90, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 499: // cuerpo_cc_total_extra_unir ::= UNIR DOSPUNTOS CORCHETEA repetir_pie CORCHETEC PUNTOCOMA cuerpo_cc_total_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_total_extra_unir",90, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 500: // cuerpo_cc_valores_extra_unir ::= VALORES DOSPUNTOS CORCHETEA repetir_valores CORCHETEC PUNTOCOMA cuerpo_cc_extra_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_valores_extra_unir",91, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 501: // cuerpo_cc_valores_extra_unir ::= EXTRA DOSPUNTOS definir_extra PUNTOCOMA cuerpo_cc_valores_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_valores_extra_unir",91, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 502: // cuerpo_cc_valores_extra_unir ::= UNIR DOSPUNTOS CORCHETEA repetir_pie CORCHETEC PUNTOCOMA cuerpo_cc_valores_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_valores_extra_unir",91, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 503: // cuerpo_cc_valores_total_unir ::= VALORES DOSPUNTOS CORCHETEA repetir_valores CORCHETEC PUNTOCOMA cuerpo_cc_total_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_valores_total_unir",92, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 504: // cuerpo_cc_valores_total_unir ::= TOTAL DOSPUNTOS repetir_total PUNTOCOMA cuerpo_cc_valores_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_valores_total_unir",92, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 505: // cuerpo_cc_valores_total_unir ::= UNIR DOSPUNTOS CORCHETEA repetir_pie CORCHETEC PUNTOCOMA cuerpo_cc_valores_total
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_valores_total_unir",92, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 506: // cuerpo_cc_valores_total_extra ::= VALORES DOSPUNTOS CORCHETEA repetir_valores CORCHETEC PUNTOCOMA cuerpo_cc_total_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_valores_total_extra",93, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 507: // cuerpo_cc_valores_total_extra ::= TOTAL DOSPUNTOS repetir_total PUNTOCOMA cuerpo_cc_valores_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_valores_total_extra",93, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 508: // cuerpo_cc_valores_total_extra ::= EXTRA DOSPUNTOS definir_extra PUNTOCOMA cuerpo_cc_valores_total
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_valores_total_extra",93, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 509: // cuerpo_cc_etiquetas_extra_unir ::= ETIQUETAS DOSPUNTOS CORCHETEA repetir_etiquetas CORCHETEC PUNTOCOMA cuerpo_cc_extra_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_etiquetas_extra_unir",94, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 510: // cuerpo_cc_etiquetas_extra_unir ::= EXTRA DOSPUNTOS definir_extra PUNTOCOMA cuerpo_cc_etiquetas_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_etiquetas_extra_unir",94, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 511: // cuerpo_cc_etiquetas_extra_unir ::= UNIR DOSPUNTOS CORCHETEA repetir_pie CORCHETEC PUNTOCOMA cuerpo_cc_etiquetas_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_etiquetas_extra_unir",94, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 512: // cuerpo_cc_etiquetas_total_unir ::= ETIQUETAS DOSPUNTOS CORCHETEA repetir_etiquetas CORCHETEC PUNTOCOMA cuerpo_cc_total_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_etiquetas_total_unir",95, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 513: // cuerpo_cc_etiquetas_total_unir ::= TOTAL DOSPUNTOS repetir_total PUNTOCOMA cuerpo_cc_etiquetas_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_etiquetas_total_unir",95, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 514: // cuerpo_cc_etiquetas_total_unir ::= UNIR DOSPUNTOS CORCHETEA repetir_pie CORCHETEC PUNTOCOMA cuerpo_cc_etiquetas_total
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_etiquetas_total_unir",95, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 515: // cuerpo_cc_etiquetas_total_extra ::= ETIQUETAS DOSPUNTOS CORCHETEA repetir_etiquetas CORCHETEC PUNTOCOMA cuerpo_cc_total_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_etiquetas_total_extra",96, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 516: // cuerpo_cc_etiquetas_total_extra ::= TOTAL DOSPUNTOS repetir_total PUNTOCOMA cuerpo_cc_etiquetas_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_etiquetas_total_extra",96, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 517: // cuerpo_cc_etiquetas_total_extra ::= EXTRA DOSPUNTOS definir_extra PUNTOCOMA cuerpo_cc_etiquetas_total
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_etiquetas_total_extra",96, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 518: // cuerpo_cc_etiquetas_valores_unir ::= ETIQUETAS DOSPUNTOS CORCHETEA repetir_etiquetas CORCHETEC PUNTOCOMA cuerpo_cc_valores_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_etiquetas_valores_unir",97, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 519: // cuerpo_cc_etiquetas_valores_unir ::= VALORES DOSPUNTOS CORCHETEA repetir_valores CORCHETEC PUNTOCOMA cuerpo_cc_etiquetas_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_etiquetas_valores_unir",97, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 520: // cuerpo_cc_etiquetas_valores_unir ::= UNIR DOSPUNTOS CORCHETEA repetir_pie CORCHETEC PUNTOCOMA cuerpo_cc_etiquetas_valores
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_etiquetas_valores_unir",97, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 521: // cuerpo_cc_etiquetas_valores_extra ::= ETIQUETAS DOSPUNTOS CORCHETEA repetir_etiquetas CORCHETEC PUNTOCOMA cuerpo_cc_valores_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_etiquetas_valores_extra",98, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 522: // cuerpo_cc_etiquetas_valores_extra ::= VALORES DOSPUNTOS CORCHETEA repetir_valores CORCHETEC PUNTOCOMA cuerpo_cc_etiquetas_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_etiquetas_valores_extra",98, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 523: // cuerpo_cc_etiquetas_valores_extra ::= EXTRA DOSPUNTOS definir_extra PUNTOCOMA cuerpo_cc_etiquetas_valores
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_etiquetas_valores_extra",98, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 524: // cuerpo_cc_etiquetas_valores_total ::= ETIQUETAS DOSPUNTOS CORCHETEA repetir_etiquetas CORCHETEC PUNTOCOMA cuerpo_cc_valores_total
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_etiquetas_valores_total",99, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 525: // cuerpo_cc_etiquetas_valores_total ::= VALORES DOSPUNTOS CORCHETEA repetir_valores CORCHETEC PUNTOCOMA cuerpo_cc_etiquetas_total
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_etiquetas_valores_total",99, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 526: // cuerpo_cc_etiquetas_valores_total ::= TOTAL DOSPUNTOS repetir_total PUNTOCOMA cuerpo_cc_etiquetas_valores
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_etiquetas_valores_total",99, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 527: // cuerpo_cc_tipo_extra_unir ::= TIPO DOSPUNTOS CANTIDAD PUNTOCOMA cuerpo_cc_extra_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_extra_unir",100, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 528: // cuerpo_cc_tipo_extra_unir ::= EXTRA DOSPUNTOS definir_extra PUNTOCOMA cuerpo_cc_tipo_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_extra_unir",100, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 529: // cuerpo_cc_tipo_extra_unir ::= UNIR DOSPUNTOS CORCHETEA repetir_pie CORCHETEC PUNTOCOMA cuerpo_cc_tipo_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_extra_unir",100, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 530: // cuerpo_cc_tipo_total_unir ::= TIPO DOSPUNTOS CANTIDAD PUNTOCOMA cuerpo_cc_total_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_total_unir",101, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 531: // cuerpo_cc_tipo_total_unir ::= TOTAL DOSPUNTOS repetir_total PUNTOCOMA cuerpo_cc_tipo_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_total_unir",101, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 532: // cuerpo_cc_tipo_total_unir ::= UNIR DOSPUNTOS CORCHETEA repetir_pie CORCHETEC PUNTOCOMA cuerpo_cc_tipo_total
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_total_unir",101, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 533: // cuerpo_cc_tipo_total_extra ::= TIPO DOSPUNTOS CANTIDAD PUNTOCOMA cuerpo_cc_total_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_total_extra",102, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 534: // cuerpo_cc_tipo_total_extra ::= TOTAL DOSPUNTOS repetir_total PUNTOCOMA cuerpo_cc_tipo_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_total_extra",102, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 535: // cuerpo_cc_tipo_total_extra ::= EXTRA DOSPUNTOS definir_extra PUNTOCOMA cuerpo_cc_tipo_total
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_total_extra",102, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 536: // cuerpo_cc_tipo_valores_unir ::= TIPO DOSPUNTOS CANTIDAD PUNTOCOMA cuerpo_cc_valores_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_valores_unir",103, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 537: // cuerpo_cc_tipo_valores_unir ::= VALORES DOSPUNTOS CORCHETEA repetir_valores CORCHETEC PUNTOCOMA cuerpo_cc_tipo_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_valores_unir",103, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 538: // cuerpo_cc_tipo_valores_unir ::= UNIR DOSPUNTOS CORCHETEA repetir_pie CORCHETEC PUNTOCOMA cuerpo_cc_tipo_valores
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_valores_unir",103, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 539: // cuerpo_cc_tipo_valores_extra ::= TIPO DOSPUNTOS CANTIDAD PUNTOCOMA cuerpo_cc_valores_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_valores_extra",104, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 540: // cuerpo_cc_tipo_valores_extra ::= VALORES DOSPUNTOS CORCHETEA repetir_valores CORCHETEC PUNTOCOMA cuerpo_cc_tipo_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_valores_extra",104, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 541: // cuerpo_cc_tipo_valores_extra ::= EXTRA DOSPUNTOS definir_extra PUNTOCOMA cuerpo_cc_tipo_valores
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_valores_extra",104, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 542: // cuerpo_cc_tipo_valores_total ::= TIPO DOSPUNTOS CANTIDAD PUNTOCOMA cuerpo_cc_valores_total
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_valores_total",105, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 543: // cuerpo_cc_tipo_valores_total ::= VALORES DOSPUNTOS CORCHETEA repetir_valores CORCHETEC PUNTOCOMA cuerpo_cc_tipo_total
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_valores_total",105, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 544: // cuerpo_cc_tipo_valores_total ::= TOTAL DOSPUNTOS repetir_total PUNTOCOMA cuerpo_cc_tipo_valores
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_valores_total",105, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 545: // cuerpo_cc_tipo_etiquetas_unir ::= TIPO DOSPUNTOS CANTIDAD PUNTOCOMA cuerpo_cc_etiquetas_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_etiquetas_unir",106, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 546: // cuerpo_cc_tipo_etiquetas_unir ::= ETIQUETAS DOSPUNTOS CORCHETEA repetir_etiquetas CORCHETEC PUNTOCOMA cuerpo_cc_tipo_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_etiquetas_unir",106, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 547: // cuerpo_cc_tipo_etiquetas_unir ::= UNIR DOSPUNTOS CORCHETEA repetir_pie CORCHETEC PUNTOCOMA cuerpo_cc_tipo_etiquetas
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_etiquetas_unir",106, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 548: // cuerpo_cc_tipo_etiquetas_extra ::= TIPO DOSPUNTOS CANTIDAD PUNTOCOMA cuerpo_cc_etiquetas_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_etiquetas_extra",107, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 549: // cuerpo_cc_tipo_etiquetas_extra ::= ETIQUETAS DOSPUNTOS CORCHETEA repetir_etiquetas CORCHETEC PUNTOCOMA cuerpo_cc_tipo_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_etiquetas_extra",107, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 550: // cuerpo_cc_tipo_etiquetas_extra ::= EXTRA DOSPUNTOS definir_extra PUNTOCOMA cuerpo_cc_tipo_etiquetas
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_etiquetas_extra",107, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 551: // cuerpo_cc_tipo_etiquetas_total ::= TIPO DOSPUNTOS CANTIDAD PUNTOCOMA cuerpo_cc_etiquetas_total
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_etiquetas_total",108, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 552: // cuerpo_cc_tipo_etiquetas_total ::= ETIQUETAS DOSPUNTOS CORCHETEA repetir_etiquetas CORCHETEC PUNTOCOMA cuerpo_cc_tipo_total
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_etiquetas_total",108, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 553: // cuerpo_cc_tipo_etiquetas_total ::= TOTAL DOSPUNTOS repetir_total PUNTOCOMA cuerpo_cc_tipo_etiquetas
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_etiquetas_total",108, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 554: // cuerpo_cc_tipo_etiquetas_valores ::= TIPO DOSPUNTOS CANTIDAD PUNTOCOMA cuerpo_cc_etiquetas_valores
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_etiquetas_valores",109, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 555: // cuerpo_cc_tipo_etiquetas_valores ::= ETIQUETAS DOSPUNTOS CORCHETEA repetir_etiquetas CORCHETEC PUNTOCOMA cuerpo_cc_tipo_valores
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_etiquetas_valores",109, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 556: // cuerpo_cc_tipo_etiquetas_valores ::= VALORES DOSPUNTOS CORCHETEA repetir_valores CORCHETEC PUNTOCOMA cuerpo_cc_tipo_etiquetas
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_etiquetas_valores",109, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 557: // cuerpo_cc_titulo_extra_unir ::= TITULO DOSPUNTOS crear_tit_pie PUNTOCOMA cuerpo_cc_extra_unir
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_extra_unir",110, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 558: // cuerpo_cc_titulo_extra_unir ::= EXTRA DOSPUNTOS definir_extra PUNTOCOMA cuerpo_cc_titulo_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_extra_unir",110, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 559: // cuerpo_cc_titulo_extra_unir ::= UNIR DOSPUNTOS CORCHETEA repetir_pie CORCHETEC PUNTOCOMA cuerpo_cc_titulo_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_extra_unir",110, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 560: // cuerpo_cc_titulo_total_unir ::= TITULO DOSPUNTOS crear_tit_pie PUNTOCOMA cuerpo_cc_total_unir
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_total_unir",111, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 561: // cuerpo_cc_titulo_total_unir ::= TOTAL DOSPUNTOS repetir_total PUNTOCOMA cuerpo_cc_titulo_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_total_unir",111, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 562: // cuerpo_cc_titulo_total_unir ::= UNIR DOSPUNTOS CORCHETEA repetir_pie CORCHETEC PUNTOCOMA cuerpo_cc_titulo_total
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_total_unir",111, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 563: // cuerpo_cc_titulo_total_extra ::= TITULO DOSPUNTOS crear_tit_pie PUNTOCOMA cuerpo_cc_total_extra
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_total_extra",112, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 564: // cuerpo_cc_titulo_total_extra ::= TOTAL DOSPUNTOS repetir_total PUNTOCOMA cuerpo_cc_titulo_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_total_extra",112, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 565: // cuerpo_cc_titulo_total_extra ::= EXTRA DOSPUNTOS definir_extra PUNTOCOMA cuerpo_cc_titulo_total
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_total_extra",112, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 566: // cuerpo_cc_titulo_valores_unir ::= TITULO DOSPUNTOS crear_tit_pie PUNTOCOMA cuerpo_cc_valores_unir
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_valores_unir",113, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 567: // cuerpo_cc_titulo_valores_unir ::= VALORES DOSPUNTOS CORCHETEA repetir_valores CORCHETEC PUNTOCOMA cuerpo_cc_titulo_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_valores_unir",113, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 568: // cuerpo_cc_titulo_valores_unir ::= UNIR DOSPUNTOS CORCHETEA repetir_pie CORCHETEC PUNTOCOMA cuerpo_cc_titulo_valores
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_valores_unir",113, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 569: // cuerpo_cc_titulo_valores_extra ::= TITULO DOSPUNTOS crear_tit_pie PUNTOCOMA cuerpo_cc_valores_extra
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_valores_extra",114, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 570: // cuerpo_cc_titulo_valores_extra ::= VALORES DOSPUNTOS CORCHETEA repetir_valores CORCHETEC PUNTOCOMA cuerpo_cc_titulo_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_valores_extra",114, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 571: // cuerpo_cc_titulo_valores_extra ::= EXTRA DOSPUNTOS definir_extra PUNTOCOMA cuerpo_cc_titulo_valores
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_valores_extra",114, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 572: // cuerpo_cc_titulo_valores_total ::= TITULO DOSPUNTOS crear_tit_pie PUNTOCOMA cuerpo_cc_valores_total
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_valores_total",115, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 573: // cuerpo_cc_titulo_valores_total ::= VALORES DOSPUNTOS CORCHETEA repetir_valores CORCHETEC PUNTOCOMA cuerpo_cc_titulo_total
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_valores_total",115, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 574: // cuerpo_cc_titulo_valores_total ::= TOTAL DOSPUNTOS repetir_total PUNTOCOMA cuerpo_cc_titulo_valores
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_valores_total",115, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 575: // cuerpo_cc_titulo_etiquetas_unir ::= TITULO DOSPUNTOS crear_tit_pie PUNTOCOMA cuerpo_cc_etiquetas_unir
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_etiquetas_unir",116, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 576: // cuerpo_cc_titulo_etiquetas_unir ::= ETIQUETAS DOSPUNTOS CORCHETEA repetir_etiquetas CORCHETEC PUNTOCOMA cuerpo_cc_titulo_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_etiquetas_unir",116, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 577: // cuerpo_cc_titulo_etiquetas_unir ::= UNIR DOSPUNTOS CORCHETEA repetir_pie CORCHETEC PUNTOCOMA cuerpo_cc_titulo_etiquetas
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_etiquetas_unir",116, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 578: // cuerpo_cc_titulo_etiquetas_extra ::= TITULO DOSPUNTOS crear_tit_pie PUNTOCOMA cuerpo_cc_etiquetas_extra
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_etiquetas_extra",117, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 579: // cuerpo_cc_titulo_etiquetas_extra ::= ETIQUETAS DOSPUNTOS CORCHETEA repetir_etiquetas CORCHETEC PUNTOCOMA cuerpo_cc_titulo_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_etiquetas_extra",117, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 580: // cuerpo_cc_titulo_etiquetas_extra ::= EXTRA DOSPUNTOS definir_extra PUNTOCOMA cuerpo_cc_titulo_etiquetas
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_etiquetas_extra",117, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 581: // cuerpo_cc_titulo_etiquetas_total ::= TITULO DOSPUNTOS crear_tit_pie PUNTOCOMA cuerpo_cc_etiquetas_total
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_etiquetas_total",118, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 582: // cuerpo_cc_titulo_etiquetas_total ::= ETIQUETAS DOSPUNTOS CORCHETEA repetir_etiquetas CORCHETEC PUNTOCOMA cuerpo_cc_titulo_total
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_etiquetas_total",118, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 583: // cuerpo_cc_titulo_etiquetas_total ::= TOTAL DOSPUNTOS repetir_total PUNTOCOMA cuerpo_cc_titulo_etiquetas
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_etiquetas_total",118, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 584: // cuerpo_cc_titulo_etiquetas_valores ::= TITULO DOSPUNTOS crear_tit_pie PUNTOCOMA cuerpo_cc_etiquetas_valores
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_etiquetas_valores",119, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 585: // cuerpo_cc_titulo_etiquetas_valores ::= ETIQUETAS DOSPUNTOS CORCHETEA repetir_etiquetas CORCHETEC PUNTOCOMA cuerpo_cc_titulo_valores
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_etiquetas_valores",119, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 586: // cuerpo_cc_titulo_etiquetas_valores ::= VALORES DOSPUNTOS CORCHETEA repetir_valores CORCHETEC PUNTOCOMA cuerpo_cc_titulo_etiquetas
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_etiquetas_valores",119, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 587: // cuerpo_cc_titulo_tipo_unir ::= TITULO DOSPUNTOS crear_tit_pie PUNTOCOMA cuerpo_cc_tipo_unir
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_unir",120, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 588: // cuerpo_cc_titulo_tipo_unir ::= TIPO DOSPUNTOS CANTIDAD PUNTOCOMA cuerpo_cc_titulo_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_unir",120, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 589: // cuerpo_cc_titulo_tipo_unir ::= UNIR DOSPUNTOS CORCHETEA repetir_pie CORCHETEC PUNTOCOMA cuerpo_cc_titulo_tipo
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_unir",120, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 590: // cuerpo_cc_titulo_tipo_extra ::= TITULO DOSPUNTOS crear_tit_pie PUNTOCOMA cuerpo_cc_tipo_extra
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_extra",121, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 591: // cuerpo_cc_titulo_tipo_extra ::= TIPO DOSPUNTOS CANTIDAD PUNTOCOMA cuerpo_cc_titulo_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_extra",121, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 592: // cuerpo_cc_titulo_tipo_extra ::= EXTRA DOSPUNTOS definir_extra PUNTOCOMA cuerpo_cc_titulo_tipo
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_extra",121, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 593: // cuerpo_cc_titulo_tipo_total ::= TITULO DOSPUNTOS crear_tit_pie PUNTOCOMA cuerpo_cc_tipo_total
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_total",122, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 594: // cuerpo_cc_titulo_tipo_total ::= TIPO DOSPUNTOS CANTIDAD PUNTOCOMA cuerpo_cc_titulo_total
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_total",122, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 595: // cuerpo_cc_titulo_tipo_total ::= TOTAL DOSPUNTOS repetir_total PUNTOCOMA cuerpo_cc_titulo_tipo
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_total",122, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 596: // cuerpo_cc_titulo_tipo_valores ::= TITULO DOSPUNTOS crear_tit_pie PUNTOCOMA cuerpo_cc_tipo_valores
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_valores",123, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 597: // cuerpo_cc_titulo_tipo_valores ::= TIPO DOSPUNTOS CANTIDAD PUNTOCOMA cuerpo_cc_titulo_valores
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_valores",123, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 598: // cuerpo_cc_titulo_tipo_valores ::= VALORES DOSPUNTOS CORCHETEA repetir_valores CORCHETEC PUNTOCOMA cuerpo_cc_titulo_tipo
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_valores",123, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 599: // cuerpo_cc_titulo_tipo_etiquetas ::= TITULO DOSPUNTOS crear_tit_pie PUNTOCOMA cuerpo_cc_tipo_etiquetas
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_etiquetas",124, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /* . . . . . .*/
        default:
          throw new Exception(
                  "Invalid action number "+CUP$SintacticoParser$act_num+"found in internal parse table");

      }
    } /* end of method */
    /** Method 2 with the actual generated action code for actions 600 to 900. */
    public final java_cup.runtime.Symbol CUP$SintacticoParser$do_action_part00000002(
            int                        CUP$SintacticoParser$act_num,
            java_cup.runtime.lr_parser CUP$SintacticoParser$parser,
            java.util.Stack            CUP$SintacticoParser$stack,
            int                        CUP$SintacticoParser$top)
            throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoParser$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoParser$act_num)
      {
        /*. . . . . . . . . . . . . . . . . . . .*/
        case 600: // cuerpo_cc_titulo_tipo_etiquetas ::= TIPO DOSPUNTOS CANTIDAD PUNTOCOMA cuerpo_cc_titulo_etiquetas
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_etiquetas",124, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 601: // cuerpo_cc_titulo_tipo_etiquetas ::= ETIQUETAS DOSPUNTOS CORCHETEA repetir_etiquetas CORCHETEC PUNTOCOMA cuerpo_cc_titulo_tipo
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo_etiquetas",124, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 602: // cuerpo_cc_extra_unir ::= EXTRA DOSPUNTOS definir_extra PUNTOCOMA cuerpo_cc_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_extra_unir",125, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 603: // cuerpo_cc_extra_unir ::= UNIR DOSPUNTOS CORCHETEA repetir_pie CORCHETEC PUNTOCOMA cuerpo_cc_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_extra_unir",125, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 604: // cuerpo_cc_total_unir ::= TOTAL DOSPUNTOS repetir_total PUNTOCOMA cuerpo_cc_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_total_unir",126, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 605: // cuerpo_cc_total_unir ::= UNIR DOSPUNTOS CORCHETEA repetir_pie CORCHETEC PUNTOCOMA cuerpo_cc_total
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_total_unir",126, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 606: // cuerpo_cc_total_extra ::= TOTAL DOSPUNTOS repetir_total PUNTOCOMA cuerpo_cc_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_total_extra",127, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 607: // cuerpo_cc_total_extra ::= EXTRA DOSPUNTOS definir_extra PUNTOCOMA cuerpo_cc_total
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_total_extra",127, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 608: // cuerpo_cc_valores_unir ::= VALORES DOSPUNTOS CORCHETEA repetir_valores CORCHETEC PUNTOCOMA cuerpo_cc_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_valores_unir",128, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 609: // cuerpo_cc_valores_unir ::= UNIR DOSPUNTOS CORCHETEA repetir_pie CORCHETEC PUNTOCOMA cuerpo_cc_valores
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_valores_unir",128, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 610: // cuerpo_cc_valores_extra ::= VALORES DOSPUNTOS CORCHETEA repetir_valores CORCHETEC PUNTOCOMA cuerpo_cc_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_valores_extra",129, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 611: // cuerpo_cc_valores_extra ::= EXTRA DOSPUNTOS definir_extra PUNTOCOMA cuerpo_cc_valores
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_valores_extra",129, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 612: // cuerpo_cc_valores_total ::= VALORES DOSPUNTOS CORCHETEA repetir_valores CORCHETEC PUNTOCOMA cuerpo_cc_total
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_valores_total",130, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 613: // cuerpo_cc_valores_total ::= TOTAL DOSPUNTOS repetir_total PUNTOCOMA cuerpo_cc_valores
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_valores_total",130, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 614: // cuerpo_cc_etiquetas_unir ::= ETIQUETAS DOSPUNTOS CORCHETEA repetir_etiquetas CORCHETEC PUNTOCOMA cuerpo_cc_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_etiquetas_unir",131, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 615: // cuerpo_cc_etiquetas_unir ::= UNIR DOSPUNTOS CORCHETEA repetir_pie CORCHETEC PUNTOCOMA cuerpo_cc_etiquetas
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_etiquetas_unir",131, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 616: // cuerpo_cc_etiquetas_extra ::= ETIQUETAS DOSPUNTOS CORCHETEA repetir_etiquetas CORCHETEC PUNTOCOMA cuerpo_cc_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_etiquetas_extra",132, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 617: // cuerpo_cc_etiquetas_extra ::= EXTRA DOSPUNTOS definir_extra PUNTOCOMA cuerpo_cc_etiquetas
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_etiquetas_extra",132, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 618: // cuerpo_cc_etiquetas_total ::= ETIQUETAS DOSPUNTOS CORCHETEA repetir_etiquetas CORCHETEC PUNTOCOMA cuerpo_cc_total
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_etiquetas_total",133, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 619: // cuerpo_cc_etiquetas_total ::= TOTAL DOSPUNTOS repetir_total PUNTOCOMA cuerpo_cc_etiquetas
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_etiquetas_total",133, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 620: // cuerpo_cc_etiquetas_valores ::= ETIQUETAS DOSPUNTOS CORCHETEA repetir_etiquetas CORCHETEC PUNTOCOMA cuerpo_cc_valores
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_etiquetas_valores",134, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 621: // cuerpo_cc_etiquetas_valores ::= VALORES DOSPUNTOS CORCHETEA repetir_valores CORCHETEC PUNTOCOMA cuerpo_cc_etiquetas
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_etiquetas_valores",134, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 622: // cuerpo_cc_tipo_unir ::= TIPO DOSPUNTOS CANTIDAD PUNTOCOMA cuerpo_cc_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_unir",135, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 623: // cuerpo_cc_tipo_unir ::= UNIR DOSPUNTOS CORCHETEA repetir_pie CORCHETEC PUNTOCOMA cuerpo_cc_tipo
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_unir",135, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 624: // cuerpo_cc_tipo_extra ::= TIPO DOSPUNTOS CANTIDAD PUNTOCOMA cuerpo_cc_extra
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_extra",136, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 625: // cuerpo_cc_tipo_extra ::= EXTRA DOSPUNTOS definir_extra PUNTOCOMA cuerpo_cc_tipo
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_extra",136, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 626: // cuerpo_cc_tipo_total ::= TIPO DOSPUNTOS CANTIDAD PUNTOCOMA cuerpo_cc_total
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_total",137, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 627: // cuerpo_cc_tipo_total ::= TOTAL DOSPUNTOS repetir_total PUNTOCOMA cuerpo_cc_tipo
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_total",137, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 628: // cuerpo_cc_tipo_valores ::= TIPO DOSPUNTOS CANTIDAD PUNTOCOMA cuerpo_cc_valores
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_valores",138, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 629: // cuerpo_cc_tipo_valores ::= VALORES DOSPUNTOS CORCHETEA repetir_valores CORCHETEC PUNTOCOMA cuerpo_cc_tipo
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_valores",138, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 630: // cuerpo_cc_tipo_etiquetas ::= TIPO DOSPUNTOS CANTIDAD PUNTOCOMA cuerpo_cc_etiquetas
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_etiquetas",139, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 631: // cuerpo_cc_tipo_etiquetas ::= ETIQUETAS DOSPUNTOS CORCHETEA repetir_etiquetas CORCHETEC PUNTOCOMA cuerpo_cc_tipo
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo_etiquetas",139, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 632: // cuerpo_cc_titulo_unir ::= TITULO DOSPUNTOS crear_tit_pie PUNTOCOMA cuerpo_cc_unir
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_unir",140, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 633: // cuerpo_cc_titulo_unir ::= UNIR DOSPUNTOS CORCHETEA repetir_pie CORCHETEC PUNTOCOMA cuerpo_cc_titulo
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_unir",140, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 634: // cuerpo_cc_titulo_extra ::= TITULO DOSPUNTOS crear_tit_pie PUNTOCOMA cuerpo_cc_extra
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_extra",141, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 635: // cuerpo_cc_titulo_extra ::= EXTRA DOSPUNTOS definir_extra PUNTOCOMA cuerpo_cc_titulo
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_extra",141, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 636: // cuerpo_cc_titulo_total ::= TITULO DOSPUNTOS crear_tit_pie PUNTOCOMA cuerpo_cc_total
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_total",142, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 637: // cuerpo_cc_titulo_total ::= TOTAL DOSPUNTOS repetir_total PUNTOCOMA cuerpo_cc_titulo
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_total",142, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 638: // cuerpo_cc_titulo_valores ::= TITULO DOSPUNTOS crear_tit_pie PUNTOCOMA cuerpo_cc_valores
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_valores",143, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 639: // cuerpo_cc_titulo_valores ::= VALORES DOSPUNTOS CORCHETEA repetir_valores CORCHETEC PUNTOCOMA cuerpo_cc_titulo
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_valores",143, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 640: // cuerpo_cc_titulo_etiquetas ::= TITULO DOSPUNTOS crear_tit_pie PUNTOCOMA cuerpo_cc_etiquetas
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_etiquetas",144, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 641: // cuerpo_cc_titulo_etiquetas ::= ETIQUETAS DOSPUNTOS CORCHETEA repetir_etiquetas CORCHETEC PUNTOCOMA cuerpo_cc_titulo
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_etiquetas",144, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 642: // cuerpo_cc_titulo_tipo ::= TITULO DOSPUNTOS crear_tit_pie PUNTOCOMA cuerpo_cc_tipo
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo",145, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 643: // cuerpo_cc_titulo_tipo ::= TIPO DOSPUNTOS CANTIDAD PUNTOCOMA cuerpo_cc_titulo
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo_tipo",145, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 644: // cuerpo_cc_tipo ::= TIPO DOSPUNTOS CANTIDAD PUNTOCOMA
        {
          String RESULT =null;
          System.out.println("tipo al final");
          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_tipo",146, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 645: // cuerpo_cc_titulo ::= TITULO DOSPUNTOS crear_tit_pie PUNTOCOMA
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-3)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-3)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-3)).value;
          System.out.println("titulo al final");
          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_titulo",147, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 646: // cuerpo_cc_valores ::= VALORES DOSPUNTOS CORCHETEA repetir_valores CORCHETEC PUNTOCOMA
        {
          String RESULT =null;
          System.out.println("valores al final");
          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_valores",148, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 647: // cuerpo_cc_total ::= TOTAL DOSPUNTOS repetir_total PUNTOCOMA
        {
          String RESULT =null;
          System.out.println("total al final");
          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_total",149, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 648: // cuerpo_cc_unir ::= UNIR DOSPUNTOS CORCHETEA repetir_pie CORCHETEC PUNTOCOMA
        {
          String RESULT =null;
          System.out.println("unir al final");
          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_unir",150, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 649: // cuerpo_cc_extra ::= EXTRA DOSPUNTOS definir_extra PUNTOCOMA
        {
          String RESULT =null;
          System.out.println("extra al final");
          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_extra",151, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 650: // cuerpo_cc_etiquetas ::= ETIQUETAS DOSPUNTOS CORCHETEA repetir_etiquetas CORCHETEC PUNTOCOMA
        {
          String RESULT =null;
          System.out.println("etiquetas al final");
          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cc_etiquetas",152, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 651: // repetir_etiquetas ::= TEXTO COMA repetir_etiquetas
        {
          String RESULT =null;
          int textoleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-2)).left;
          int textoright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-2)).right;
          String texto = (String)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-2)).value;
          ejeXArray.add(new String[]{getTituloObtener(),texto});
          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("repetir_etiquetas",153, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 652: // repetir_etiquetas ::= TEXTO
        {
          String RESULT =null;
          int textoleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()).left;
          int textoright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()).right;
          String texto = (String)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.peek()).value;
          ejeXArray.add(new String[]{getTituloObtener(),texto});
          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("repetir_etiquetas",153, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 653: // repetir_valores ::= seleccionar_dato_int_double COMA repetir_valores
        {
          String RESULT =null;
          int decimalleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-2)).left;
          int decimalright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-2)).right;
          String decimal = (String)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-2)).value;
          if(decimal.contains(".")){
            double valorDecimal= Double.parseDouble(decimal);
          }else{
            int valorEntero= Integer.parseInt(decimal);
          }ejeYArray.add(new String[]{getTituloObtener(),decimal});

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("repetir_valores",154, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 654: // repetir_valores ::= seleccionar_dato_int_double
        {
          String RESULT =null;
          int decimalleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()).left;
          int decimalright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()).right;
          String decimal = (String)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.peek()).value;
          if(decimal.contains(".")){
            double valorDecimal= Double.parseDouble(decimal);
          }else{
            int valorEntero= Integer.parseInt(decimal);
          }ejeYArray.add(new String[]{getTituloObtener(),decimal});

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("repetir_valores",154, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 655: // repetir_valores ::= seleccionar_dato_int_double MAS seleccionar_dato_int_double COMA repetir_valores
        {
          String RESULT =null;
          int decimalleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int decimalright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          String decimal = (String)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;
          int decimal2left = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-2)).left;
          int decimal2right = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-2)).right;
          String decimal2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-2)).value;
          double tempDouble;
          String cambioEnteroDecimal;
          int tempInt;
          if(decimal.contains(".")){
            double valorDecimal= Double.parseDouble(decimal);
            if(decimal2.contains(".")){
              double valorDecimal2= Double.parseDouble(decimal2);
              tempDouble=valorDecimal+valorDecimal2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempDouble)});
              //RESULT=tempDouble;
            }else{
              cambioEnteroDecimal=decimal2+".0";
              double valorDecimal2= Double.parseDouble(cambioEnteroDecimal);
              tempDouble=valorDecimal+valorDecimal2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempDouble)});
              //RESULT=tempDouble;
            }
          }else{
            if(decimal2.contains(".")){
              cambioEnteroDecimal=decimal+".0";
              double valorEntero= Double.parseDouble(cambioEnteroDecimal);
              double valorDecimal2= Double.parseDouble(decimal2);
              tempDouble=valorEntero+valorDecimal2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempDouble)});
              //RESULT=tempDouble;
            }else{int valorEntero=Integer.parseInt(decimal);
              int valorEntero2= Integer.parseInt(decimal2);
              tempInt=valorEntero+valorEntero2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempInt)});
              //RESULT=tempInt;
            }}
          String juntarValores= decimal+" + "+decimal2;
          ocurrenciaOperadores.add(new String[]{"Suma",String.valueOf((decimalleft)),String.valueOf((decimalright)),juntarValores});

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("repetir_valores",154, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 656: // repetir_valores ::= seleccionar_dato_int_double MAS seleccionar_dato_int_double
        {
          String RESULT =null;
          int decimalleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-2)).left;
          int decimalright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-2)).right;
          String decimal = (String)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-2)).value;
          int decimal2left = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()).left;
          int decimal2right = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()).right;
          String decimal2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.peek()).value;
          double tempDouble;
          String cambioEnteroDecimal;
          int tempInt;
          if(decimal.contains(".")){
            double valorDecimal= Double.parseDouble(decimal);
            if(decimal2.contains(".")){
              double valorDecimal2= Double.parseDouble(decimal2);
              tempDouble=valorDecimal+valorDecimal2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempDouble)});
              //RESULT=tempDouble;
            }else{
              cambioEnteroDecimal=decimal2+".0";
              double valorDecimal2= Double.parseDouble(cambioEnteroDecimal);
              tempDouble=valorDecimal+valorDecimal2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempDouble)});
              //RESULT=tempDouble;
            }
          }else{
            if(decimal2.contains(".")){
              cambioEnteroDecimal=decimal+".0";
              double valorEntero= Double.parseDouble(cambioEnteroDecimal);
              double valorDecimal2= Double.parseDouble(decimal2);
              tempDouble=valorEntero+valorDecimal2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempDouble)});
              //RESULT=tempDouble;
            }else{int valorEntero=Integer.parseInt(decimal);
              int valorEntero2= Integer.parseInt(decimal2);
              tempInt=valorEntero+valorEntero2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempInt)});
              //RESULT=tempInt;
            }}
          String juntarValores= decimal+" + "+decimal2;
          ocurrenciaOperadores.add(new String[]{"Suma",String.valueOf((decimalleft)),String.valueOf((decimalright)),juntarValores});

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("repetir_valores",154, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 657: // repetir_valores ::= seleccionar_dato_int_double MENOS seleccionar_dato_int_double COMA repetir_valores
        {
          String RESULT =null;
          int decimalleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int decimalright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          String decimal = (String)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;
          int decimal2left = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-2)).left;
          int decimal2right = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-2)).right;
          String decimal2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-2)).value;
          double tempDouble;
          String cambioEnteroDecimal;
          int tempInt;
          if(decimal.contains(".")){
            double valorDecimal= Double.parseDouble(decimal);
            if(decimal2.contains(".")){
              double valorDecimal2= Double.parseDouble(decimal2);
              tempDouble=valorDecimal-valorDecimal2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempDouble)});
              //RESULT=tempDouble;
            }else{
              cambioEnteroDecimal=decimal2+".0";
              double valorDecimal2= Double.parseDouble(cambioEnteroDecimal);
              tempDouble=valorDecimal-valorDecimal2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempDouble)});
              //RESULT=tempDouble;
            }
          }else{
            if(decimal2.contains(".")){
              cambioEnteroDecimal=decimal+".0";
              double valorEntero= Double.parseDouble(cambioEnteroDecimal);
              double valorDecimal2= Double.parseDouble(decimal2);
              tempDouble=valorEntero-valorDecimal2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempDouble)});
              //RESULT=tempDouble;
            }else{int valorEntero=Integer.parseInt(decimal);
              int valorEntero2= Integer.parseInt(decimal2);
              tempInt=valorEntero-valorEntero2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempInt)});
              //RESULT=tempInt;
            }}
          String juntarValores= decimal+" - "+decimal2;
          ocurrenciaOperadores.add(new String[]{"Resta",String.valueOf((decimalleft)),String.valueOf((decimalright)),juntarValores});

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("repetir_valores",154, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 658: // repetir_valores ::= seleccionar_dato_int_double MENOS seleccionar_dato_int_double
        {
          String RESULT =null;
          int decimalleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-2)).left;
          int decimalright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-2)).right;
          String decimal = (String)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-2)).value;
          int decimal2left = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()).left;
          int decimal2right = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()).right;
          String decimal2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.peek()).value;
          double tempDouble;
          String cambioEnteroDecimal;
          int tempInt;
          if(decimal.contains(".")){
            double valorDecimal= Double.parseDouble(decimal);
            if(decimal2.contains(".")){
              double valorDecimal2= Double.parseDouble(decimal2);
              tempDouble=valorDecimal-valorDecimal2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempDouble)});
              //RESULT=tempDouble;
            }else{
              cambioEnteroDecimal=decimal2+".0";
              double valorDecimal2= Double.parseDouble(cambioEnteroDecimal);
              tempDouble=valorDecimal-valorDecimal2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempDouble)});
              //RESULT=tempDouble;
            }
          }else{
            if(decimal2.contains(".")){
              cambioEnteroDecimal=decimal+".0";
              double valorEntero= Double.parseDouble(cambioEnteroDecimal);
              double valorDecimal2= Double.parseDouble(decimal2);
              tempDouble=valorEntero-valorDecimal2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempDouble)});
              //RESULT=tempDouble;
            }else{int valorEntero=Integer.parseInt(decimal);
              int valorEntero2= Integer.parseInt(decimal2);
              tempInt=valorEntero-valorEntero2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempInt)});
              //RESULT=tempInt;
            }}
          String juntarValores= decimal+" - "+decimal2;
          ocurrenciaOperadores.add(new String[]{"Resta",String.valueOf((decimalleft)),String.valueOf((decimalright)),juntarValores});

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("repetir_valores",154, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 659: // repetir_valores ::= seleccionar_dato_int_double ASTERISCO seleccionar_dato_int_double COMA repetir_valores
        {
          String RESULT =null;
          int decimalleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int decimalright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          String decimal = (String)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;
          int decimal2left = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-2)).left;
          int decimal2right = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-2)).right;
          String decimal2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-2)).value;
          double tempDouble;
          String cambioEnteroDecimal;
          int tempInt;
          if(decimal.contains(".")){
            double valorDecimal= Double.parseDouble(decimal);
            if(decimal2.contains(".")){
              double valorDecimal2= Double.parseDouble(decimal2);
              tempDouble=valorDecimal*valorDecimal2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempDouble)});
              //RESULT=tempDouble;
            }else{
              cambioEnteroDecimal=decimal2+".0";
              double valorDecimal2= Double.parseDouble(cambioEnteroDecimal);
              tempDouble=valorDecimal*valorDecimal2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempDouble)});
              //RESULT=tempDouble;
            }
          }else{
            if(decimal2.contains(".")){
              cambioEnteroDecimal=decimal+".0";
              double valorEntero= Double.parseDouble(cambioEnteroDecimal);
              double valorDecimal2= Double.parseDouble(decimal2);
              tempDouble=valorEntero*valorDecimal2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempDouble)});
              //RESULT=tempDouble;
            }else{int valorEntero=Integer.parseInt(decimal);
              int valorEntero2= Integer.parseInt(decimal2);
              tempInt=valorEntero*valorEntero2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempInt)});
              //RESULT=tempInt;
            }}
          String juntarValores= decimal+" * "+decimal2;
          ocurrenciaOperadores.add(new String[]{"Multiplicacion",String.valueOf((decimalleft)),String.valueOf((decimalright)),juntarValores});

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("repetir_valores",154, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 660: // repetir_valores ::= seleccionar_dato_int_double ASTERISCO seleccionar_dato_int_double
        {
          String RESULT =null;
          int decimalleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-2)).left;
          int decimalright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-2)).right;
          String decimal = (String)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-2)).value;
          int decimal2left = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()).left;
          int decimal2right = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()).right;
          String decimal2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.peek()).value;
          double tempDouble;
          String cambioEnteroDecimal;
          int tempInt;
          if(decimal.contains(".")){
            double valorDecimal= Double.parseDouble(decimal);
            if(decimal2.contains(".")){
              double valorDecimal2= Double.parseDouble(decimal2);
              tempDouble=valorDecimal*valorDecimal2;
              //RESULT=tempDouble;
            }else{
              cambioEnteroDecimal=decimal2+".0";
              double valorDecimal2= Double.parseDouble(cambioEnteroDecimal);
              tempDouble=valorDecimal*valorDecimal2;
              //RESULT=tempDouble;
            }
          }else{
            if(decimal2.contains(".")){
              cambioEnteroDecimal=decimal+".0";
              double valorEntero= Double.parseDouble(cambioEnteroDecimal);
              double valorDecimal2= Double.parseDouble(decimal2);
              tempDouble=valorEntero*valorDecimal2;
              //RESULT=tempDouble;
            }else{int valorEntero=Integer.parseInt(decimal);
              int valorEntero2= Integer.parseInt(decimal2);
              tempInt=valorEntero*valorEntero2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempInt)});
              //RESULT=tempInt;
            }}
          String juntarValores= decimal+" * "+decimal2;
          ocurrenciaOperadores.add(new String[]{"Multiplicacion",String.valueOf((decimalleft)),String.valueOf((decimalright)),juntarValores});

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("repetir_valores",154, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 661: // repetir_valores ::= seleccionar_dato_int_double DIAGONAL seleccionar_dato_int_double COMA repetir_valores
        {
          String RESULT =null;
          int decimalleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int decimalright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          String decimal = (String)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;
          int decimal2left = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-2)).left;
          int decimal2right = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-2)).right;
          String decimal2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-2)).value;
          double tempDouble;
          String cambioEnteroDecimal;
          int tempInt;
          if(decimal.contains(".")){
            double valorDecimal= Double.parseDouble(decimal);
            if(decimal2.contains(".")){
              double valorDecimal2= Double.parseDouble(decimal2);
              tempDouble=valorDecimal/valorDecimal2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempDouble)});
              //RESULT=tempDouble;
            }else{
              cambioEnteroDecimal=decimal2+".0";
              double valorDecimal2= Double.parseDouble(cambioEnteroDecimal);
              tempDouble=valorDecimal/valorDecimal2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempDouble)});
              //RESULT=tempDouble;
            }
          }else{
            if(decimal2.contains(".")){
              cambioEnteroDecimal=decimal+".0";
              double valorEntero= Double.parseDouble(cambioEnteroDecimal);
              double valorDecimal2= Double.parseDouble(decimal2);
              tempDouble=valorEntero/valorDecimal2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempDouble)});
              //RESULT=tempDouble;
            }else{int valorEntero=Integer.parseInt(decimal);
              int valorEntero2= Integer.parseInt(decimal2);
              tempInt=valorEntero/valorEntero2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempInt)});
              //RESULT=tempInt;
            }}
          String juntarValores= decimal+" / "+decimal2;
          ocurrenciaOperadores.add(new String[]{"Division",String.valueOf((decimalleft)),String.valueOf((decimalright)),juntarValores});

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("repetir_valores",154, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 662: // repetir_valores ::= seleccionar_dato_int_double DIAGONAL seleccionar_dato_int_double
        {
          String RESULT =null;
          int decimalleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-2)).left;
          int decimalright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-2)).right;
          String decimal = (String)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-2)).value;
          int decimal2left = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()).left;
          int decimal2right = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()).right;
          String decimal2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.peek()).value;
          double tempDouble;
          String cambioEnteroDecimal;
          int tempInt;
          if(decimal.contains(".")){
            double valorDecimal= Double.parseDouble(decimal);
            if(decimal2.contains(".")){
              double valorDecimal2= Double.parseDouble(decimal2);
              tempDouble=valorDecimal/valorDecimal2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempDouble)});
              //RESULT=tempDouble;
            }else{
              cambioEnteroDecimal=decimal2+".0";
              double valorDecimal2= Double.parseDouble(cambioEnteroDecimal);
              tempDouble=valorDecimal/valorDecimal2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempDouble)});
              //RESULT=tempDouble;
            }
          }else{
            if(decimal2.contains(".")){
              cambioEnteroDecimal=decimal+".0";
              double valorEntero= Double.parseDouble(cambioEnteroDecimal);
              double valorDecimal2= Double.parseDouble(decimal2);
              tempDouble=valorEntero/valorDecimal2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempDouble)});
              //RESULT=tempDouble;
            }else{int valorEntero=Integer.parseInt(decimal);
              int valorEntero2= Integer.parseInt(decimal2);
              tempInt=valorEntero/valorEntero2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempInt)});
              //RESULT=tempInt;
            }}
          String juntarValores= decimal+" / "+decimal2;
          ocurrenciaOperadores.add(new String[]{"Division",String.valueOf((decimalleft)),String.valueOf((decimalright)),juntarValores});

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("repetir_valores",154, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 663: // repetir_valores ::= PARENTESISA seleccionar_dato_int_double COMA PARENTESISC repetir_valores
        {
          String RESULT =null;
          int decimalleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-3)).left;
          int decimalright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-3)).right;
          String decimal = (String)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-3)).value;
          if(decimal.contains(".")){
            double valorDecimal= Double.parseDouble(decimal);
          }else{
            int valorEntero= Integer.parseInt(decimal);
          }ejeYArray.add(new String[]{getTituloObtener(),decimal});

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("repetir_valores",154, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 664: // repetir_valores ::= PARENTESISA seleccionar_dato_int_double PARENTESISC
        {
          String RESULT =null;
          int decimalleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-1)).left;
          int decimalright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-1)).right;
          String decimal = (String)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-1)).value;
          if(decimal.contains(".")){
            double valorDecimal= Double.parseDouble(decimal);
          }else{
            int valorEntero= Integer.parseInt(decimal);
          }ejeYArray.add(new String[]{getTituloObtener(),decimal});

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("repetir_valores",154, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 665: // repetir_valores ::= PARENTESISA seleccionar_dato_int_double MAS seleccionar_dato_int_double COMA PARENTESISC repetir_valores
        {
          String RESULT =null;
          int decimalleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-5)).left;
          int decimalright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-5)).right;
          String decimal = (String)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-5)).value;
          int decimal2left = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-3)).left;
          int decimal2right = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-3)).right;
          String decimal2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-3)).value;
          double tempDouble;
          String cambioEnteroDecimal;
          int tempInt;
          if(decimal.contains(".")){
            double valorDecimal= Double.parseDouble(decimal);
            if(decimal2.contains(".")){
              double valorDecimal2= Double.parseDouble(decimal2);
              tempDouble=valorDecimal+valorDecimal2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempDouble)});
              //RESULT=tempDouble;
            }else{
              cambioEnteroDecimal=decimal2+".0";
              double valorDecimal2= Double.parseDouble(cambioEnteroDecimal);
              tempDouble=valorDecimal+valorDecimal2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempDouble)});
              //RESULT=tempDouble;
            }
          }else{
            if(decimal2.contains(".")){
              cambioEnteroDecimal=decimal+".0";
              double valorEntero= Double.parseDouble(cambioEnteroDecimal);
              double valorDecimal2= Double.parseDouble(decimal2);
              tempDouble=valorEntero+valorDecimal2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempDouble)});
              //RESULT=tempDouble;
            }else{int valorEntero=Integer.parseInt(decimal);
              int valorEntero2= Integer.parseInt(decimal2);
              tempInt=valorEntero+valorEntero2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempInt)});
              //RESULT=tempInt;
            }}
          String juntarValores= decimal+" + "+decimal2;
          ocurrenciaOperadores.add(new String[]{"Suma",String.valueOf((decimalleft)),String.valueOf((decimalright)),juntarValores});

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("repetir_valores",154, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 666: // repetir_valores ::= PARENTESISA seleccionar_dato_int_double MAS seleccionar_dato_int_double PARENTESISC
        {
          String RESULT =null;
          int decimalleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-3)).left;
          int decimalright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-3)).right;
          String decimal = (String)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-3)).value;
          int decimal2left = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-1)).left;
          int decimal2right = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-1)).right;
          String decimal2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-1)).value;
          double tempDouble;
          String cambioEnteroDecimal;
          int tempInt;
          if(decimal.contains(".")){
            double valorDecimal= Double.parseDouble(decimal);
            if(decimal2.contains(".")){
              double valorDecimal2= Double.parseDouble(decimal2);
              tempDouble=valorDecimal+valorDecimal2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempDouble)});
              //RESULT=tempDouble;
            }else{
              cambioEnteroDecimal=decimal2+".0";
              double valorDecimal2= Double.parseDouble(cambioEnteroDecimal);
              tempDouble=valorDecimal+valorDecimal2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempDouble)});
              //RESULT=tempDouble;
            }
          }else{
            if(decimal2.contains(".")){
              cambioEnteroDecimal=decimal+".0";
              double valorEntero= Double.parseDouble(cambioEnteroDecimal);
              double valorDecimal2= Double.parseDouble(decimal2);
              tempDouble=valorEntero+valorDecimal2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempDouble)});
              //RESULT=tempDouble;
            }else{int valorEntero=Integer.parseInt(decimal);
              int valorEntero2= Integer.parseInt(decimal2);
              tempInt=valorEntero+valorEntero2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempInt)});
              //RESULT=tempInt;
            }}
          String juntarValores= decimal+" + "+decimal2;
          ocurrenciaOperadores.add(new String[]{"Suma",String.valueOf((decimalleft)),String.valueOf((decimalright)),juntarValores});

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("repetir_valores",154, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 667: // repetir_valores ::= PARENTESISA seleccionar_dato_int_double MENOS seleccionar_dato_int_double COMA PARENTESISC repetir_valores
        {
          String RESULT =null;
          int decimalleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-5)).left;
          int decimalright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-5)).right;
          String decimal = (String)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-5)).value;
          int decimal2left = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-3)).left;
          int decimal2right = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-3)).right;
          String decimal2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-3)).value;
          double tempDouble;
          String cambioEnteroDecimal;
          int tempInt;
          if(decimal.contains(".")){
            double valorDecimal= Double.parseDouble(decimal);
            if(decimal2.contains(".")){
              double valorDecimal2= Double.parseDouble(decimal2);
              tempDouble=valorDecimal-valorDecimal2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempDouble)});
              //RESULT=tempDouble;
            }else{
              cambioEnteroDecimal=decimal2+".0";
              double valorDecimal2= Double.parseDouble(cambioEnteroDecimal);
              tempDouble=valorDecimal-valorDecimal2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempDouble)});
              //RESULT=tempDouble;
            }
          }else{
            if(decimal2.contains(".")){
              cambioEnteroDecimal=decimal+".0";
              double valorEntero= Double.parseDouble(cambioEnteroDecimal);
              double valorDecimal2= Double.parseDouble(decimal2);
              tempDouble=valorEntero-valorDecimal2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempDouble)});
              //RESULT=tempDouble;
            }else{int valorEntero=Integer.parseInt(decimal);
              int valorEntero2= Integer.parseInt(decimal2);
              tempInt=valorEntero-valorEntero2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempInt)});
              //RESULT=tempInt;
            }}
          String juntarValores= decimal+" - "+decimal2;
          ocurrenciaOperadores.add(new String[]{"Resta",String.valueOf((decimalleft)),String.valueOf((decimalright)),juntarValores});

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("repetir_valores",154, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 668: // repetir_valores ::= PARENTESISA seleccionar_dato_int_double MENOS seleccionar_dato_int_double PARENTESISC
        {
          String RESULT =null;
          int decimalleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-3)).left;
          int decimalright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-3)).right;
          String decimal = (String)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-3)).value;
          int decimal2left = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-1)).left;
          int decimal2right = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-1)).right;
          String decimal2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-1)).value;
          double tempDouble;
          String cambioEnteroDecimal;
          int tempInt;
          if(decimal.contains(".")){
            double valorDecimal= Double.parseDouble(decimal);
            if(decimal2.contains(".")){
              double valorDecimal2= Double.parseDouble(decimal2);
              tempDouble=valorDecimal-valorDecimal2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempDouble)});
              //RESULT=tempDouble;
            }else{
              cambioEnteroDecimal=decimal2+".0";
              double valorDecimal2= Double.parseDouble(cambioEnteroDecimal);
              tempDouble=valorDecimal-valorDecimal2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempDouble)});
              //RESULT=tempDouble;
            }
          }else{
            if(decimal2.contains(".")){
              cambioEnteroDecimal=decimal+".0";
              double valorEntero= Double.parseDouble(cambioEnteroDecimal);
              double valorDecimal2= Double.parseDouble(decimal2);
              tempDouble=valorEntero-valorDecimal2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempDouble)});
              //RESULT=tempDouble;
            }else{int valorEntero=Integer.parseInt(decimal);
              int valorEntero2= Integer.parseInt(decimal2);
              tempInt=valorEntero-valorEntero2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempInt)});
              //RESULT=tempInt;
            }}
          String juntarValores= decimal+" - "+decimal2;
          ocurrenciaOperadores.add(new String[]{"Resta",String.valueOf((decimalleft)),String.valueOf((decimalright)),juntarValores});

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("repetir_valores",154, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 669: // repetir_valores ::= PARENTESISA seleccionar_dato_int_double ASTERISCO seleccionar_dato_int_double COMA PARENTESISC repetir_valores
        {
          String RESULT =null;
          int decimalleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-5)).left;
          int decimalright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-5)).right;
          String decimal = (String)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-5)).value;
          int decimal2left = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-3)).left;
          int decimal2right = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-3)).right;
          String decimal2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-3)).value;
          double tempDouble;
          String cambioEnteroDecimal;
          int tempInt;
          if(decimal.contains(".")){
            double valorDecimal= Double.parseDouble(decimal);
            if(decimal2.contains(".")){
              double valorDecimal2= Double.parseDouble(decimal2);
              tempDouble=valorDecimal*valorDecimal2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempDouble)});
              //RESULT=tempDouble;
            }else{
              cambioEnteroDecimal=decimal2+".0";
              double valorDecimal2= Double.parseDouble(cambioEnteroDecimal);
              tempDouble=valorDecimal*valorDecimal2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempDouble)});
              //RESULT=tempDouble;
            }
          }else{
            if(decimal2.contains(".")){
              cambioEnteroDecimal=decimal+".0";
              double valorEntero= Double.parseDouble(cambioEnteroDecimal);
              double valorDecimal2= Double.parseDouble(decimal2);
              tempDouble=valorEntero*valorDecimal2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempDouble)});
              //RESULT=tempDouble;
            }else{int valorEntero=Integer.parseInt(decimal);
              int valorEntero2= Integer.parseInt(decimal2);
              tempInt=valorEntero*valorEntero2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempInt)});
              //RESULT=tempInt;
            }}
          String juntarValores= decimal+" * "+decimal2;
          ocurrenciaOperadores.add(new String[]{"Multiplicacion",String.valueOf((decimalleft)),String.valueOf((decimalright)),juntarValores});

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("repetir_valores",154, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 670: // repetir_valores ::= PARENTESISA seleccionar_dato_int_double ASTERISCO seleccionar_dato_int_double PARENTESISC
        {
          String RESULT =null;
          int decimalleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-3)).left;
          int decimalright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-3)).right;
          String decimal = (String)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-3)).value;
          int decimal2left = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-1)).left;
          int decimal2right = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-1)).right;
          String decimal2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-1)).value;
          double tempDouble;
          String cambioEnteroDecimal;
          int tempInt;
          if(decimal.contains(".")){
            double valorDecimal= Double.parseDouble(decimal);
            if(decimal2.contains(".")){
              double valorDecimal2= Double.parseDouble(decimal2);
              tempDouble=valorDecimal*valorDecimal2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempDouble)});
              //RESULT=tempDouble;
            }else{
              cambioEnteroDecimal=decimal2+".0";
              double valorDecimal2= Double.parseDouble(cambioEnteroDecimal);
              tempDouble=valorDecimal*valorDecimal2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempDouble)});
              //RESULT=tempDouble;
            }
          }else{
            if(decimal2.contains(".")){
              cambioEnteroDecimal=decimal+".0";
              double valorEntero= Double.parseDouble(cambioEnteroDecimal);
              double valorDecimal2= Double.parseDouble(decimal2);
              tempDouble=valorEntero*valorDecimal2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempDouble)});
              //RESULT=tempDouble;
            }else{int valorEntero=Integer.parseInt(decimal);
              int valorEntero2= Integer.parseInt(decimal2);
              tempInt=valorEntero*valorEntero2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempInt)});
              //RESULT=tempInt;
            }}
          String juntarValores= decimal+" * "+decimal2;
          ocurrenciaOperadores.add(new String[]{"Multiplicacion",String.valueOf((decimalleft)),String.valueOf((decimalright)),juntarValores});

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("repetir_valores",154, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 671: // repetir_valores ::= PARENTESISA seleccionar_dato_int_double DIAGONAL seleccionar_dato_int_double COMA PARENTESISC repetir_valores
        {
          String RESULT =null;
          int decimalleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-5)).left;
          int decimalright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-5)).right;
          String decimal = (String)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-5)).value;
          int decimal2left = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-3)).left;
          int decimal2right = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-3)).right;
          String decimal2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-3)).value;
          double tempDouble;
          String cambioEnteroDecimal;
          int tempInt;
          if(decimal.contains(".")){
            double valorDecimal= Double.parseDouble(decimal);
            if(decimal2.contains(".")){
              double valorDecimal2= Double.parseDouble(decimal2);
              tempDouble=valorDecimal/valorDecimal2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempDouble)});
              //RESULT=tempDouble;
            }else{
              cambioEnteroDecimal=decimal2+".0";
              double valorDecimal2= Double.parseDouble(cambioEnteroDecimal);
              tempDouble=valorDecimal/valorDecimal2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempDouble)});
              //RESULT=tempDouble;
            }
          }else{
            if(decimal2.contains(".")){
              cambioEnteroDecimal=decimal+".0";
              double valorEntero= Double.parseDouble(cambioEnteroDecimal);
              double valorDecimal2= Double.parseDouble(decimal2);
              tempDouble=valorEntero/valorDecimal2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempDouble)});
              //RESULT=tempDouble;
            }else{int valorEntero=Integer.parseInt(decimal);
              int valorEntero2= Integer.parseInt(decimal2);
              tempInt=valorEntero/valorEntero2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempInt)});
              //RESULT=tempInt;
            }}
          String juntarValores= decimal+" / "+decimal2;
          ocurrenciaOperadores.add(new String[]{"Division",String.valueOf((decimalleft)),String.valueOf((decimalright)),juntarValores});

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("repetir_valores",154, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 672: // repetir_valores ::= PARENTESISA seleccionar_dato_int_double DIAGONAL seleccionar_dato_int_double PARENTESISC
        {
          String RESULT =null;
          int decimalleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-3)).left;
          int decimalright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-3)).right;
          String decimal = (String)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-3)).value;
          int decimal2left = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-1)).left;
          int decimal2right = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-1)).right;
          String decimal2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-1)).value;
          double tempDouble;
          String cambioEnteroDecimal;
          int tempInt;
          if(decimal.contains(".")){
            double valorDecimal= Double.parseDouble(decimal);
            if(decimal2.contains(".")){
              double valorDecimal2= Double.parseDouble(decimal2);
              tempDouble=valorDecimal/valorDecimal2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempDouble)});
              //RESULT=tempDouble;
            }else{
              cambioEnteroDecimal=decimal2+".0";
              double valorDecimal2= Double.parseDouble(cambioEnteroDecimal);
              tempDouble=valorDecimal/valorDecimal2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempDouble)});
              //RESULT=tempDouble;
            }
          }else{
            if(decimal2.contains(".")){
              cambioEnteroDecimal=decimal+".0";
              double valorEntero= Double.parseDouble(cambioEnteroDecimal);
              double valorDecimal2= Double.parseDouble(decimal2);
              tempDouble=valorEntero/valorDecimal2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempDouble)});
              //RESULT=tempDouble;
            }else{int valorEntero=Integer.parseInt(decimal);
              int valorEntero2= Integer.parseInt(decimal2);
              tempInt=valorEntero/valorEntero2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempInt)});
              //RESULT=tempInt;
            }}
          String juntarValores= decimal+" / "+decimal2;
          ocurrenciaOperadores.add(new String[]{"Division",String.valueOf((decimalleft)),String.valueOf((decimalright)),juntarValores});

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("repetir_valores",154, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 673: // seleccionar_dato_int_double ::= ENTERO
        {
          String RESULT =null;
          int enteroleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()).left;
          int enteroright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()).right;
          Integer entero = (Integer)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.peek()).value;
          String temp = String.valueOf(entero);
          RESULT=temp;
          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("seleccionar_dato_int_double",21, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 674: // seleccionar_dato_int_double ::= ENTERO PUNTO ENTERO
        {
          String RESULT =null;
          int enteroleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-2)).left;
          int enteroright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-2)).right;
          Integer entero = (Integer)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-2)).value;
          int entero2left = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()).left;
          int entero2right = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()).right;
          Integer entero2 = (Integer)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.peek()).value;
          String temp = String.valueOf(entero)+"."+String.valueOf(entero2);
          RESULT=temp;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("seleccionar_dato_int_double",21, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 675: // repetir_pie ::= LLAVEA ENTERO COMA ENTERO LLAVEC COMA repetir_unir
        {
          String RESULT =null;
          int entero1left = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-5)).left;
          int entero1right = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-5)).right;
          Integer entero1 = (Integer)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-5)).value;
          int entero2left = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-3)).left;
          int entero2right = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-3)).right;
          Integer entero2 = (Integer)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-3)).value;
          unirBarraArray.add(new String[]{getTituloObtener(),String.valueOf(entero1),String.valueOf(entero2)});
          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("repetir_pie",155, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 676: // repetir_pie ::= LLAVEA ENTERO COMA ENTERO LLAVEC
        {
          String RESULT =null;
          int entero1left = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-3)).left;
          int entero1right = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-3)).right;
          Integer entero1 = (Integer)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-3)).value;
          int entero2left = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-1)).left;
          int entero2right = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-1)).right;
          Integer entero2 = (Integer)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-1)).value;
          unirBarraArray.add(new String[]{getTituloObtener(),String.valueOf(entero1),String.valueOf(entero2)});
          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("repetir_pie",155, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 677: // repetir_total ::= ENTERO
        {
          String RESULT =null;
          int entero1left = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()).left;
          int entero1right = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()).right;
          Integer entero1 = (Integer)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.peek()).value;
          etiquetasArray.add(new String[]{getTituloObtener(),String.valueOf(entero1)});
          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("repetir_total",156, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 678: // repetir_total ::= ENTERO PUNTO ENTERO
        {
          String RESULT =null;
          int entero1left = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-2)).left;
          int entero1right = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-2)).right;
          Integer entero1 = (Integer)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-2)).value;
          int entero2left = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()).left;
          int entero2right = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()).right;
          Integer entero2 = (Integer)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.peek()).value;
          String tmp=entero1+"."+entero2;
          etiquetasArray.add(new String[]{getTituloObtener(),tmp});
          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("repetir_total",156, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 679: // crear_tit_pie ::= TEXTO
        {
          String RESULT =null;
          int textoleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()).left;
          int textoright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()).right;
          String texto = (String)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.peek()).value;
          tituloArray.add(new String[]{texto,"Pie"});setTituloObtener(texto);
          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("crear_tit_pie",23, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 680: // definir_extra ::= TEXTO
        {
          String RESULT =null;
          int textoleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()).left;
          int textoright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()).right;
          String texto = (String)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.peek()).value;
          extraArray.add(new String[]{getTituloObtener(),texto});
          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("definir_extra",24, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 681: // cuerpo_barra ::= TITULO DOSPUNTOS definir_titulo PUNTOCOMA cuerpo_ejeyx_unir
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_barra",2, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 682: // cuerpo_barra ::= EJEX DOSPUNTOS CORCHETEA repetir_eje_x CORCHETEC PUNTOCOMA cuerpo_ejey_unir_titulo
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_barra",2, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 683: // cuerpo_barra ::= EJEY DOSPUNTOS CORCHETEA repetir_eje_y CORCHETEC PUNTOCOMA cuerpo_ejex_titulo_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_barra",2, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 684: // cuerpo_barra ::= UNIR DOSPUNTOS CORCHETEA repetir_unir CORCHETEC PUNTOCOMA cuerpo_ejeyx_titulo
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_barra",2, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 685: // cuerpo_ejey_unir_titulo ::= TITULO DOSPUNTOS definir_titulo PUNTOCOMA cuerpo_ejey_unir
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_ejey_unir_titulo",3, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 686: // cuerpo_ejey_unir_titulo ::= EJEY DOSPUNTOS CORCHETEA repetir_eje_y CORCHETEC PUNTOCOMA cuerpo_unir_titulo
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_ejey_unir_titulo",3, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 687: // cuerpo_ejey_unir_titulo ::= UNIR DOSPUNTOS CORCHETEA repetir_unir CORCHETEC PUNTOCOMA cuerpo_ejey_titulo
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_ejey_unir_titulo",3, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 688: // cuerpo_ejex_titulo_unir ::= EJEX DOSPUNTOS CORCHETEA repetir_eje_x CORCHETEC PUNTOCOMA cuerpo_unir_titulo
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_ejex_titulo_unir",4, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 689: // cuerpo_ejex_titulo_unir ::= TITULO DOSPUNTOS definir_titulo PUNTOCOMA cuerpo_ejex_unir
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_ejex_titulo_unir",4, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 690: // cuerpo_ejex_titulo_unir ::= UNIR DOSPUNTOS CORCHETEA repetir_unir CORCHETEC PUNTOCOMA cuerpo_ejex_titulo
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_ejex_titulo_unir",4, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 691: // cuerpo_ejeyx_titulo ::= EJEX DOSPUNTOS CORCHETEA repetir_eje_x CORCHETEC PUNTOCOMA cuerpo_ejey_titulo
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_ejeyx_titulo",5, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 692: // cuerpo_ejeyx_titulo ::= EJEY DOSPUNTOS CORCHETEA repetir_eje_y CORCHETEC PUNTOCOMA cuerpo_ejex_titulo
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_ejeyx_titulo",5, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 693: // cuerpo_ejeyx_titulo ::= TITULO DOSPUNTOS definir_titulo PUNTOCOMA cuerpo_ejexy
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_ejeyx_titulo",5, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 694: // cuerpo_ejeyx_unir ::= EJEX DOSPUNTOS CORCHETEA repetir_eje_x CORCHETEC PUNTOCOMA cuerpo_ejey_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_ejeyx_unir",6, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 695: // cuerpo_ejeyx_unir ::= EJEY DOSPUNTOS CORCHETEA repetir_eje_y CORCHETEC PUNTOCOMA cuerpo_ejex_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_ejeyx_unir",6, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 696: // cuerpo_ejeyx_unir ::= UNIR DOSPUNTOS CORCHETEA repetir_unir CORCHETEC PUNTOCOMA cuerpo_ejexy
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_ejeyx_unir",6, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 697: // cuerpo_ejey_unir ::= EJEY DOSPUNTOS CORCHETEA repetir_eje_y CORCHETEC PUNTOCOMA cuerpo_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_ejey_unir",7, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 698: // cuerpo_ejey_unir ::= UNIR DOSPUNTOS CORCHETEA repetir_unir CORCHETEC PUNTOCOMA cuerpo_ejey
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_ejey_unir",7, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 699: // cuerpo_ejex_unir ::= EJEX DOSPUNTOS CORCHETEA repetir_eje_x CORCHETEC PUNTOCOMA cuerpo_unir
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_ejex_unir",8, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 700: // cuerpo_ejex_unir ::= UNIR DOSPUNTOS CORCHETEA repetir_unir CORCHETEC PUNTOCOMA cuerpo_ejex
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_ejex_unir",8, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 701: // cuerpo_ejexy ::= EJEX DOSPUNTOS CORCHETEA repetir_eje_x CORCHETEC PUNTOCOMA cuerpo_ejey
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_ejexy",9, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 702: // cuerpo_ejexy ::= EJEY DOSPUNTOS CORCHETEA repetir_eje_y CORCHETEC PUNTOCOMA cuerpo_ejex
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_ejexy",9, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 703: // cuerpo_ejey_titulo ::= TITULO DOSPUNTOS definir_titulo PUNTOCOMA cuerpo_ejey
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_ejey_titulo",10, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 704: // cuerpo_ejey_titulo ::= EJEY DOSPUNTOS CORCHETEA repetir_eje_y CORCHETEC PUNTOCOMA cuerpo_titulo
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_ejey_titulo",10, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 705: // cuerpo_ejex_titulo ::= TITULO DOSPUNTOS definir_titulo PUNTOCOMA cuerpo_ejex
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_ejex_titulo",11, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 706: // cuerpo_ejex_titulo ::= EJEX DOSPUNTOS CORCHETEA repetir_eje_x CORCHETEC PUNTOCOMA cuerpo_titulo
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_ejex_titulo",11, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 707: // cuerpo_unir_titulo ::= TITULO DOSPUNTOS definir_titulo PUNTOCOMA cuerpo_unir
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_unir_titulo",12, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 708: // cuerpo_unir_titulo ::= UNIR DOSPUNTOS CORCHETEA repetir_unir CORCHETEC PUNTOCOMA cuerpo_titulo
        {
          String RESULT =null;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_unir_titulo",12, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 709: // cuerpo_ejey ::= EJEY DOSPUNTOS CORCHETEA repetir_eje_y CORCHETEC PUNTOCOMA
        {
          String RESULT =null;
          System.out.println("Ejey al final");
          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_ejey",13, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 710: // cuerpo_unir ::= UNIR DOSPUNTOS CORCHETEA repetir_unir CORCHETEC PUNTOCOMA
        {
          String RESULT =null;
          System.out.println("unir al final");
          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_unir",14, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 711: // cuerpo_ejex ::= EJEX DOSPUNTOS CORCHETEA repetir_eje_x CORCHETEC PUNTOCOMA
        {
          String RESULT =null;
          System.out.println("Ejex al final");
          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_ejex",15, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 712: // cuerpo_titulo ::= TITULO DOSPUNTOS definir_titulo PUNTOCOMA
        {
          String RESULT =null;
          int tituloleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-3)).left;
          int tituloright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-3)).right;
          Object titulo = (Object)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-3)).value;
          System.out.println("titulo al final");
          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_titulo",16, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 713: // repetir_eje_x ::= TEXTO COMA repetir_eje_x
        {
          String RESULT =null;
          int textoleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-2)).left;
          int textoright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-2)).right;
          String texto = (String)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-2)).value;
          ejeXArray.add(new String[]{getTituloObtener(),texto});
          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("repetir_eje_x",17, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 714: // repetir_eje_x ::= TEXTO
        {
          String RESULT =null;
          int textoleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()).left;
          int textoright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()).right;
          String texto = (String)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.peek()).value;
          ejeXArray.add(new String[]{getTituloObtener(),texto});
          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("repetir_eje_x",17, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 715: // repetir_eje_y ::= elegir_entero_decimal COMA repetir_eje_y
        {
          String RESULT =null;
          int decimalleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-2)).left;
          int decimalright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-2)).right;
          String decimal = (String)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-2)).value;
          if(decimal.contains(".")){
            double valorDecimal= Double.parseDouble(decimal);
          }else{
            int valorEntero= Integer.parseInt(decimal);
          }ejeYArray.add(new String[]{getTituloObtener(),decimal});

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("repetir_eje_y",18, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 716: // repetir_eje_y ::= elegir_entero_decimal
        {
          String RESULT =null;
          int decimalleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()).left;
          int decimalright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()).right;
          String decimal = (String)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.peek()).value;
          if(decimal.contains(".")){
            double valorDecimal= Double.parseDouble(decimal);
          }else{
            int valorEntero= Integer.parseInt(decimal);
          }ejeYArray.add(new String[]{getTituloObtener(),decimal});

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("repetir_eje_y",18, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 717: // repetir_eje_y ::= elegir_entero_decimal MAS elegir_entero_decimal COMA repetir_eje_y
        {
          String RESULT =null;
          int decimalleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int decimalright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          String decimal = (String)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;
          int decimal2left = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-2)).left;
          int decimal2right = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-2)).right;
          String decimal2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-2)).value;
          double tempDouble;
          String cambioEnteroDecimal;
          int tempInt;
          if(decimal.contains(".")){
            double valorDecimal= Double.parseDouble(decimal);
            if(decimal2.contains(".")){
              double valorDecimal2= Double.parseDouble(decimal2);
              tempDouble=valorDecimal+valorDecimal2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempDouble)});
              //RESULT=tempDouble;
            }else{
              cambioEnteroDecimal=decimal2+".0";
              double valorDecimal2= Double.parseDouble(cambioEnteroDecimal);
              tempDouble=valorDecimal+valorDecimal2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempDouble)});
              //RESULT=tempDouble;
            }
          }else{
            if(decimal2.contains(".")){
              cambioEnteroDecimal=decimal+".0";
              double valorEntero= Double.parseDouble(cambioEnteroDecimal);
              double valorDecimal2= Double.parseDouble(decimal2);
              tempDouble=valorEntero+valorDecimal2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempDouble)});
              //RESULT=tempDouble;
            }else{int valorEntero=Integer.parseInt(decimal);
              int valorEntero2= Integer.parseInt(decimal2);
              tempInt=valorEntero+valorEntero2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempInt)});
              //RESULT=tempInt;
            }}
          String juntarValores= decimal+" + "+decimal2;
          ocurrenciaOperadores.add(new String[]{"Suma",String.valueOf((decimalleft)),String.valueOf((decimalright)),juntarValores});

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("repetir_eje_y",18, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 718: // repetir_eje_y ::= elegir_entero_decimal MAS elegir_entero_decimal
        {
          String RESULT =null;
          int decimalleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-2)).left;
          int decimalright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-2)).right;
          String decimal = (String)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-2)).value;
          int decimal2left = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()).left;
          int decimal2right = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()).right;
          String decimal2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.peek()).value;
          double tempDouble;
          String cambioEnteroDecimal;
          int tempInt;
          if(decimal.contains(".")){
            double valorDecimal= Double.parseDouble(decimal);
            if(decimal2.contains(".")){
              double valorDecimal2= Double.parseDouble(decimal2);
              tempDouble=valorDecimal+valorDecimal2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempDouble)});
              //RESULT=tempDouble;
            }else{
              cambioEnteroDecimal=decimal2+".0";
              double valorDecimal2= Double.parseDouble(cambioEnteroDecimal);
              tempDouble=valorDecimal+valorDecimal2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempDouble)});
              //RESULT=tempDouble;
            }
          }else{
            if(decimal2.contains(".")){
              cambioEnteroDecimal=decimal+".0";
              double valorEntero= Double.parseDouble(cambioEnteroDecimal);
              double valorDecimal2= Double.parseDouble(decimal2);
              tempDouble=valorEntero+valorDecimal2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempDouble)});
              //RESULT=tempDouble;
            }else{int valorEntero=Integer.parseInt(decimal);
              int valorEntero2= Integer.parseInt(decimal2);
              tempInt=valorEntero+valorEntero2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempInt)});
              //RESULT=tempInt;
            }}
          String juntarValores= decimal+" + "+decimal2;
          ocurrenciaOperadores.add(new String[]{"Suma",String.valueOf((decimalleft)),String.valueOf((decimalright)),juntarValores});

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("repetir_eje_y",18, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 719: // repetir_eje_y ::= elegir_entero_decimal MENOS elegir_entero_decimal COMA repetir_eje_y
        {
          String RESULT =null;
          int decimalleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int decimalright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          String decimal = (String)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;
          int decimal2left = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-2)).left;
          int decimal2right = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-2)).right;
          String decimal2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-2)).value;
          double tempDouble;
          String cambioEnteroDecimal;
          int tempInt;
          if(decimal.contains(".")){
            double valorDecimal= Double.parseDouble(decimal);
            if(decimal2.contains(".")){
              double valorDecimal2= Double.parseDouble(decimal2);
              tempDouble=valorDecimal-valorDecimal2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempDouble)});
              //RESULT=tempDouble;
            }else{
              cambioEnteroDecimal=decimal2+".0";
              double valorDecimal2= Double.parseDouble(cambioEnteroDecimal);
              tempDouble=valorDecimal-valorDecimal2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempDouble)});
              //RESULT=tempDouble;
            }
          }else{
            if(decimal2.contains(".")){
              cambioEnteroDecimal=decimal+".0";
              double valorEntero= Double.parseDouble(cambioEnteroDecimal);
              double valorDecimal2= Double.parseDouble(decimal2);
              tempDouble=valorEntero-valorDecimal2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempDouble)});
              //RESULT=tempDouble;
            }else{int valorEntero=Integer.parseInt(decimal);
              int valorEntero2= Integer.parseInt(decimal2);
              tempInt=valorEntero-valorEntero2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempInt)});
              //RESULT=tempInt;
            }}
          String juntarValores= decimal+" - "+decimal2;
          ocurrenciaOperadores.add(new String[]{"Resta",String.valueOf((decimalleft)),String.valueOf((decimalright)),juntarValores});

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("repetir_eje_y",18, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 720: // repetir_eje_y ::= elegir_entero_decimal MENOS elegir_entero_decimal
        {
          String RESULT =null;
          int decimalleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-2)).left;
          int decimalright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-2)).right;
          String decimal = (String)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-2)).value;
          int decimal2left = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()).left;
          int decimal2right = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()).right;
          String decimal2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.peek()).value;
          double tempDouble;
          String cambioEnteroDecimal;
          int tempInt;
          if(decimal.contains(".")){
            double valorDecimal= Double.parseDouble(decimal);
            if(decimal2.contains(".")){
              double valorDecimal2= Double.parseDouble(decimal2);
              tempDouble=valorDecimal-valorDecimal2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempDouble)});
              //RESULT=tempDouble;
            }else{
              cambioEnteroDecimal=decimal2+".0";
              double valorDecimal2= Double.parseDouble(cambioEnteroDecimal);
              tempDouble=valorDecimal-valorDecimal2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempDouble)});
              //RESULT=tempDouble;
            }
          }else{
            if(decimal2.contains(".")){
              cambioEnteroDecimal=decimal+".0";
              double valorEntero= Double.parseDouble(cambioEnteroDecimal);
              double valorDecimal2= Double.parseDouble(decimal2);
              tempDouble=valorEntero-valorDecimal2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempDouble)});
              //RESULT=tempDouble;
            }else{int valorEntero=Integer.parseInt(decimal);
              int valorEntero2= Integer.parseInt(decimal2);
              tempInt=valorEntero-valorEntero2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempInt)});
              //RESULT=tempInt;
            }}
          String juntarValores= decimal+" - "+decimal2;
          ocurrenciaOperadores.add(new String[]{"Resta",String.valueOf((decimalleft)),String.valueOf((decimalright)),juntarValores});

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("repetir_eje_y",18, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 721: // repetir_eje_y ::= elegir_entero_decimal ASTERISCO elegir_entero_decimal COMA repetir_eje_y
        {
          String RESULT =null;
          int decimalleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int decimalright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          String decimal = (String)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;
          int decimal2left = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-2)).left;
          int decimal2right = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-2)).right;
          String decimal2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-2)).value;
          double tempDouble;
          String cambioEnteroDecimal;
          int tempInt;
          if(decimal.contains(".")){
            double valorDecimal= Double.parseDouble(decimal);
            if(decimal2.contains(".")){
              double valorDecimal2= Double.parseDouble(decimal2);
              tempDouble=valorDecimal*valorDecimal2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempDouble)});
              //RESULT=tempDouble;
            }else{
              cambioEnteroDecimal=decimal2+".0";
              double valorDecimal2= Double.parseDouble(cambioEnteroDecimal);
              tempDouble=valorDecimal*valorDecimal2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempDouble)});
              //RESULT=tempDouble;
            }
          }else{
            if(decimal2.contains(".")){
              cambioEnteroDecimal=decimal+".0";
              double valorEntero= Double.parseDouble(cambioEnteroDecimal);
              double valorDecimal2= Double.parseDouble(decimal2);
              tempDouble=valorEntero*valorDecimal2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempDouble)});
              //RESULT=tempDouble;
            }else{int valorEntero=Integer.parseInt(decimal);
              int valorEntero2= Integer.parseInt(decimal2);
              tempInt=valorEntero*valorEntero2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempInt)});
              //RESULT=tempInt;
            }}
          String juntarValores= decimal+" * "+decimal2;
          ocurrenciaOperadores.add(new String[]{"Multiplicacion",String.valueOf((decimalleft)),String.valueOf((decimalright)),juntarValores});

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("repetir_eje_y",18, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 722: // repetir_eje_y ::= elegir_entero_decimal ASTERISCO elegir_entero_decimal
        {
          String RESULT =null;
          int decimalleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-2)).left;
          int decimalright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-2)).right;
          String decimal = (String)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-2)).value;
          int decimal2left = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()).left;
          int decimal2right = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()).right;
          String decimal2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.peek()).value;
          double tempDouble;
          String cambioEnteroDecimal;
          int tempInt;
          if(decimal.contains(".")){
            double valorDecimal= Double.parseDouble(decimal);
            if(decimal2.contains(".")){
              double valorDecimal2= Double.parseDouble(decimal2);
              tempDouble=valorDecimal*valorDecimal2;
              //RESULT=tempDouble;
            }else{
              cambioEnteroDecimal=decimal2+".0";
              double valorDecimal2= Double.parseDouble(cambioEnteroDecimal);
              tempDouble=valorDecimal*valorDecimal2;
              //RESULT=tempDouble;
            }
          }else{
            if(decimal2.contains(".")){
              cambioEnteroDecimal=decimal+".0";
              double valorEntero= Double.parseDouble(cambioEnteroDecimal);
              double valorDecimal2= Double.parseDouble(decimal2);
              tempDouble=valorEntero*valorDecimal2;
              //RESULT=tempDouble;
            }else{int valorEntero=Integer.parseInt(decimal);
              int valorEntero2= Integer.parseInt(decimal2);
              tempInt=valorEntero*valorEntero2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempInt)});
              //RESULT=tempInt;
            }}
          String juntarValores= decimal+" * "+decimal2;
          ocurrenciaOperadores.add(new String[]{"Multiplicacion",String.valueOf((decimalleft)),String.valueOf((decimalright)),juntarValores});

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("repetir_eje_y",18, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 723: // repetir_eje_y ::= elegir_entero_decimal DIAGONAL elegir_entero_decimal COMA repetir_eje_y
        {
          String RESULT =null;
          int decimalleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).left;
          int decimalright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).right;
          String decimal = (String)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)).value;
          int decimal2left = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-2)).left;
          int decimal2right = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-2)).right;
          String decimal2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-2)).value;
          double tempDouble;
          String cambioEnteroDecimal;
          int tempInt;
          if(decimal.contains(".")){
            double valorDecimal= Double.parseDouble(decimal);
            if(decimal2.contains(".")){
              double valorDecimal2= Double.parseDouble(decimal2);
              tempDouble=valorDecimal/valorDecimal2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempDouble)});
              //RESULT=tempDouble;
            }else{
              cambioEnteroDecimal=decimal2+".0";
              double valorDecimal2= Double.parseDouble(cambioEnteroDecimal);
              tempDouble=valorDecimal/valorDecimal2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempDouble)});
              //RESULT=tempDouble;
            }
          }else{
            if(decimal2.contains(".")){
              cambioEnteroDecimal=decimal+".0";
              double valorEntero= Double.parseDouble(cambioEnteroDecimal);
              double valorDecimal2= Double.parseDouble(decimal2);
              tempDouble=valorEntero/valorDecimal2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempDouble)});
              //RESULT=tempDouble;
            }else{int valorEntero=Integer.parseInt(decimal);
              int valorEntero2= Integer.parseInt(decimal2);
              tempInt=valorEntero/valorEntero2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempInt)});
              //RESULT=tempInt;
            }}
          String juntarValores= decimal+" / "+decimal2;
          ocurrenciaOperadores.add(new String[]{"Division",String.valueOf((decimalleft)),String.valueOf((decimalright)),juntarValores});

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("repetir_eje_y",18, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 724: // repetir_eje_y ::= elegir_entero_decimal DIAGONAL elegir_entero_decimal
        {
          String RESULT =null;
          int decimalleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-2)).left;
          int decimalright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-2)).right;
          String decimal = (String)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-2)).value;
          int decimal2left = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()).left;
          int decimal2right = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()).right;
          String decimal2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.peek()).value;
          double tempDouble;
          String cambioEnteroDecimal;
          int tempInt;
          if(decimal.contains(".")){
            double valorDecimal= Double.parseDouble(decimal);
            if(decimal2.contains(".")){
              double valorDecimal2= Double.parseDouble(decimal2);
              tempDouble=valorDecimal/valorDecimal2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempDouble)});
              //RESULT=tempDouble;
            }else{
              cambioEnteroDecimal=decimal2+".0";
              double valorDecimal2= Double.parseDouble(cambioEnteroDecimal);
              tempDouble=valorDecimal/valorDecimal2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempDouble)});
              //RESULT=tempDouble;
            }
          }else{
            if(decimal2.contains(".")){
              cambioEnteroDecimal=decimal+".0";
              double valorEntero= Double.parseDouble(cambioEnteroDecimal);
              double valorDecimal2= Double.parseDouble(decimal2);
              tempDouble=valorEntero/valorDecimal2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempDouble)});
              //RESULT=tempDouble;
            }else{int valorEntero=Integer.parseInt(decimal);
              int valorEntero2= Integer.parseInt(decimal2);
              tempInt=valorEntero/valorEntero2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempInt)});
              //RESULT=tempInt;
            }}
          String juntarValores= decimal+" / "+decimal2;
          ocurrenciaOperadores.add(new String[]{"Division",String.valueOf((decimalleft)),String.valueOf((decimalright)),juntarValores});

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("repetir_eje_y",18, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 725: // repetir_eje_y ::= PARENTESISA elegir_entero_decimal COMA PARENTESISC repetir_eje_y
        {
          String RESULT =null;
          int decimalleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-3)).left;
          int decimalright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-3)).right;
          String decimal = (String)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-3)).value;
          if(decimal.contains(".")){
            double valorDecimal= Double.parseDouble(decimal);
          }else{
            int valorEntero= Integer.parseInt(decimal);
          }ejeYArray.add(new String[]{getTituloObtener(),decimal});

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("repetir_eje_y",18, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 726: // repetir_eje_y ::= PARENTESISA elegir_entero_decimal PARENTESISC
        {
          String RESULT =null;
          int decimalleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-1)).left;
          int decimalright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-1)).right;
          String decimal = (String)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-1)).value;
          if(decimal.contains(".")){
            double valorDecimal= Double.parseDouble(decimal);
          }else{
            int valorEntero= Integer.parseInt(decimal);
          }ejeYArray.add(new String[]{getTituloObtener(),decimal});

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("repetir_eje_y",18, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 727: // repetir_eje_y ::= PARENTESISA elegir_entero_decimal MAS elegir_entero_decimal COMA PARENTESISC repetir_eje_y
        {
          String RESULT =null;
          int decimalleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-5)).left;
          int decimalright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-5)).right;
          String decimal = (String)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-5)).value;
          int decimal2left = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-3)).left;
          int decimal2right = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-3)).right;
          String decimal2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-3)).value;
          double tempDouble;
          String cambioEnteroDecimal;
          int tempInt;
          if(decimal.contains(".")){
            double valorDecimal= Double.parseDouble(decimal);
            if(decimal2.contains(".")){
              double valorDecimal2= Double.parseDouble(decimal2);
              tempDouble=valorDecimal+valorDecimal2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempDouble)});
              //RESULT=tempDouble;
            }else{
              cambioEnteroDecimal=decimal2+".0";
              double valorDecimal2= Double.parseDouble(cambioEnteroDecimal);
              tempDouble=valorDecimal+valorDecimal2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempDouble)});
              //RESULT=tempDouble;
            }
          }else{
            if(decimal2.contains(".")){
              cambioEnteroDecimal=decimal+".0";
              double valorEntero= Double.parseDouble(cambioEnteroDecimal);
              double valorDecimal2= Double.parseDouble(decimal2);
              tempDouble=valorEntero+valorDecimal2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempDouble)});
              //RESULT=tempDouble;
            }else{int valorEntero=Integer.parseInt(decimal);
              int valorEntero2= Integer.parseInt(decimal2);
              tempInt=valorEntero+valorEntero2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempInt)});
              //RESULT=tempInt;
            }}
          String juntarValores= decimal+" + "+decimal2;
          ocurrenciaOperadores.add(new String[]{"Suma",String.valueOf((decimalleft)),String.valueOf((decimalright)),juntarValores});

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("repetir_eje_y",18, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 728: // repetir_eje_y ::= PARENTESISA elegir_entero_decimal MAS elegir_entero_decimal PARENTESISC
        {
          String RESULT =null;
          int decimalleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-3)).left;
          int decimalright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-3)).right;
          String decimal = (String)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-3)).value;
          int decimal2left = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-1)).left;
          int decimal2right = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-1)).right;
          String decimal2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-1)).value;
          double tempDouble;
          String cambioEnteroDecimal;
          int tempInt;
          if(decimal.contains(".")){
            double valorDecimal= Double.parseDouble(decimal);
            if(decimal2.contains(".")){
              double valorDecimal2= Double.parseDouble(decimal2);
              tempDouble=valorDecimal+valorDecimal2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempDouble)});
              //RESULT=tempDouble;
            }else{
              cambioEnteroDecimal=decimal2+".0";
              double valorDecimal2= Double.parseDouble(cambioEnteroDecimal);
              tempDouble=valorDecimal+valorDecimal2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempDouble)});
              //RESULT=tempDouble;
            }
          }else{
            if(decimal2.contains(".")){
              cambioEnteroDecimal=decimal+".0";
              double valorEntero= Double.parseDouble(cambioEnteroDecimal);
              double valorDecimal2= Double.parseDouble(decimal2);
              tempDouble=valorEntero+valorDecimal2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempDouble)});
              //RESULT=tempDouble;
            }else{int valorEntero=Integer.parseInt(decimal);
              int valorEntero2= Integer.parseInt(decimal2);
              tempInt=valorEntero+valorEntero2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempInt)});
              //RESULT=tempInt;
            }}
          String juntarValores= decimal+" + "+decimal2;
          ocurrenciaOperadores.add(new String[]{"Suma",String.valueOf((decimalleft)),String.valueOf((decimalright)),juntarValores});

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("repetir_eje_y",18, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 729: // repetir_eje_y ::= PARENTESISA elegir_entero_decimal MENOS elegir_entero_decimal COMA PARENTESISC repetir_eje_y
        {
          String RESULT =null;
          int decimalleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-5)).left;
          int decimalright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-5)).right;
          String decimal = (String)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-5)).value;
          int decimal2left = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-3)).left;
          int decimal2right = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-3)).right;
          String decimal2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-3)).value;
          double tempDouble;
          String cambioEnteroDecimal;
          int tempInt;
          if(decimal.contains(".")){
            double valorDecimal= Double.parseDouble(decimal);
            if(decimal2.contains(".")){
              double valorDecimal2= Double.parseDouble(decimal2);
              tempDouble=valorDecimal-valorDecimal2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempDouble)});
              //RESULT=tempDouble;
            }else{
              cambioEnteroDecimal=decimal2+".0";
              double valorDecimal2= Double.parseDouble(cambioEnteroDecimal);
              tempDouble=valorDecimal-valorDecimal2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempDouble)});
              //RESULT=tempDouble;
            }
          }else{
            if(decimal2.contains(".")){
              cambioEnteroDecimal=decimal+".0";
              double valorEntero= Double.parseDouble(cambioEnteroDecimal);
              double valorDecimal2= Double.parseDouble(decimal2);
              tempDouble=valorEntero-valorDecimal2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempDouble)});
              //RESULT=tempDouble;
            }else{int valorEntero=Integer.parseInt(decimal);
              int valorEntero2= Integer.parseInt(decimal2);
              tempInt=valorEntero-valorEntero2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempInt)});
              //RESULT=tempInt;
            }}
          String juntarValores= decimal+" - "+decimal2;
          ocurrenciaOperadores.add(new String[]{"Resta",String.valueOf((decimalleft)),String.valueOf((decimalright)),juntarValores});

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("repetir_eje_y",18, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 730: // repetir_eje_y ::= PARENTESISA elegir_entero_decimal MENOS elegir_entero_decimal PARENTESISC
        {
          String RESULT =null;
          int decimalleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-3)).left;
          int decimalright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-3)).right;
          String decimal = (String)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-3)).value;
          int decimal2left = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-1)).left;
          int decimal2right = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-1)).right;
          String decimal2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-1)).value;
          double tempDouble;
          String cambioEnteroDecimal;
          int tempInt;
          if(decimal.contains(".")){
            double valorDecimal= Double.parseDouble(decimal);
            if(decimal2.contains(".")){
              double valorDecimal2= Double.parseDouble(decimal2);
              tempDouble=valorDecimal-valorDecimal2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempDouble)});
              //RESULT=tempDouble;
            }else{
              cambioEnteroDecimal=decimal2+".0";
              double valorDecimal2= Double.parseDouble(cambioEnteroDecimal);
              tempDouble=valorDecimal-valorDecimal2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempDouble)});
              //RESULT=tempDouble;
            }
          }else{
            if(decimal2.contains(".")){
              cambioEnteroDecimal=decimal+".0";
              double valorEntero= Double.parseDouble(cambioEnteroDecimal);
              double valorDecimal2= Double.parseDouble(decimal2);
              tempDouble=valorEntero-valorDecimal2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempDouble)});
              //RESULT=tempDouble;
            }else{int valorEntero=Integer.parseInt(decimal);
              int valorEntero2= Integer.parseInt(decimal2);
              tempInt=valorEntero-valorEntero2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempInt)});
              //RESULT=tempInt;
            }}
          String juntarValores= decimal+" - "+decimal2;
          ocurrenciaOperadores.add(new String[]{"Resta",String.valueOf((decimalleft)),String.valueOf((decimalright)),juntarValores});

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("repetir_eje_y",18, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 731: // repetir_eje_y ::= PARENTESISA elegir_entero_decimal ASTERISCO elegir_entero_decimal COMA PARENTESISC repetir_eje_y
        {
          String RESULT =null;
          int decimalleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-5)).left;
          int decimalright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-5)).right;
          String decimal = (String)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-5)).value;
          int decimal2left = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-3)).left;
          int decimal2right = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-3)).right;
          String decimal2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-3)).value;
          double tempDouble;
          String cambioEnteroDecimal;
          int tempInt;
          if(decimal.contains(".")){
            double valorDecimal= Double.parseDouble(decimal);
            if(decimal2.contains(".")){
              double valorDecimal2= Double.parseDouble(decimal2);
              tempDouble=valorDecimal*valorDecimal2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempDouble)});
              //RESULT=tempDouble;
            }else{
              cambioEnteroDecimal=decimal2+".0";
              double valorDecimal2= Double.parseDouble(cambioEnteroDecimal);
              tempDouble=valorDecimal*valorDecimal2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempDouble)});
              //RESULT=tempDouble;
            }
          }else{
            if(decimal2.contains(".")){
              cambioEnteroDecimal=decimal+".0";
              double valorEntero= Double.parseDouble(cambioEnteroDecimal);
              double valorDecimal2= Double.parseDouble(decimal2);
              tempDouble=valorEntero*valorDecimal2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempDouble)});
              //RESULT=tempDouble;
            }else{int valorEntero=Integer.parseInt(decimal);
              int valorEntero2= Integer.parseInt(decimal2);
              tempInt=valorEntero*valorEntero2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempInt)});
              //RESULT=tempInt;
            }}
          String juntarValores= decimal+" * "+decimal2;
          ocurrenciaOperadores.add(new String[]{"Multiplicacion",String.valueOf((decimalleft)),String.valueOf((decimalright)),juntarValores});

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("repetir_eje_y",18, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 732: // repetir_eje_y ::= PARENTESISA elegir_entero_decimal ASTERISCO elegir_entero_decimal PARENTESISC
        {
          String RESULT =null;
          int decimalleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-3)).left;
          int decimalright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-3)).right;
          String decimal = (String)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-3)).value;
          int decimal2left = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-1)).left;
          int decimal2right = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-1)).right;
          String decimal2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-1)).value;
          double tempDouble;
          String cambioEnteroDecimal;
          int tempInt;
          if(decimal.contains(".")){
            double valorDecimal= Double.parseDouble(decimal);
            if(decimal2.contains(".")){
              double valorDecimal2= Double.parseDouble(decimal2);
              tempDouble=valorDecimal*valorDecimal2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempDouble)});
              //RESULT=tempDouble;
            }else{
              cambioEnteroDecimal=decimal2+".0";
              double valorDecimal2= Double.parseDouble(cambioEnteroDecimal);
              tempDouble=valorDecimal*valorDecimal2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempDouble)});
              //RESULT=tempDouble;
            }
          }else{
            if(decimal2.contains(".")){
              cambioEnteroDecimal=decimal+".0";
              double valorEntero= Double.parseDouble(cambioEnteroDecimal);
              double valorDecimal2= Double.parseDouble(decimal2);
              tempDouble=valorEntero*valorDecimal2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempDouble)});
              //RESULT=tempDouble;
            }else{int valorEntero=Integer.parseInt(decimal);
              int valorEntero2= Integer.parseInt(decimal2);
              tempInt=valorEntero*valorEntero2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempInt)});
              //RESULT=tempInt;
            }}
          String juntarValores= decimal+" * "+decimal2;
          ocurrenciaOperadores.add(new String[]{"Multiplicacion",String.valueOf((decimalleft)),String.valueOf((decimalright)),juntarValores});

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("repetir_eje_y",18, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 733: // repetir_eje_y ::= PARENTESISA elegir_entero_decimal DIAGONAL elegir_entero_decimal COMA PARENTESISC repetir_eje_y
        {
          String RESULT =null;
          int decimalleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-5)).left;
          int decimalright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-5)).right;
          String decimal = (String)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-5)).value;
          int decimal2left = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-3)).left;
          int decimal2right = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-3)).right;
          String decimal2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-3)).value;
          double tempDouble;
          String cambioEnteroDecimal;
          int tempInt;
          if(decimal.contains(".")){
            double valorDecimal= Double.parseDouble(decimal);
            if(decimal2.contains(".")){
              double valorDecimal2= Double.parseDouble(decimal2);
              tempDouble=valorDecimal/valorDecimal2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempDouble)});
              //RESULT=tempDouble;
            }else{
              cambioEnteroDecimal=decimal2+".0";
              double valorDecimal2= Double.parseDouble(cambioEnteroDecimal);
              tempDouble=valorDecimal/valorDecimal2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempDouble)});
              //RESULT=tempDouble;
            }
          }else{
            if(decimal2.contains(".")){
              cambioEnteroDecimal=decimal+".0";
              double valorEntero= Double.parseDouble(cambioEnteroDecimal);
              double valorDecimal2= Double.parseDouble(decimal2);
              tempDouble=valorEntero/valorDecimal2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempDouble)});
              //RESULT=tempDouble;
            }else{int valorEntero=Integer.parseInt(decimal);
              int valorEntero2= Integer.parseInt(decimal2);
              tempInt=valorEntero/valorEntero2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempInt)});
              //RESULT=tempInt;
            }}
          String juntarValores= decimal+" / "+decimal2;
          ocurrenciaOperadores.add(new String[]{"Division",String.valueOf((decimalleft)),String.valueOf((decimalright)),juntarValores});

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("repetir_eje_y",18, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 734: // repetir_eje_y ::= PARENTESISA elegir_entero_decimal DIAGONAL elegir_entero_decimal PARENTESISC
        {
          String RESULT =null;
          int decimalleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-3)).left;
          int decimalright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-3)).right;
          String decimal = (String)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-3)).value;
          int decimal2left = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-1)).left;
          int decimal2right = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-1)).right;
          String decimal2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-1)).value;
          double tempDouble;
          String cambioEnteroDecimal;
          int tempInt;
          if(decimal.contains(".")){
            double valorDecimal= Double.parseDouble(decimal);
            if(decimal2.contains(".")){
              double valorDecimal2= Double.parseDouble(decimal2);
              tempDouble=valorDecimal/valorDecimal2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempDouble)});
              //RESULT=tempDouble;
            }else{
              cambioEnteroDecimal=decimal2+".0";
              double valorDecimal2= Double.parseDouble(cambioEnteroDecimal);
              tempDouble=valorDecimal/valorDecimal2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempDouble)});
              //RESULT=tempDouble;
            }
          }else{
            if(decimal2.contains(".")){
              cambioEnteroDecimal=decimal+".0";
              double valorEntero= Double.parseDouble(cambioEnteroDecimal);
              double valorDecimal2= Double.parseDouble(decimal2);
              tempDouble=valorEntero/valorDecimal2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempDouble)});
              //RESULT=tempDouble;
            }else{int valorEntero=Integer.parseInt(decimal);
              int valorEntero2= Integer.parseInt(decimal2);
              tempInt=valorEntero/valorEntero2;
              ejeYArray.add(new String[]{getTituloObtener(),String.valueOf(tempInt)});
              //RESULT=tempInt;
            }}
          String juntarValores= decimal+" / "+decimal2;
          ocurrenciaOperadores.add(new String[]{"Division",String.valueOf((decimalleft)),String.valueOf((decimalright)),juntarValores});

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("repetir_eje_y",18, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 735: // elegir_entero_decimal ::= ENTERO
        {
          String RESULT =null;
          int enteroleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()).left;
          int enteroright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()).right;
          Integer entero = (Integer)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.peek()).value;
          String temp = String.valueOf(entero);
          RESULT=temp;
          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("elegir_entero_decimal",20, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 736: // elegir_entero_decimal ::= ENTERO PUNTO ENTERO
        {
          String RESULT =null;
          int enteroleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-2)).left;
          int enteroright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-2)).right;
          Integer entero = (Integer)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-2)).value;
          int entero2left = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()).left;
          int entero2right = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()).right;
          Integer entero2 = (Integer)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.peek()).value;
          String temp = String.valueOf(entero)+"."+String.valueOf(entero2);
          RESULT=temp;

          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("elegir_entero_decimal",20, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 737: // repetir_unir ::= LLAVEA ENTERO COMA ENTERO LLAVEC COMA repetir_unir
        {
          String RESULT =null;
          int entero1left = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-5)).left;
          int entero1right = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-5)).right;
          Integer entero1 = (Integer)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-5)).value;
          int entero2left = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-3)).left;
          int entero2right = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-3)).right;
          Integer entero2 = (Integer)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-3)).value;
          unirBarraArray.add(new String[]{getTituloObtener(),String.valueOf(entero1),String.valueOf(entero2)});
          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("repetir_unir",19, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 738: // repetir_unir ::= LLAVEA ENTERO COMA ENTERO LLAVEC
        {
          String RESULT =null;
          int entero1left = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-3)).left;
          int entero1right = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-3)).right;
          Integer entero1 = (Integer)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-3)).value;
          int entero2left = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-1)).left;
          int entero2right = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-1)).right;
          Integer entero2 = (Integer)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-1)).value;
          unirBarraArray.add(new String[]{getTituloObtener(),String.valueOf(entero1),String.valueOf(entero2)});
          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("repetir_unir",19, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.elementAt(CUP$SintacticoParser$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 739: // definir_titulo ::= TEXTO
        {
          String RESULT =null;
          int textoleft = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()).left;
          int textoright = ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()).right;
          String texto = (String)((java_cup.runtime.Symbol) CUP$SintacticoParser$stack.peek()).value;
          tituloArray.add(new String[]{texto,"Barra"});setTituloObtener(texto);
          CUP$SintacticoParser$result = parser.getSymbolFactory().newSymbol("definir_titulo",22, ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoParser$stack.peek()), RESULT);
        }
        return CUP$SintacticoParser$result;

        /* . . . . . .*/
        default:
          throw new Exception(
                  "Invalid action number "+CUP$SintacticoParser$act_num+"found in internal parse table");

      }
    } /* end of method */

    /** Method splitting the generated action code into several parts. */
    public final java_cup.runtime.Symbol CUP$SintacticoParser$do_action(
            int                        CUP$SintacticoParser$act_num,
            java_cup.runtime.lr_parser CUP$SintacticoParser$parser,
            java.util.Stack            CUP$SintacticoParser$stack,
            int                        CUP$SintacticoParser$top)
            throws java.lang.Exception
    {
      /* select the action handler based on the action number */
      switch (CUP$SintacticoParser$act_num/300)
      {
        /*. . . . . . . . 0 < #action < 300. . . . . . . . . . . .*/
        case 0:
          return CUP$SintacticoParser$do_action_part00000000(
                  CUP$SintacticoParser$act_num,
                  CUP$SintacticoParser$parser,
                  CUP$SintacticoParser$stack,
                  CUP$SintacticoParser$top);
        /*. . . . . . . . 300 < #action < 600. . . . . . . . . . . .*/
        case 1:
          return CUP$SintacticoParser$do_action_part00000001(
                  CUP$SintacticoParser$act_num,
                  CUP$SintacticoParser$parser,
                  CUP$SintacticoParser$stack,
                  CUP$SintacticoParser$top);
        /*. . . . . . . . 600 < #action < 900. . . . . . . . . . . .*/
        case 2:
          return CUP$SintacticoParser$do_action_part00000002(
                  CUP$SintacticoParser$act_num,
                  CUP$SintacticoParser$parser,
                  CUP$SintacticoParser$stack,
                  CUP$SintacticoParser$top);
        /* . . . no valid action number: . . .*/
        default:
          throw new Exception("Invalid action number found in internal parse table");

      }      /* end of switch */
    }
  }

}
